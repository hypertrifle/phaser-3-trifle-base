{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "ApplicationCache": {
            "properties": {
                "CHECKING": {
                    "title": "CHECKING",
                    "type": "number"
                },
                "DOWNLOADING": {
                    "title": "DOWNLOADING",
                    "type": "number"
                },
                "IDLE": {
                    "title": "IDLE",
                    "type": "number"
                },
                "OBSOLETE": {
                    "title": "OBSOLETE",
                    "type": "number"
                },
                "UNCACHED": {
                    "title": "UNCACHED",
                    "type": "number"
                },
                "UPDATEREADY": {
                    "title": "UPDATEREADY",
                    "type": "number"
                },
                "oncached": {
                    "title": "oncached",
                    "type": "object"
                },
                "onchecking": {
                    "title": "onchecking",
                    "type": "object"
                },
                "ondownloading": {
                    "title": "ondownloading",
                    "type": "object"
                },
                "onerror": {
                    "title": "onerror",
                    "type": "object"
                },
                "onnoupdate": {
                    "title": "onnoupdate",
                    "type": "object"
                },
                "onobsolete": {
                    "title": "onobsolete",
                    "type": "object"
                },
                "onprogress": {
                    "title": "onprogress",
                    "type": "object"
                },
                "onupdateready": {
                    "title": "onupdateready",
                    "type": "object"
                },
                "status": {
                    "title": "status",
                    "type": "number"
                }
            },
            "title": "ApplicationCache",
            "type": "object"
        },
        "ArrayBuffer": {
            "description": "Represents a raw buffer of binary data, which is used to store data for the\ndifferent typed arrays. ArrayBuffers cannot be read from or written to directly,\nbut can be passed to a typed array or DataView Object to interpret the raw\nbuffer as needed.",
            "properties": {
                "__@toStringTag": {
                    "title": "__@toStringTag",
                    "type": "string"
                },
                "byteLength": {
                    "description": "Read-only. The length of the ArrayBuffer (in bytes).",
                    "title": "byteLength",
                    "type": "number"
                }
            },
            "title": "ArrayBuffer",
            "type": "object"
        },
        "Attr": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "localName": {
                    "title": "localName",
                    "type": "string"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "namespaceURI": {
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "ownerElement": {
                    "$ref": "#/definitions/Element",
                    "title": "ownerElement"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "title": "prefix",
                    "type": "string"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "specified": {
                    "title": "specified",
                    "type": "boolean"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "value": {
                    "title": "value",
                    "type": "string"
                }
            },
            "title": "Attr",
            "type": "object"
        },
        "BarProp": {
            "properties": {
                "visible": {
                    "title": "visible",
                    "type": "boolean"
                }
            },
            "title": "BarProp",
            "type": "object"
        },
        "Blob": {
            "properties": {
                "size": {
                    "title": "size",
                    "type": "number"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "Blob",
            "type": "object"
        },
        "ButtonSettings": {
            "properties": {
                "color_down": {
                    "title": "color_down",
                    "type": "number"
                },
                "color_hover": {
                    "title": "color_hover",
                    "type": "number"
                },
                "color_up": {
                    "title": "color_up",
                    "type": "number"
                },
                "colour_disabled": {
                    "title": "colour_disabled",
                    "type": "number"
                },
                "opacity": {
                    "title": "opacity",
                    "type": "number"
                },
                "radius": {
                    "title": "radius",
                    "type": "number"
                }
            },
            "title": "ButtonSettings",
            "type": "object"
        },
        "CacheStorage": {
            "title": "CacheStorage",
            "type": "object"
        },
        "CanvasDirection": {
            "enum": [
                "inherit",
                "ltr",
                "rtl"
            ],
            "title": "CanvasDirection",
            "type": "string"
        },
        "CanvasGradient": {
            "title": "CanvasGradient",
            "type": "object"
        },
        "CanvasLineCap": {
            "enum": [
                "butt",
                "round",
                "square"
            ],
            "title": "CanvasLineCap",
            "type": "string"
        },
        "CanvasLineJoin": {
            "enum": [
                "bevel",
                "miter",
                "round"
            ],
            "title": "CanvasLineJoin",
            "type": "string"
        },
        "CanvasPattern": {
            "title": "CanvasPattern",
            "type": "object"
        },
        "CanvasRenderingContext2D": {
            "properties": {
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "title": "canvas"
                },
                "direction": {
                    "$ref": "#/definitions/CanvasDirection",
                    "title": "direction"
                },
                "fillStyle": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CanvasGradient"
                        },
                        {
                            "$ref": "#/definitions/CanvasPattern"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "title": "fillStyle"
                },
                "filter": {
                    "title": "filter",
                    "type": "string"
                },
                "font": {
                    "title": "font",
                    "type": "string"
                },
                "globalAlpha": {
                    "title": "globalAlpha",
                    "type": "number"
                },
                "globalCompositeOperation": {
                    "title": "globalCompositeOperation",
                    "type": "string"
                },
                "imageSmoothingEnabled": {
                    "title": "imageSmoothingEnabled",
                    "type": "boolean"
                },
                "imageSmoothingQuality": {
                    "$ref": "#/definitions/ImageSmoothingQuality",
                    "title": "imageSmoothingQuality"
                },
                "lineCap": {
                    "$ref": "#/definitions/CanvasLineCap",
                    "title": "lineCap"
                },
                "lineDashOffset": {
                    "title": "lineDashOffset",
                    "type": "number"
                },
                "lineJoin": {
                    "$ref": "#/definitions/CanvasLineJoin",
                    "title": "lineJoin"
                },
                "lineWidth": {
                    "title": "lineWidth",
                    "type": "number"
                },
                "miterLimit": {
                    "title": "miterLimit",
                    "type": "number"
                },
                "shadowBlur": {
                    "title": "shadowBlur",
                    "type": "number"
                },
                "shadowColor": {
                    "title": "shadowColor",
                    "type": "string"
                },
                "shadowOffsetX": {
                    "title": "shadowOffsetX",
                    "type": "number"
                },
                "shadowOffsetY": {
                    "title": "shadowOffsetY",
                    "type": "number"
                },
                "strokeStyle": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CanvasGradient"
                        },
                        {
                            "$ref": "#/definitions/CanvasPattern"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "title": "strokeStyle"
                },
                "textAlign": {
                    "$ref": "#/definitions/CanvasTextAlign",
                    "title": "textAlign"
                },
                "textBaseline": {
                    "$ref": "#/definitions/CanvasTextBaseline",
                    "title": "textBaseline"
                }
            },
            "title": "CanvasRenderingContext2D",
            "type": "object"
        },
        "CanvasTextAlign": {
            "enum": [
                "center",
                "end",
                "left",
                "right",
                "start"
            ],
            "title": "CanvasTextAlign",
            "type": "string"
        },
        "CanvasTextBaseline": {
            "enum": [
                "alphabetic",
                "bottom",
                "hanging",
                "ideographic",
                "middle",
                "top"
            ],
            "title": "CanvasTextBaseline",
            "type": "string"
        },
        "ChildNode": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "namespaceURI": {
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                }
            },
            "title": "ChildNode",
            "type": "object"
        },
        "ColorPalette": {
            "properties": {
                "disabled": {
                    "title": "disabled",
                    "type": "string"
                },
                "hover": {
                    "title": "hover",
                    "type": "string"
                },
                "primary": {
                    "title": "primary",
                    "type": "string"
                },
                "secondary": {
                    "title": "secondary",
                    "type": "string"
                }
            },
            "title": "ColorPalette",
            "type": "object"
        },
        "Console": {
            "properties": {
                "memory": {
                    "title": "memory"
                }
            },
            "title": "Console",
            "type": "object"
        },
        "Crypto": {
            "properties": {
                "subtle": {
                    "$ref": "#/definitions/SubtleCrypto",
                    "title": "subtle"
                }
            },
            "title": "Crypto",
            "type": "object"
        },
        "CustomElementRegistry": {
            "title": "CustomElementRegistry",
            "type": "object"
        },
        "DOMImplementation": {
            "title": "DOMImplementation",
            "type": "object"
        },
        "DOMPoint": {
            "properties": {
                "w": {
                    "title": "w",
                    "type": "number"
                },
                "x": {
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "title": "y",
                    "type": "number"
                },
                "z": {
                    "title": "z",
                    "type": "number"
                }
            },
            "title": "DOMPoint",
            "type": "object"
        },
        "DOMRect": {
            "properties": {
                "bottom": {
                    "title": "bottom",
                    "type": "number"
                },
                "height": {
                    "title": "height",
                    "type": "number"
                },
                "left": {
                    "title": "left",
                    "type": "number"
                },
                "right": {
                    "title": "right",
                    "type": "number"
                },
                "top": {
                    "title": "top",
                    "type": "number"
                },
                "width": {
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "DOMRect",
            "type": "object"
        },
        "DOMRectReadOnly": {
            "properties": {
                "bottom": {
                    "title": "bottom",
                    "type": "number"
                },
                "height": {
                    "title": "height",
                    "type": "number"
                },
                "left": {
                    "title": "left",
                    "type": "number"
                },
                "right": {
                    "title": "right",
                    "type": "number"
                },
                "top": {
                    "title": "top",
                    "type": "number"
                },
                "width": {
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "DOMRectReadOnly",
            "type": "object"
        },
        "DOMStringMap": {
            "additionalProperties": {
                "type": "string"
            },
            "title": "DOMStringMap",
            "type": "object"
        },
        "Document": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "URL": {
                    "description": "Sets or gets the URL for the current document.",
                    "title": "URL",
                    "type": "string"
                },
                "activeElement": {
                    "$ref": "#/definitions/Element",
                    "description": "Gets the object that has the focus when the parent document has focus.",
                    "title": "activeElement"
                },
                "alinkColor": {
                    "description": "Sets or gets the color of all active links in the document.",
                    "title": "alinkColor",
                    "type": "string"
                },
                "all": {
                    "additionalProperties": false,
                    "description": "Returns a reference to the collection of elements contained by the object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "all",
                    "type": "object"
                },
                "anchors": {
                    "description": "Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.",
                    "items": {
                        "$ref": "#/definitions/HTMLAnchorElement"
                    },
                    "title": "anchors",
                    "type": "array"
                },
                "applets": {
                    "description": "Retrieves a collection of all applet objects in the document.",
                    "items": {
                        "$ref": "#/definitions/HTMLAppletElement"
                    },
                    "title": "applets",
                    "type": "array"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "bgColor": {
                    "description": "Deprecated. Sets or retrieves a value that indicates the background color behind the object.",
                    "title": "bgColor",
                    "type": "string"
                },
                "body": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Specifies the beginning and end of the document body.",
                    "title": "body"
                },
                "characterSet": {
                    "description": "Returns document's encoding.",
                    "title": "characterSet",
                    "type": "string"
                },
                "charset": {
                    "description": "Gets or sets the character set used to encode the object.",
                    "title": "charset",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "compatMode": {
                    "description": "Gets a value that indicates whether standards-compliant mode is switched on for the object.",
                    "title": "compatMode",
                    "type": "string"
                },
                "contentType": {
                    "description": "Returns document's content type.",
                    "title": "contentType",
                    "type": "string"
                },
                "cookie": {
                    "description": "Returns the HTTP cookies that apply to the Document. If there are no cookies or\ncookies can't be applied to this resource, the empty string will be returned.\nCan be set, to add a new cookie to the element's set of HTTP cookies.\nIf the contents are sandboxed into a\nunique origin (e.g. in an iframe with the sandbox attribute), a\n\"SecurityError\" DOMException will be thrown on getting\nand setting.",
                    "title": "cookie",
                    "type": "string"
                },
                "currentScript": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/HTMLScriptElement"
                        },
                        {
                            "$ref": "#/definitions/SVGScriptElement"
                        }
                    ],
                    "description": "Returns the script element, or the SVG script element,\nthat is currently executing, as long as the element represents a classic script.\nIn the case of reentrant script execution, returns the one that most recently started executing\namongst those that have not yet finished executing.\nReturns null if the Document is not currently executing a script\nor SVG script element (e.g., because the running script is an event\nhandler, or a timeout), or if the currently executing script or SVG\nscript element represents a module script.",
                    "title": "currentScript"
                },
                "defaultView": {
                    "$ref": "#/definitions/Window",
                    "title": "defaultView"
                },
                "designMode": {
                    "description": "Sets or gets a value that indicates whether the document can be edited.",
                    "title": "designMode",
                    "type": "string"
                },
                "dir": {
                    "description": "Sets or retrieves a value that indicates the reading order of the object.",
                    "title": "dir",
                    "type": "string"
                },
                "doctype": {
                    "$ref": "#/definitions/DocumentType",
                    "description": "Gets an object representing the document type declaration associated with the current document.",
                    "title": "doctype"
                },
                "documentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Gets a reference to the root node of the document.",
                    "title": "documentElement"
                },
                "documentURI": {
                    "description": "Returns document's URL.",
                    "title": "documentURI",
                    "type": "string"
                },
                "domain": {
                    "description": "Sets or gets the security domain of the document.",
                    "title": "domain",
                    "type": "string"
                },
                "embeds": {
                    "description": "Retrieves a collection of all embed objects in the document.",
                    "items": {
                        "$ref": "#/definitions/HTMLEmbedElement"
                    },
                    "title": "embeds",
                    "type": "array"
                },
                "fgColor": {
                    "description": "Sets or gets the foreground (text) color of the document.",
                    "title": "fgColor",
                    "type": "string"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "forms": {
                    "description": "Retrieves a collection, in source order, of all form objects in the document.",
                    "items": {
                        "additionalProperties": false,
                        "patternProperties": {
                            "^[0-9]+$": {
                                "$ref": "#/definitions/Element"
                            }
                        },
                        "type": "object"
                    },
                    "title": "forms",
                    "type": "array"
                },
                "fullscreen": {
                    "title": "fullscreen",
                    "type": "boolean"
                },
                "fullscreenEnabled": {
                    "description": "Returns true if document has the ability to display elements fullscreen\nand fullscreen is supported, or false otherwise.",
                    "title": "fullscreenEnabled",
                    "type": "boolean"
                },
                "head": {
                    "$ref": "#/definitions/HTMLHeadElement",
                    "description": "Returns the head element.",
                    "title": "head"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "images": {
                    "description": "Retrieves a collection, in source order, of img objects in the document.",
                    "items": {
                        "$ref": "#/definitions/HTMLImageElement"
                    },
                    "title": "images",
                    "type": "array"
                },
                "implementation": {
                    "$ref": "#/definitions/DOMImplementation",
                    "description": "Gets the implementation object of the current document.",
                    "title": "implementation"
                },
                "inputEncoding": {
                    "description": "Returns the character encoding used to create the webpage that is loaded into the document object.",
                    "title": "inputEncoding",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "lastModified": {
                    "description": "Gets the date that the page was last modified, if the page supplies one.",
                    "title": "lastModified",
                    "type": "string"
                },
                "linkColor": {
                    "description": "Sets or gets the color of the document links.",
                    "title": "linkColor",
                    "type": "string"
                },
                "links": {
                    "description": "Retrieves a collection of all a objects that specify the href property and all area objects in the document.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/HTMLAnchorElement"
                            },
                            {
                                "$ref": "#/definitions/HTMLAreaElement"
                            }
                        ]
                    },
                    "title": "links",
                    "type": "array"
                },
                "location": {
                    "$ref": "#/definitions/Location",
                    "description": "Contains information about the current URL.",
                    "title": "location"
                },
                "namespaceURI": {
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreadystatechange": {
                    "description": "Fires when the state of the object has changed.",
                    "title": "onreadystatechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvisibilitychange": {
                    "title": "onvisibilitychange",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "origin": {
                    "description": "Returns document's origin.",
                    "title": "origin",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "plugins": {
                    "description": "Return an HTMLCollection of the embed elements in the Document.",
                    "items": {
                        "$ref": "#/definitions/HTMLEmbedElement"
                    },
                    "title": "plugins",
                    "type": "array"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "readyState": {
                    "$ref": "#/definitions/DocumentReadyState",
                    "description": "Retrieves a value that indicates the current state of the object.",
                    "title": "readyState"
                },
                "referrer": {
                    "description": "Gets the URL of the location that referred the user to the current page.",
                    "title": "referrer",
                    "type": "string"
                },
                "scripts": {
                    "description": "Retrieves a collection of all script objects in the document.",
                    "items": {
                        "$ref": "#/definitions/HTMLScriptElement"
                    },
                    "title": "scripts",
                    "type": "array"
                },
                "scrollingElement": {
                    "$ref": "#/definitions/Element",
                    "title": "scrollingElement"
                },
                "styleSheets": {
                    "additionalProperties": false,
                    "description": "Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/StyleSheet"
                        }
                    },
                    "title": "styleSheets",
                    "type": "object"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "timeline": {
                    "$ref": "#/definitions/DocumentTimeline",
                    "title": "timeline"
                },
                "title": {
                    "description": "Contains the title of the document.",
                    "title": "title",
                    "type": "string"
                },
                "visibilityState": {
                    "$ref": "#/definitions/VisibilityState",
                    "title": "visibilityState"
                },
                "vlinkColor": {
                    "description": "Sets or gets the color of the links that the user has visited.",
                    "title": "vlinkColor",
                    "type": "string"
                }
            },
            "title": "Document",
            "type": "object"
        },
        "DocumentReadyState": {
            "enum": [
                "complete",
                "interactive",
                "loading"
            ],
            "title": "DocumentReadyState",
            "type": "string"
        },
        "DocumentTimeline": {
            "properties": {
                "currentTime": {
                    "title": "currentTime",
                    "type": "number"
                }
            },
            "title": "DocumentTimeline",
            "type": "object"
        },
        "DocumentType": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "namespaceURI": {
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "publicId": {
                    "title": "publicId",
                    "type": "string"
                },
                "systemId": {
                    "title": "systemId",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                }
            },
            "title": "DocumentType",
            "type": "object"
        },
        "Element": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                }
            },
            "title": "Element",
            "type": "object"
        },
        "ErrorEventHandler": {
            "title": "ErrorEventHandler",
            "type": "object"
        },
        "Event": {
            "properties": {
                "AT_TARGET": {
                    "title": "AT_TARGET",
                    "type": "number"
                },
                "BUBBLING_PHASE": {
                    "title": "BUBBLING_PHASE",
                    "type": "number"
                },
                "CAPTURING_PHASE": {
                    "title": "CAPTURING_PHASE",
                    "type": "number"
                },
                "NONE": {
                    "title": "NONE",
                    "type": "number"
                },
                "bubbles": {
                    "description": "Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.",
                    "title": "bubbles",
                    "type": "boolean"
                },
                "cancelBubble": {
                    "title": "cancelBubble",
                    "type": "boolean"
                },
                "cancelable": {
                    "title": "cancelable",
                    "type": "boolean"
                },
                "composed": {
                    "description": "Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.",
                    "title": "composed",
                    "type": "boolean"
                },
                "currentTarget": {
                    "$ref": "#/definitions/EventTarget",
                    "description": "Returns the object whose event listener's callback is currently being\ninvoked.",
                    "title": "currentTarget"
                },
                "defaultPrevented": {
                    "title": "defaultPrevented",
                    "type": "boolean"
                },
                "eventPhase": {
                    "title": "eventPhase",
                    "type": "number"
                },
                "isTrusted": {
                    "description": "Returns true if event was dispatched by the user agent, and\nfalse otherwise.",
                    "title": "isTrusted",
                    "type": "boolean"
                },
                "returnValue": {
                    "title": "returnValue",
                    "type": "boolean"
                },
                "srcElement": {
                    "$ref": "#/definitions/Element",
                    "title": "srcElement"
                },
                "target": {
                    "$ref": "#/definitions/EventTarget",
                    "description": "Returns the object to which event is dispatched (its target).",
                    "title": "target"
                },
                "timeStamp": {
                    "description": "Returns the event's timestamp as the number of milliseconds measured relative to\nthe time origin.",
                    "title": "timeStamp",
                    "type": "number"
                },
                "type": {
                    "description": "Returns the type of event, e.g.\n\"click\", \"hashchange\", or\n\"submit\".",
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "Event",
            "type": "object"
        },
        "EventTarget": {
            "title": "EventTarget",
            "type": "object"
        },
        "ExtensionScriptApis": {
            "title": "ExtensionScriptApis",
            "type": "object"
        },
        "External": {
            "title": "External",
            "type": "object"
        },
        "FrameRequestCallback": {
            "title": "FrameRequestCallback",
            "type": "object"
        },
        "Function": {
            "description": "Creates a new function.",
            "properties": {
                "arguments": {
                    "title": "arguments"
                },
                "caller": {
                    "$ref": "#/definitions/Function",
                    "title": "caller"
                },
                "length": {
                    "title": "length",
                    "type": "number"
                },
                "name": {
                    "description": "Returns the name of the function. Function names are read-only and can not be changed.",
                    "title": "name",
                    "type": "string"
                },
                "prototype": {
                    "title": "prototype"
                }
            },
            "title": "Function",
            "type": "object"
        },
        "GamepadHapticActuator": {
            "properties": {
                "type": {
                    "enum": [
                        "vibration"
                    ],
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "GamepadHapticActuator",
            "type": "object"
        },
        "GamepadInputEmulationType": {
            "enum": [
                "gamepad",
                "keyboard",
                "mouse"
            ],
            "title": "GamepadInputEmulationType",
            "type": "string"
        },
        "Geolocation": {
            "title": "Geolocation",
            "type": "object"
        },
        "HTMLAnchorElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "charset": {
                    "description": "Sets or retrieves the character set used to encode the object.",
                    "title": "charset",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "coords": {
                    "description": "Sets or retrieves the coordinates of the object.",
                    "title": "coords",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "download": {
                    "title": "download",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "hash": {
                    "title": "hash",
                    "type": "string"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "host": {
                    "title": "host",
                    "type": "string"
                },
                "hostname": {
                    "title": "hostname",
                    "type": "string"
                },
                "href": {
                    "title": "href",
                    "type": "string"
                },
                "hreflang": {
                    "description": "Sets or retrieves the language code of the object.",
                    "title": "hreflang",
                    "type": "string"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "name": {
                    "description": "Sets or retrieves the shape of the object.",
                    "title": "name",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "origin": {
                    "title": "origin",
                    "type": "string"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "pathname": {
                    "title": "pathname",
                    "type": "string"
                },
                "ping": {
                    "title": "ping",
                    "type": "string"
                },
                "port": {
                    "title": "port",
                    "type": "string"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "protocol": {
                    "title": "protocol",
                    "type": "string"
                },
                "referrerPolicy": {
                    "title": "referrerPolicy",
                    "type": "string"
                },
                "rel": {
                    "description": "Sets or retrieves the relationship between the object and the destination of the link.",
                    "title": "rel",
                    "type": "string"
                },
                "relList": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "relList",
                    "type": "object"
                },
                "rev": {
                    "description": "Sets or retrieves the relationship between the object and the destination of the link.",
                    "title": "rev",
                    "type": "string"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "search": {
                    "title": "search",
                    "type": "string"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "shape": {
                    "description": "Sets or retrieves the shape of the object.",
                    "title": "shape",
                    "type": "string"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "target": {
                    "description": "Sets or retrieves the window or frame at which to target content.",
                    "title": "target",
                    "type": "string"
                },
                "text": {
                    "description": "Retrieves or sets the text of the object as a string.",
                    "title": "text",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "title": "HTMLAnchorElement",
            "type": "object"
        },
        "HTMLAppletElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "align": {
                    "title": "align",
                    "type": "string"
                },
                "alt": {
                    "description": "Sets or retrieves a text alternative to the graphic.",
                    "title": "alt",
                    "type": "string"
                },
                "archive": {
                    "description": "Sets or retrieves a character string that can be used to implement your own archive functionality for the object.",
                    "title": "archive",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "code": {
                    "title": "code",
                    "type": "string"
                },
                "codeBase": {
                    "description": "Sets or retrieves the URL of the component.",
                    "title": "codeBase",
                    "type": "string"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "form": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "form",
                    "type": "object"
                },
                "height": {
                    "description": "Sets or retrieves the height of the object.",
                    "title": "height",
                    "type": "string"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "hspace": {
                    "title": "hspace",
                    "type": "number"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "name": {
                    "description": "Sets or retrieves the shape of the object.",
                    "title": "name",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "object": {
                    "title": "object",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                },
                "vspace": {
                    "title": "vspace",
                    "type": "number"
                },
                "width": {
                    "title": "width",
                    "type": "string"
                }
            },
            "title": "HTMLAppletElement",
            "type": "object"
        },
        "HTMLAreaElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "alt": {
                    "description": "Sets or retrieves a text alternative to the graphic.",
                    "title": "alt",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "coords": {
                    "description": "Sets or retrieves the coordinates of the object.",
                    "title": "coords",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "download": {
                    "title": "download",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "hash": {
                    "title": "hash",
                    "type": "string"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "host": {
                    "title": "host",
                    "type": "string"
                },
                "hostname": {
                    "title": "hostname",
                    "type": "string"
                },
                "href": {
                    "title": "href",
                    "type": "string"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "noHref": {
                    "description": "Sets or gets whether clicks in this region cause action.",
                    "title": "noHref",
                    "type": "boolean"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "origin": {
                    "title": "origin",
                    "type": "string"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "pathname": {
                    "title": "pathname",
                    "type": "string"
                },
                "ping": {
                    "title": "ping",
                    "type": "string"
                },
                "port": {
                    "title": "port",
                    "type": "string"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "protocol": {
                    "title": "protocol",
                    "type": "string"
                },
                "referrerPolicy": {
                    "title": "referrerPolicy",
                    "type": "string"
                },
                "rel": {
                    "title": "rel",
                    "type": "string"
                },
                "relList": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "relList",
                    "type": "object"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "search": {
                    "title": "search",
                    "type": "string"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "shape": {
                    "description": "Sets or retrieves the shape of the object.",
                    "title": "shape",
                    "type": "string"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "target": {
                    "description": "Sets or retrieves the window or frame at which to target content.",
                    "title": "target",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "title": "HTMLAreaElement",
            "type": "object"
        },
        "HTMLCanvasElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "height": {
                    "description": "Gets or sets the height of a canvas element on a document.",
                    "title": "height",
                    "type": "number"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                },
                "width": {
                    "description": "Gets or sets the width of a canvas element on a document.",
                    "title": "width",
                    "type": "number"
                }
            },
            "title": "HTMLCanvasElement",
            "type": "object"
        },
        "HTMLDivElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "align": {
                    "description": "Sets or retrieves how the object is aligned with adjacent text.",
                    "title": "align",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                }
            },
            "title": "HTMLDivElement",
            "type": "object"
        },
        "HTMLElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                }
            },
            "title": "HTMLElement",
            "type": "object"
        },
        "HTMLEmbedElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "align": {
                    "title": "align",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "height": {
                    "description": "Sets or retrieves the height of the object.",
                    "title": "height",
                    "type": "string"
                },
                "hidden": {
                    "title": "hidden"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "msPlayToDisabled": {
                    "description": "Gets or sets whether the DLNA PlayTo device is available.",
                    "title": "msPlayToDisabled",
                    "type": "boolean"
                },
                "msPlayToPreferredSourceUri": {
                    "description": "Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.",
                    "title": "msPlayToPreferredSourceUri",
                    "type": "string"
                },
                "msPlayToPrimary": {
                    "description": "Gets or sets the primary DLNA PlayTo device.",
                    "title": "msPlayToPrimary",
                    "type": "boolean"
                },
                "msPlayToSource": {
                    "description": "Gets the source associated with the media element for use by the PlayToManager.",
                    "title": "msPlayToSource"
                },
                "name": {
                    "description": "Sets or retrieves the name of the object.",
                    "title": "name",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "palette": {
                    "description": "Retrieves the palette used for the embedded document.",
                    "title": "palette",
                    "type": "string"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "pluginspage": {
                    "description": "Retrieves the URL of the plug-in used to view an embedded document.",
                    "title": "pluginspage",
                    "type": "string"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "readyState": {
                    "title": "readyState",
                    "type": "string"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "src": {
                    "description": "Sets or retrieves a URL to be loaded by the object.",
                    "title": "src",
                    "type": "string"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                },
                "units": {
                    "description": "Sets or retrieves the height and width units of the embed object.",
                    "title": "units",
                    "type": "string"
                },
                "width": {
                    "description": "Sets or retrieves the width of the object.",
                    "title": "width",
                    "type": "string"
                }
            },
            "title": "HTMLEmbedElement",
            "type": "object"
        },
        "HTMLHeadElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                }
            },
            "title": "HTMLHeadElement",
            "type": "object"
        },
        "HTMLImageElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "align": {
                    "description": "Sets or retrieves how the object is aligned with adjacent text.",
                    "title": "align",
                    "type": "string"
                },
                "alt": {
                    "description": "Sets or retrieves a text alternative to the graphic.",
                    "title": "alt",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "border": {
                    "description": "Specifies the properties of a border drawn around an object.",
                    "title": "border",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "complete": {
                    "description": "Retrieves whether the object is fully loaded.",
                    "title": "complete",
                    "type": "boolean"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "crossOrigin": {
                    "title": "crossOrigin",
                    "type": "string"
                },
                "currentSrc": {
                    "title": "currentSrc",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "decoding": {
                    "enum": [
                        "async",
                        "auto",
                        "sync"
                    ],
                    "title": "decoding",
                    "type": "string"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "height": {
                    "description": "Sets or retrieves the height of the object.",
                    "title": "height",
                    "type": "number"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "hspace": {
                    "description": "Sets or retrieves the width of the border to draw around the object.",
                    "title": "hspace",
                    "type": "number"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "isMap": {
                    "description": "Sets or retrieves whether the image is a server-side image map.",
                    "title": "isMap",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "longDesc": {
                    "description": "Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.",
                    "title": "longDesc",
                    "type": "string"
                },
                "lowsrc": {
                    "title": "lowsrc",
                    "type": "string"
                },
                "name": {
                    "description": "Sets or retrieves the name of the object.",
                    "title": "name",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "naturalHeight": {
                    "description": "The original height of the image resource before sizing.",
                    "title": "naturalHeight",
                    "type": "number"
                },
                "naturalWidth": {
                    "description": "The original width of the image resource before sizing.",
                    "title": "naturalWidth",
                    "type": "number"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "referrerPolicy": {
                    "title": "referrerPolicy",
                    "type": "string"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "sizes": {
                    "title": "sizes",
                    "type": "string"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "src": {
                    "description": "The address or URL of the a media resource that is to be considered.",
                    "title": "src",
                    "type": "string"
                },
                "srcset": {
                    "title": "srcset",
                    "type": "string"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                },
                "useMap": {
                    "description": "Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.",
                    "title": "useMap",
                    "type": "string"
                },
                "vspace": {
                    "description": "Sets or retrieves the vertical margin for the object.",
                    "title": "vspace",
                    "type": "number"
                },
                "width": {
                    "description": "Sets or retrieves the width of the object.",
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "HTMLImageElement",
            "type": "object"
        },
        "HTMLScriptElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "async": {
                    "title": "async",
                    "type": "boolean"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "charset": {
                    "description": "Sets or retrieves the character set used to encode the object.",
                    "title": "charset",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "crossOrigin": {
                    "title": "crossOrigin",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "defer": {
                    "description": "Sets or retrieves the status of the script.",
                    "title": "defer",
                    "type": "boolean"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "event": {
                    "description": "Sets or retrieves the event for which the script is written.",
                    "title": "event",
                    "type": "string"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "htmlFor": {
                    "description": "Sets or retrieves the object that is bound to the event script.",
                    "title": "htmlFor",
                    "type": "string"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "integrity": {
                    "title": "integrity",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "noModule": {
                    "title": "noModule",
                    "type": "boolean"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "referrerPolicy": {
                    "title": "referrerPolicy",
                    "type": "string"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "src": {
                    "description": "Retrieves the URL to an external file that contains the source code or data.",
                    "title": "src",
                    "type": "string"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "text": {
                    "description": "Retrieves or sets the text of the object as a string.",
                    "title": "text",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                },
                "type": {
                    "description": "Sets or retrieves the MIME type for the associated scripting engine.",
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "HTMLScriptElement",
            "type": "object"
        },
        "HTMLSlotElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "accessKey": {
                    "title": "accessKey",
                    "type": "string"
                },
                "accessKeyLabel": {
                    "title": "accessKeyLabel",
                    "type": "string"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "autocapitalize": {
                    "title": "autocapitalize",
                    "type": "string"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className",
                    "type": "string"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentEditable": {
                    "title": "contentEditable",
                    "type": "string"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "dir": {
                    "title": "dir",
                    "type": "string"
                },
                "draggable": {
                    "title": "draggable",
                    "type": "boolean"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "hidden": {
                    "title": "hidden",
                    "type": "boolean"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "innerText": {
                    "title": "innerText",
                    "type": "string"
                },
                "inputMode": {
                    "title": "inputMode",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isContentEditable": {
                    "title": "isContentEditable",
                    "type": "boolean"
                },
                "lang": {
                    "title": "lang",
                    "type": "string"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "offsetHeight": {
                    "title": "offsetHeight",
                    "type": "number"
                },
                "offsetLeft": {
                    "title": "offsetLeft",
                    "type": "number"
                },
                "offsetParent": {
                    "$ref": "#/definitions/Element",
                    "title": "offsetParent"
                },
                "offsetTop": {
                    "title": "offsetTop",
                    "type": "number"
                },
                "offsetWidth": {
                    "title": "offsetWidth",
                    "type": "number"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "spellcheck": {
                    "title": "spellcheck",
                    "type": "boolean"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "translate": {
                    "title": "translate",
                    "type": "boolean"
                }
            },
            "title": "HTMLSlotElement",
            "type": "object"
        },
        "History": {
            "properties": {
                "length": {
                    "title": "length",
                    "type": "number"
                },
                "scrollRestoration": {
                    "$ref": "#/definitions/ScrollRestoration",
                    "title": "scrollRestoration"
                },
                "state": {
                    "title": "state"
                }
            },
            "title": "History",
            "type": "object"
        },
        "IDBFactory": {
            "title": "IDBFactory",
            "type": "object"
        },
        "ImageData": {
            "properties": {
                "data": {
                    "additionalProperties": false,
                    "description": "A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\nIf the requested number of bytes could not be allocated an exception is raised.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "title": "data",
                    "type": "object"
                },
                "height": {
                    "description": "Returns the actual dimensions of the data in the ImageData object, in\npixels.",
                    "title": "height",
                    "type": "number"
                },
                "width": {
                    "title": "width",
                    "type": "number"
                }
            },
            "title": "ImageData",
            "type": "object"
        },
        "ImageSmoothingQuality": {
            "enum": [
                "high",
                "low",
                "medium"
            ],
            "title": "ImageSmoothingQuality",
            "type": "string"
        },
        "KeyboardEvent": {
            "properties": {
                "AT_TARGET": {
                    "title": "AT_TARGET",
                    "type": "number"
                },
                "BUBBLING_PHASE": {
                    "title": "BUBBLING_PHASE",
                    "type": "number"
                },
                "CAPTURING_PHASE": {
                    "title": "CAPTURING_PHASE",
                    "type": "number"
                },
                "DOM_KEY_LOCATION_JOYSTICK": {
                    "title": "DOM_KEY_LOCATION_JOYSTICK",
                    "type": "number"
                },
                "DOM_KEY_LOCATION_LEFT": {
                    "title": "DOM_KEY_LOCATION_LEFT",
                    "type": "number"
                },
                "DOM_KEY_LOCATION_MOBILE": {
                    "title": "DOM_KEY_LOCATION_MOBILE",
                    "type": "number"
                },
                "DOM_KEY_LOCATION_NUMPAD": {
                    "title": "DOM_KEY_LOCATION_NUMPAD",
                    "type": "number"
                },
                "DOM_KEY_LOCATION_RIGHT": {
                    "title": "DOM_KEY_LOCATION_RIGHT",
                    "type": "number"
                },
                "DOM_KEY_LOCATION_STANDARD": {
                    "title": "DOM_KEY_LOCATION_STANDARD",
                    "type": "number"
                },
                "NONE": {
                    "title": "NONE",
                    "type": "number"
                },
                "altKey": {
                    "title": "altKey",
                    "type": "boolean"
                },
                "bubbles": {
                    "description": "Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.",
                    "title": "bubbles",
                    "type": "boolean"
                },
                "cancelBubble": {
                    "title": "cancelBubble",
                    "type": "boolean"
                },
                "cancelable": {
                    "title": "cancelable",
                    "type": "boolean"
                },
                "char": {
                    "title": "char",
                    "type": "string"
                },
                "charCode": {
                    "title": "charCode",
                    "type": "number"
                },
                "code": {
                    "title": "code",
                    "type": "string"
                },
                "composed": {
                    "description": "Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.",
                    "title": "composed",
                    "type": "boolean"
                },
                "ctrlKey": {
                    "title": "ctrlKey",
                    "type": "boolean"
                },
                "currentTarget": {
                    "$ref": "#/definitions/EventTarget",
                    "description": "Returns the object whose event listener's callback is currently being\ninvoked.",
                    "title": "currentTarget"
                },
                "defaultPrevented": {
                    "title": "defaultPrevented",
                    "type": "boolean"
                },
                "detail": {
                    "title": "detail",
                    "type": "number"
                },
                "eventPhase": {
                    "title": "eventPhase",
                    "type": "number"
                },
                "isTrusted": {
                    "description": "Returns true if event was dispatched by the user agent, and\nfalse otherwise.",
                    "title": "isTrusted",
                    "type": "boolean"
                },
                "key": {
                    "title": "key",
                    "type": "string"
                },
                "keyCode": {
                    "title": "keyCode",
                    "type": "number"
                },
                "location": {
                    "title": "location",
                    "type": "number"
                },
                "metaKey": {
                    "title": "metaKey",
                    "type": "boolean"
                },
                "repeat": {
                    "title": "repeat",
                    "type": "boolean"
                },
                "returnValue": {
                    "title": "returnValue",
                    "type": "boolean"
                },
                "shiftKey": {
                    "title": "shiftKey",
                    "type": "boolean"
                },
                "srcElement": {
                    "$ref": "#/definitions/Element",
                    "title": "srcElement"
                },
                "target": {
                    "$ref": "#/definitions/EventTarget",
                    "description": "Returns the object to which event is dispatched (its target).",
                    "title": "target"
                },
                "timeStamp": {
                    "description": "Returns the event's timestamp as the number of milliseconds measured relative to\nthe time origin.",
                    "title": "timeStamp",
                    "type": "number"
                },
                "type": {
                    "description": "Returns the type of event, e.g.\n\"click\", \"hashchange\", or\n\"submit\".",
                    "title": "type",
                    "type": "string"
                },
                "view": {
                    "$ref": "#/definitions/Window",
                    "title": "view"
                },
                "which": {
                    "title": "which",
                    "type": "number"
                }
            },
            "title": "KeyboardEvent",
            "type": "object"
        },
        "Location": {
            "properties": {
                "ancestorOrigins": {
                    "additionalProperties": false,
                    "description": "Returns a DOMStringList object listing the origins of the ancestor browsing contexts, from the parent browsing\ncontext to the top-level browsing context.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "ancestorOrigins",
                    "type": "object"
                },
                "hash": {
                    "description": "Returns the Location object's URL's fragment (includes leading \"#\" if non-empty).\nCan be set, to navigate to the same URL with a changed fragment (ignores leading \"#\").",
                    "title": "hash",
                    "type": "string"
                },
                "host": {
                    "description": "Returns the Location object's URL's host and port (if different from the default\nport for the scheme).\nCan be set, to navigate to the same URL with a changed host and port.",
                    "title": "host",
                    "type": "string"
                },
                "hostname": {
                    "description": "Returns the Location object's URL's host.\nCan be set, to navigate to the same URL with a changed host.",
                    "title": "hostname",
                    "type": "string"
                },
                "href": {
                    "description": "Returns the Location object's URL.\nCan be set, to navigate to the given URL.",
                    "title": "href",
                    "type": "string"
                },
                "origin": {
                    "description": "Returns the Location object's URL's origin.",
                    "title": "origin",
                    "type": "string"
                },
                "pathname": {
                    "description": "Returns the Location object's URL's path.\nCan be set, to navigate to the same URL with a changed path.",
                    "title": "pathname",
                    "type": "string"
                },
                "port": {
                    "description": "Returns the Location object's URL's port.\nCan be set, to navigate to the same URL with a changed port.",
                    "title": "port",
                    "type": "string"
                },
                "protocol": {
                    "description": "Returns the Location object's URL's scheme.\nCan be set, to navigate to the same URL with a changed scheme.",
                    "title": "protocol",
                    "type": "string"
                },
                "search": {
                    "description": "Returns the Location object's URL's query (includes leading \"?\" if non-empty).\nCan be set, to navigate to the same URL with a changed query (ignores leading \"?\").",
                    "title": "search",
                    "type": "string"
                }
            },
            "title": "Location",
            "type": "object"
        },
        "MatterJS.Engine": {
            "description": "The `Matter.Engine` module contains methods for creating and manipulating engines.\nAn engine is a controller that manages updating the simulation of the world.",
            "title": "MatterJS.Engine",
            "type": "object"
        },
        "MatterJS.Vertices": {
            "description": "The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\nA set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\nA `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).",
            "title": "MatterJS.Vertices",
            "type": "object"
        },
        "MatterJS.World": {
            "description": "The `Matter.World` module contains methods for creating and manipulating the world composite.\nA `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\nA `Matter.World` has a few additional properties including `gravity` and `bounds`.\nIt is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\nThere are also a few methods here that alias those in `Matter.Composite` for easier readability.",
            "title": "MatterJS.World",
            "type": "object"
        },
        "MediaDevices": {
            "properties": {
                "ondevicechange": {
                    "title": "ondevicechange",
                    "type": "object"
                }
            },
            "title": "MediaDevices",
            "type": "object"
        },
        "MimeType": {
            "properties": {
                "description": {
                    "title": "description",
                    "type": "string"
                },
                "enabledPlugin": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/MimeType"
                        }
                    },
                    "title": "enabledPlugin",
                    "type": "object"
                },
                "suffixes": {
                    "title": "suffixes",
                    "type": "string"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "MimeType",
            "type": "object"
        },
        "MouseEvent": {
            "properties": {
                "AT_TARGET": {
                    "title": "AT_TARGET",
                    "type": "number"
                },
                "BUBBLING_PHASE": {
                    "title": "BUBBLING_PHASE",
                    "type": "number"
                },
                "CAPTURING_PHASE": {
                    "title": "CAPTURING_PHASE",
                    "type": "number"
                },
                "NONE": {
                    "title": "NONE",
                    "type": "number"
                },
                "altKey": {
                    "title": "altKey",
                    "type": "boolean"
                },
                "bubbles": {
                    "description": "Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.",
                    "title": "bubbles",
                    "type": "boolean"
                },
                "button": {
                    "title": "button",
                    "type": "number"
                },
                "buttons": {
                    "title": "buttons",
                    "type": "number"
                },
                "cancelBubble": {
                    "title": "cancelBubble",
                    "type": "boolean"
                },
                "cancelable": {
                    "title": "cancelable",
                    "type": "boolean"
                },
                "clientX": {
                    "title": "clientX",
                    "type": "number"
                },
                "clientY": {
                    "title": "clientY",
                    "type": "number"
                },
                "composed": {
                    "description": "Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.",
                    "title": "composed",
                    "type": "boolean"
                },
                "ctrlKey": {
                    "title": "ctrlKey",
                    "type": "boolean"
                },
                "currentTarget": {
                    "$ref": "#/definitions/EventTarget",
                    "description": "Returns the object whose event listener's callback is currently being\ninvoked.",
                    "title": "currentTarget"
                },
                "defaultPrevented": {
                    "title": "defaultPrevented",
                    "type": "boolean"
                },
                "detail": {
                    "title": "detail",
                    "type": "number"
                },
                "eventPhase": {
                    "title": "eventPhase",
                    "type": "number"
                },
                "fromElement": {
                    "$ref": "#/definitions/Element",
                    "title": "fromElement"
                },
                "isTrusted": {
                    "description": "Returns true if event was dispatched by the user agent, and\nfalse otherwise.",
                    "title": "isTrusted",
                    "type": "boolean"
                },
                "layerX": {
                    "title": "layerX",
                    "type": "number"
                },
                "layerY": {
                    "title": "layerY",
                    "type": "number"
                },
                "metaKey": {
                    "title": "metaKey",
                    "type": "boolean"
                },
                "movementX": {
                    "title": "movementX",
                    "type": "number"
                },
                "movementY": {
                    "title": "movementY",
                    "type": "number"
                },
                "offsetX": {
                    "title": "offsetX",
                    "type": "number"
                },
                "offsetY": {
                    "title": "offsetY",
                    "type": "number"
                },
                "pageX": {
                    "title": "pageX",
                    "type": "number"
                },
                "pageY": {
                    "title": "pageY",
                    "type": "number"
                },
                "relatedTarget": {
                    "$ref": "#/definitions/EventTarget",
                    "title": "relatedTarget"
                },
                "returnValue": {
                    "title": "returnValue",
                    "type": "boolean"
                },
                "screenX": {
                    "title": "screenX",
                    "type": "number"
                },
                "screenY": {
                    "title": "screenY",
                    "type": "number"
                },
                "shiftKey": {
                    "title": "shiftKey",
                    "type": "boolean"
                },
                "srcElement": {
                    "$ref": "#/definitions/Element",
                    "title": "srcElement"
                },
                "target": {
                    "$ref": "#/definitions/EventTarget",
                    "description": "Returns the object to which event is dispatched (its target).",
                    "title": "target"
                },
                "timeStamp": {
                    "description": "Returns the event's timestamp as the number of milliseconds measured relative to\nthe time origin.",
                    "title": "timeStamp",
                    "type": "number"
                },
                "toElement": {
                    "$ref": "#/definitions/Element",
                    "title": "toElement"
                },
                "type": {
                    "description": "Returns the type of event, e.g.\n\"click\", \"hashchange\", or\n\"submit\".",
                    "title": "type",
                    "type": "string"
                },
                "view": {
                    "$ref": "#/definitions/Window",
                    "title": "view"
                },
                "which": {
                    "title": "which",
                    "type": "number"
                },
                "x": {
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "MouseEvent",
            "type": "object"
        },
        "Navigator": {
            "properties": {
                "activeVRDisplays": {
                    "items": {
                        "$ref": "#/definitions/VRDisplay"
                    },
                    "title": "activeVRDisplays",
                    "type": "array"
                },
                "appCodeName": {
                    "title": "appCodeName",
                    "type": "string"
                },
                "appName": {
                    "title": "appName",
                    "type": "string"
                },
                "appVersion": {
                    "title": "appVersion",
                    "type": "string"
                },
                "authentication": {
                    "$ref": "#/definitions/WebAuthentication",
                    "title": "authentication"
                },
                "cookieEnabled": {
                    "title": "cookieEnabled",
                    "type": "boolean"
                },
                "doNotTrack": {
                    "title": "doNotTrack",
                    "type": "string"
                },
                "gamepadInputEmulation": {
                    "$ref": "#/definitions/GamepadInputEmulationType",
                    "title": "gamepadInputEmulation"
                },
                "geolocation": {
                    "$ref": "#/definitions/Geolocation",
                    "title": "geolocation"
                },
                "hardwareConcurrency": {
                    "title": "hardwareConcurrency",
                    "type": "number"
                },
                "language": {
                    "title": "language",
                    "type": "string"
                },
                "languages": {
                    "items": {
                        "type": "string"
                    },
                    "title": "languages",
                    "type": "array"
                },
                "maxTouchPoints": {
                    "title": "maxTouchPoints",
                    "type": "number"
                },
                "mediaDevices": {
                    "$ref": "#/definitions/MediaDevices",
                    "title": "mediaDevices"
                },
                "mimeTypes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "$ref": "#/definitions/MimeType"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "title": "mimeTypes",
                    "type": "object"
                },
                "msManipulationViewsEnabled": {
                    "title": "msManipulationViewsEnabled",
                    "type": "boolean"
                },
                "msMaxTouchPoints": {
                    "title": "msMaxTouchPoints",
                    "type": "number"
                },
                "msPointerEnabled": {
                    "title": "msPointerEnabled",
                    "type": "boolean"
                },
                "onLine": {
                    "title": "onLine",
                    "type": "boolean"
                },
                "platform": {
                    "title": "platform",
                    "type": "string"
                },
                "plugins": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "$ref": "#/definitions/MimeType"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "title": "plugins",
                    "type": "object"
                },
                "pointerEnabled": {
                    "title": "pointerEnabled",
                    "type": "boolean"
                },
                "product": {
                    "title": "product",
                    "type": "string"
                },
                "productSub": {
                    "title": "productSub",
                    "type": "string"
                },
                "serviceWorker": {
                    "$ref": "#/definitions/ServiceWorkerContainer",
                    "title": "serviceWorker"
                },
                "storage": {
                    "$ref": "#/definitions/StorageManager",
                    "title": "storage"
                },
                "userAgent": {
                    "title": "userAgent",
                    "type": "string"
                },
                "vendor": {
                    "title": "vendor",
                    "type": "string"
                },
                "vendorSub": {
                    "title": "vendorSub",
                    "type": "string"
                },
                "webdriver": {
                    "title": "webdriver",
                    "type": "boolean"
                }
            },
            "title": "Navigator",
            "type": "object"
        },
        "Node": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "namespaceURI": {
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                }
            },
            "title": "Node",
            "type": "object"
        },
        "Object": {
            "description": "Provides functionality common to all JavaScript objects.",
            "properties": {
                "constructor": {
                    "$ref": "#/definitions/Function",
                    "description": "The initial value of Object.prototype.constructor is the standard built-in Object constructor.",
                    "title": "constructor"
                }
            },
            "title": "Object",
            "type": "object"
        },
        "OrientationType": {
            "enum": [
                "landscape-primary",
                "landscape-secondary",
                "portrait-primary",
                "portrait-secondary"
            ],
            "title": "OrientationType",
            "type": "string"
        },
        "ParentNode": {
            "properties": {
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                }
            },
            "title": "ParentNode",
            "type": "object"
        },
        "Performance": {
            "properties": {
                "navigation": {
                    "$ref": "#/definitions/PerformanceNavigation",
                    "title": "navigation"
                },
                "onresourcetimingbufferfull": {
                    "title": "onresourcetimingbufferfull",
                    "type": "object"
                },
                "timeOrigin": {
                    "title": "timeOrigin",
                    "type": "number"
                },
                "timing": {
                    "$ref": "#/definitions/PerformanceTiming",
                    "title": "timing"
                }
            },
            "title": "Performance",
            "type": "object"
        },
        "PerformanceNavigation": {
            "properties": {
                "TYPE_BACK_FORWARD": {
                    "title": "TYPE_BACK_FORWARD",
                    "type": "number"
                },
                "TYPE_NAVIGATE": {
                    "title": "TYPE_NAVIGATE",
                    "type": "number"
                },
                "TYPE_RELOAD": {
                    "title": "TYPE_RELOAD",
                    "type": "number"
                },
                "TYPE_RESERVED": {
                    "title": "TYPE_RESERVED",
                    "type": "number"
                },
                "redirectCount": {
                    "title": "redirectCount",
                    "type": "number"
                },
                "type": {
                    "title": "type",
                    "type": "number"
                }
            },
            "title": "PerformanceNavigation",
            "type": "object"
        },
        "PerformanceTiming": {
            "properties": {
                "connectEnd": {
                    "title": "connectEnd",
                    "type": "number"
                },
                "connectStart": {
                    "title": "connectStart",
                    "type": "number"
                },
                "domComplete": {
                    "title": "domComplete",
                    "type": "number"
                },
                "domContentLoadedEventEnd": {
                    "title": "domContentLoadedEventEnd",
                    "type": "number"
                },
                "domContentLoadedEventStart": {
                    "title": "domContentLoadedEventStart",
                    "type": "number"
                },
                "domInteractive": {
                    "title": "domInteractive",
                    "type": "number"
                },
                "domLoading": {
                    "title": "domLoading",
                    "type": "number"
                },
                "domainLookupEnd": {
                    "title": "domainLookupEnd",
                    "type": "number"
                },
                "domainLookupStart": {
                    "title": "domainLookupStart",
                    "type": "number"
                },
                "fetchStart": {
                    "title": "fetchStart",
                    "type": "number"
                },
                "loadEventEnd": {
                    "title": "loadEventEnd",
                    "type": "number"
                },
                "loadEventStart": {
                    "title": "loadEventStart",
                    "type": "number"
                },
                "navigationStart": {
                    "title": "navigationStart",
                    "type": "number"
                },
                "redirectEnd": {
                    "title": "redirectEnd",
                    "type": "number"
                },
                "redirectStart": {
                    "title": "redirectStart",
                    "type": "number"
                },
                "requestStart": {
                    "title": "requestStart",
                    "type": "number"
                },
                "responseEnd": {
                    "title": "responseEnd",
                    "type": "number"
                },
                "responseStart": {
                    "title": "responseStart",
                    "type": "number"
                },
                "secureConnectionStart": {
                    "title": "secureConnectionStart",
                    "type": "number"
                },
                "unloadEventEnd": {
                    "title": "unloadEventEnd",
                    "type": "number"
                },
                "unloadEventStart": {
                    "title": "unloadEventStart",
                    "type": "number"
                }
            },
            "title": "PerformanceTiming",
            "type": "object"
        },
        "Phaser.Animations.Animation": {
            "description": "A Frame based Animation.\n\nThis consists of a key, some default values (like the frame rate) and a bunch of Frame objects.\n\nThe Animation Manager creates these. Game Objects don't own an instance of these directly.\nGame Objects have the Animation Component, which are like playheads to global Animations (these objects)\nSo multiple Game Objects can have playheads all pointing to this one Animation instance.",
            "properties": {
                "delay": {
                    "description": "The delay in ms before the playback will begin.",
                    "title": "delay",
                    "type": "integer"
                },
                "duration": {
                    "description": "How long the animation should play for, in milliseconds.\nIf the `frameRate` property has been set then it overrides this value,\notherwise the `frameRate` is derived from `duration`.",
                    "title": "duration",
                    "type": "integer"
                },
                "frameRate": {
                    "description": "The frame rate of playback in frames per second (default 24 if duration is null)",
                    "title": "frameRate",
                    "type": "integer"
                },
                "frames": {
                    "description": "Extract all the frame data into the frames array",
                    "items": {
                        "$ref": "#/definitions/Phaser.Animations.AnimationFrame"
                    },
                    "title": "frames",
                    "type": "array"
                },
                "hideOnComplete": {
                    "description": "Should sprite.visible = false when the animation finishes?",
                    "title": "hideOnComplete",
                    "type": "boolean"
                },
                "key": {
                    "description": "The unique identifying string for this animation",
                    "title": "key",
                    "type": "string"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Animations.AnimationManager",
                    "description": "A reference to the global Animation Manager",
                    "title": "manager"
                },
                "msPerFrame": {
                    "description": "How many ms per frame, not including frame specific modifiers.",
                    "title": "msPerFrame",
                    "type": "integer"
                },
                "paused": {
                    "description": "Global pause. All Game Objects using this Animation instance are impacted by this property.",
                    "title": "paused",
                    "type": "boolean"
                },
                "repeat": {
                    "description": "Number of times to repeat the animation. Set to -1 to repeat forever.",
                    "title": "repeat",
                    "type": "integer"
                },
                "repeatDelay": {
                    "description": "The delay in ms before the a repeat playthrough starts.",
                    "title": "repeatDelay",
                    "type": "integer"
                },
                "showOnStart": {
                    "description": "Should sprite.visible = true when the animation starts to play?",
                    "title": "showOnStart",
                    "type": "boolean"
                },
                "skipMissedFrames": {
                    "description": "Skip frames if the time lags, or always advanced anyway?",
                    "title": "skipMissedFrames",
                    "type": "boolean"
                },
                "type": {
                    "description": "A frame based animation (as opposed to a bone based animation)",
                    "title": "type",
                    "type": "string"
                },
                "yoyo": {
                    "description": "Should the animation yoyo? (reverse back down to the start) before repeating?",
                    "title": "yoyo",
                    "type": "boolean"
                }
            },
            "title": "Phaser.Animations.Animation",
            "type": "object"
        },
        "Phaser.Animations.AnimationFrame": {
            "description": "A single frame in an Animation sequence.\n\nAn AnimationFrame consists of a reference to the Texture it uses for rendering, references to other\nframes in the animation, and index data. It also has the ability to fire its own `onUpdate` callback\nand modify the animation timing.\n\nAnimationFrames are generated automatically by the Animation class.",
            "properties": {
                "duration": {
                    "description": "Additional time (in ms) that this frame should appear for during playback.\nThe value is added onto the msPerFrame set by the animation.",
                    "title": "duration",
                    "type": "number"
                },
                "frame": {
                    "$ref": "#/definitions/Phaser.Textures.Frame",
                    "description": "A reference to the Texture Frame this AnimationFrame uses for rendering.",
                    "title": "frame"
                },
                "index": {
                    "description": "The index of this AnimationFrame within the Animation sequence.",
                    "title": "index",
                    "type": "integer"
                },
                "isFirst": {
                    "description": "Is this the first frame in an animation sequence?",
                    "title": "isFirst",
                    "type": "boolean"
                },
                "isLast": {
                    "description": "Is this the last frame in an animation sequence?",
                    "title": "isLast",
                    "type": "boolean"
                },
                "nextFrame": {
                    "$ref": "#/definitions/Phaser.Animations.AnimationFrame",
                    "description": "A reference to the AnimationFrame that comes after this one in the animation, if any.",
                    "title": "nextFrame"
                },
                "prevFrame": {
                    "$ref": "#/definitions/Phaser.Animations.AnimationFrame",
                    "description": "A reference to the AnimationFrame that comes before this one in the animation, if any.",
                    "title": "prevFrame"
                },
                "progress": {
                    "description": "What % through the animation does this frame come?\nThis value is generated when the animation is created and cached here.",
                    "title": "progress",
                    "type": "number"
                },
                "textureFrame": {
                    "description": "The key of the Frame within the Texture that this AnimationFrame uses.",
                    "title": "textureFrame",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "textureKey": {
                    "description": "The key of the Texture this AnimationFrame uses.",
                    "title": "textureKey",
                    "type": "string"
                }
            },
            "title": "Phaser.Animations.AnimationFrame",
            "type": "object"
        },
        "Phaser.Animations.AnimationManager": {
            "description": "The Animation Manager.\n\nAnimations are managed by the global Animation Manager. This is a singleton class that is\nresponsible for creating and delivering animations and their corresponding data to all Game Objects.\nUnlike plugins it is owned by the Game instance, not the Scene.\n\nSprites and other Game Objects get the data they need from the AnimationManager.",
            "properties": {
                "anims": {
                    "$ref": "#/definitions/Phaser.Structs.Map<string,Phaser.Animations.Animation>",
                    "description": "[description]",
                    "title": "anims"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "A reference to the Phaser.Game instance.",
                    "title": "game"
                },
                "globalTimeScale": {
                    "description": "[description]",
                    "title": "globalTimeScale",
                    "type": "number"
                },
                "name": {
                    "description": "[description]",
                    "title": "name",
                    "type": "string"
                },
                "paused": {
                    "description": "[description]",
                    "title": "paused",
                    "type": "boolean"
                },
                "textureManager": {
                    "$ref": "#/definitions/Phaser.Textures.TextureManager",
                    "description": "A reference to the Texture Manager.",
                    "title": "textureManager"
                }
            },
            "title": "Phaser.Animations.AnimationManager",
            "type": "object"
        },
        "Phaser.BlendModes": {
            "description": "Phaser Blend Modes.",
            "title": "Phaser.BlendModes"
        },
        "Phaser.Boot.Config": {
            "description": "The active game configuration settings, parsed from a {@link GameConfig} object.",
            "properties": {
                "antialias": {
                    "description": "[description]",
                    "title": "antialias",
                    "type": "boolean"
                },
                "audio": {
                    "description": "[description]",
                    "title": "audio"
                },
                "autoFocus": {
                    "description": "[description]",
                    "title": "autoFocus",
                    "type": "boolean"
                },
                "autoResize": {
                    "description": "Automatically resize the Game Canvas if you resize the renderer.",
                    "title": "autoResize",
                    "type": "boolean"
                },
                "backgroundColor": {
                    "$ref": "#/definitions/Phaser.Display.Color",
                    "description": "[description]",
                    "title": "backgroundColor"
                },
                "bannerBackgroundColor": {
                    "description": "[description]",
                    "items": {
                        "type": "string"
                    },
                    "title": "bannerBackgroundColor",
                    "type": "array"
                },
                "bannerTextColor": {
                    "description": "[description]",
                    "title": "bannerTextColor",
                    "type": "string"
                },
                "batchSize": {
                    "description": "The default WebGL Batch size.",
                    "title": "batchSize",
                    "type": "integer"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "Force Phaser to use your own Canvas element instead of creating one.",
                    "title": "canvas"
                },
                "canvasStyle": {
                    "description": "[description]",
                    "title": "canvasStyle",
                    "type": "string"
                },
                "clearBeforeRender": {
                    "description": "[description]",
                    "title": "clearBeforeRender",
                    "type": "boolean"
                },
                "context": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CanvasRenderingContext2D"
                        },
                        {
                            "$ref": "#/definitions/WebGLRenderingContext"
                        }
                    ],
                    "description": "Force Phaser to use your own Canvas context instead of creating one.",
                    "title": "context"
                },
                "defaultImage": {
                    "description": "[description]",
                    "title": "defaultImage",
                    "type": "string"
                },
                "defaultPhysicsSystem": {
                    "description": "[description]",
                    "title": "defaultPhysicsSystem",
                    "type": "boolean"
                },
                "defaultPlugins": {
                    "description": "The plugins installed into every Scene (in addition to CoreScene and Global).",
                    "title": "defaultPlugins"
                },
                "disableContextMenu": {
                    "description": "Set to `true` to disable context menu. Default value is `false`.",
                    "title": "disableContextMenu",
                    "type": "boolean"
                },
                "domBehindCanvas": {
                    "description": "[description]",
                    "title": "domBehindCanvas",
                    "type": "boolean"
                },
                "domCreateContainer": {
                    "description": "[description]",
                    "title": "domCreateContainer",
                    "type": "boolean"
                },
                "expandParent": {
                    "description": "[description]",
                    "title": "expandParent",
                    "type": "boolean"
                },
                "failIfMajorPerformanceCaveat": {
                    "description": "[description]",
                    "title": "failIfMajorPerformanceCaveat",
                    "type": "boolean"
                },
                "fps": {
                    "description": "[description]",
                    "properties": {
                        "deltaHistory": {
                            "description": "Calculate the average frame delta from this many consecutive frame intervals.",
                            "title": "deltaHistory",
                            "type": "integer"
                        },
                        "forceSetTimeOut": {
                            "description": "Use setTimeout instead of requestAnimationFrame to run the game loop.",
                            "title": "forceSetTimeOut",
                            "type": "boolean"
                        },
                        "min": {
                            "description": "The minimum acceptable rendering rate, in frames per second.",
                            "title": "min",
                            "type": "integer"
                        },
                        "panicMax": {
                            "description": "[description]",
                            "title": "panicMax",
                            "type": "integer"
                        },
                        "target": {
                            "description": "The optimum rendering rate, in frames per second.",
                            "title": "target",
                            "type": "integer"
                        }
                    },
                    "title": "fps",
                    "type": "object"
                },
                "gameTitle": {
                    "description": "The title of the game.",
                    "title": "gameTitle",
                    "type": "string"
                },
                "gameURL": {
                    "description": "The URL of the game.",
                    "title": "gameURL",
                    "type": "string"
                },
                "gameVersion": {
                    "description": "The version of the game.",
                    "title": "gameVersion",
                    "type": "string"
                },
                "height": {
                    "description": "[description]",
                    "title": "height",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "hideBanner": {
                    "description": "[description]",
                    "title": "hideBanner",
                    "type": "boolean"
                },
                "hidePhaser": {
                    "description": "[description]",
                    "title": "hidePhaser",
                    "type": "boolean"
                },
                "inputActivePointers": {
                    "description": "[description]",
                    "title": "inputActivePointers",
                    "type": "integer"
                },
                "inputGamepad": {
                    "description": "[description]",
                    "title": "inputGamepad",
                    "type": "boolean"
                },
                "inputGamepadEventTarget": {
                    "description": "[description]",
                    "title": "inputGamepadEventTarget"
                },
                "inputKeyboard": {
                    "description": "[description]",
                    "title": "inputKeyboard",
                    "type": "boolean"
                },
                "inputKeyboardEventTarget": {
                    "description": "[description]",
                    "title": "inputKeyboardEventTarget"
                },
                "inputMouse": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "properties": {
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "[description]",
                    "title": "inputMouse"
                },
                "inputMouseCapture": {
                    "description": "[description]",
                    "title": "inputMouseCapture",
                    "type": "boolean"
                },
                "inputMouseEventTarget": {
                    "description": "[description]",
                    "title": "inputMouseEventTarget"
                },
                "inputTouch": {
                    "description": "[description]",
                    "title": "inputTouch",
                    "type": "boolean"
                },
                "inputTouchCapture": {
                    "description": "[description]",
                    "title": "inputTouchCapture",
                    "type": "boolean"
                },
                "inputTouchEventTarget": {
                    "description": "[description]",
                    "title": "inputTouchEventTarget"
                },
                "installGlobalPlugins": {
                    "description": "[description]",
                    "title": "installGlobalPlugins"
                },
                "installScenePlugins": {
                    "description": "[description]",
                    "title": "installScenePlugins"
                },
                "loaderAsync": {
                    "description": "[description]",
                    "title": "loaderAsync",
                    "type": "boolean"
                },
                "loaderBaseURL": {
                    "description": "[description]",
                    "title": "loaderBaseURL",
                    "type": "string"
                },
                "loaderCrossOrigin": {
                    "description": "[description]",
                    "title": "loaderCrossOrigin",
                    "type": "string"
                },
                "loaderMaxParallelDownloads": {
                    "description": "Maximum parallel downloads allowed for resources (Default to 32).",
                    "title": "loaderMaxParallelDownloads",
                    "type": "integer"
                },
                "loaderPassword": {
                    "description": "[description]",
                    "title": "loaderPassword",
                    "type": "string"
                },
                "loaderPath": {
                    "description": "[description]",
                    "title": "loaderPath",
                    "type": "string"
                },
                "loaderResponseType": {
                    "description": "[description]",
                    "title": "loaderResponseType",
                    "type": "string"
                },
                "loaderTimeout": {
                    "description": "[description]",
                    "title": "loaderTimeout",
                    "type": "integer"
                },
                "loaderUser": {
                    "description": "[description]",
                    "title": "loaderUser",
                    "type": "string"
                },
                "maxHeight": {
                    "description": "[description]",
                    "title": "maxHeight",
                    "type": "integer"
                },
                "maxLights": {
                    "description": "The maximum number of lights allowed to be visible within range of a single Camera in the LightManager.",
                    "title": "maxLights",
                    "type": "integer"
                },
                "maxWidth": {
                    "description": "[description]",
                    "title": "maxWidth",
                    "type": "integer"
                },
                "minHeight": {
                    "description": "[description]",
                    "title": "minHeight",
                    "type": "integer"
                },
                "minWidth": {
                    "description": "[description]",
                    "title": "minWidth",
                    "type": "integer"
                },
                "missingImage": {
                    "description": "[description]",
                    "title": "missingImage",
                    "type": "string"
                },
                "parent": {
                    "description": "[description]",
                    "title": "parent"
                },
                "physics": {
                    "additionalProperties": true,
                    "description": "[description]",
                    "properties": {
                    },
                    "title": "physics",
                    "type": "object"
                },
                "pixelArt": {
                    "description": "Prevent pixel art from becoming blurred when scaled. It will remain crisp (tells the WebGL renderer to automatically create textures using a linear filter mode).",
                    "title": "pixelArt",
                    "type": "boolean"
                },
                "postBoot": {
                    "description": "[description]",
                    "title": "postBoot",
                    "type": "object"
                },
                "powerPreference": {
                    "description": "[description]",
                    "title": "powerPreference",
                    "type": "string"
                },
                "preBoot": {
                    "description": "[description]",
                    "title": "preBoot",
                    "type": "object"
                },
                "premultipliedAlpha": {
                    "description": "[description]",
                    "title": "premultipliedAlpha",
                    "type": "boolean"
                },
                "preserveDrawingBuffer": {
                    "description": "[description]",
                    "title": "preserveDrawingBuffer",
                    "type": "boolean"
                },
                "renderType": {
                    "description": "Force Phaser to use a specific renderer. Can be `CONST.CANVAS`, `CONST.WEBGL`, `CONST.HEADLESS` or `CONST.AUTO` (default)",
                    "title": "renderType",
                    "type": "number"
                },
                "resolution": {
                    "description": "[description]",
                    "title": "resolution",
                    "type": "number"
                },
                "roundPixels": {
                    "description": "[description]",
                    "title": "roundPixels",
                    "type": "boolean"
                },
                "scaleMode": {
                    "description": "[description]",
                    "title": "scaleMode",
                    "type": "integer"
                },
                "sceneConfig": {
                    "additionalProperties": true,
                    "description": "[description]",
                    "properties": {
                    },
                    "title": "sceneConfig",
                    "type": "object"
                },
                "seed": {
                    "description": "[description]",
                    "items": {
                        "type": "string"
                    },
                    "title": "seed",
                    "type": "array"
                },
                "transparent": {
                    "description": "[description]",
                    "title": "transparent",
                    "type": "boolean"
                },
                "width": {
                    "description": "[description]",
                    "title": "width",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "zoom": {
                    "description": "[description]",
                    "title": "zoom",
                    "type": "number"
                }
            },
            "title": "Phaser.Boot.Config",
            "type": "object"
        },
        "Phaser.Boot.TimeStep": {
            "description": "[description]",
            "properties": {
                "actualFps": {
                    "description": "An exponential moving average of the frames per second.",
                    "title": "actualFps",
                    "type": "integer"
                },
                "callback": {
                    "description": "A callback to be invoked each time the Time Step steps.",
                    "title": "callback",
                    "type": "object"
                },
                "delta": {
                    "description": "[description]",
                    "title": "delta",
                    "type": "integer"
                },
                "deltaHistory": {
                    "description": "[description]",
                    "items": {
                        "type": "number"
                    },
                    "title": "deltaHistory",
                    "type": "array"
                },
                "deltaIndex": {
                    "description": "[description]",
                    "title": "deltaIndex",
                    "type": "integer"
                },
                "deltaSmoothingMax": {
                    "description": "[description]",
                    "title": "deltaSmoothingMax",
                    "type": "integer"
                },
                "forceSetTimeOut": {
                    "description": "You can force the Time Step to use Set Timeout instead of Request Animation Frame by setting\nthe `forceSetTimeOut` property to `true` in the Game Configuration object. It cannot be changed at run-time.",
                    "title": "forceSetTimeOut",
                    "type": "boolean"
                },
                "frame": {
                    "description": "[description]",
                    "title": "frame",
                    "type": "integer"
                },
                "framesThisSecond": {
                    "description": "The number of frames processed this second.",
                    "title": "framesThisSecond",
                    "type": "integer"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "A reference to the Phaser.Game instance.",
                    "title": "game"
                },
                "inFocus": {
                    "description": "[description]",
                    "title": "inFocus",
                    "type": "boolean"
                },
                "lastTime": {
                    "description": "[description]",
                    "title": "lastTime",
                    "type": "integer"
                },
                "minFps": {
                    "description": "The minimum fps rate you want the Time Step to run at.",
                    "title": "minFps",
                    "type": "integer"
                },
                "nextFpsUpdate": {
                    "description": "[description]",
                    "title": "nextFpsUpdate",
                    "type": "integer"
                },
                "panicMax": {
                    "description": "[description]",
                    "title": "panicMax",
                    "type": "integer"
                },
                "raf": {
                    "$ref": "#/definitions/Phaser.DOM.RequestAnimationFrame",
                    "description": "[description]",
                    "title": "raf"
                },
                "rawDelta": {
                    "description": "The actual elapsed time in ms between one update and the next.\nUnlike with `delta` no smoothing, capping, or averaging is applied to this value.\nSo please be careful when using this value in calculations.",
                    "title": "rawDelta",
                    "type": "number"
                },
                "running": {
                    "description": "A flag that is set once the TimeStep has started running and toggled when it stops.\nThe difference between this value and `started` is that `running` is toggled when\nthe TimeStep is sent to sleep, where-as `started` remains `true`, only changing if\nthe TimeStep is actually stopped, not just paused.",
                    "title": "running",
                    "type": "boolean"
                },
                "startTime": {
                    "description": "[description]",
                    "title": "startTime",
                    "type": "integer"
                },
                "started": {
                    "description": "A flag that is set once the TimeStep has started running and toggled when it stops.",
                    "title": "started",
                    "type": "boolean"
                },
                "targetFps": {
                    "description": "The target fps rate for the Time Step to run at.\n\nSetting this value will not actually change the speed at which the browser runs, that is beyond\nthe control of Phaser. Instead, it allows you to determine performance issues and if the Time Step\nis spiraling out of control.",
                    "title": "targetFps",
                    "type": "integer"
                },
                "time": {
                    "description": "[description]",
                    "title": "time",
                    "type": "integer"
                }
            },
            "title": "Phaser.Boot.TimeStep",
            "type": "object"
        },
        "Phaser.Cache.BaseCache": {
            "description": "The BaseCache is a base Cache class that can be used for storing references to any kind of data.\n\nData can be added, retrieved and removed based on the given keys.\n\nKeys are string-based.",
            "properties": {
                "entries": {
                    "$ref": "#/definitions/Phaser.Structs.Map<String,any>",
                    "description": "The Map in which the cache objects are stored.\n\nYou can query the Map directly or use the BaseCache methods.",
                    "title": "entries"
                },
                "events": {
                    "$ref": "#/definitions/Phaser.Events.EventEmitter",
                    "description": "An instance of EventEmitter used by the cache to emit related events.",
                    "title": "events"
                }
            },
            "title": "Phaser.Cache.BaseCache",
            "type": "object"
        },
        "Phaser.Cache.CacheManager": {
            "description": "The Cache Manager is the global cache owned and maintained by the Game instance.\n\nVarious systems, such as the file Loader, rely on this cache in order to store the files\nit has loaded. The manager itself doesn't store any files, but instead owns multiple BaseCache\ninstances, one per type of file. You can also add your own custom caches.",
            "properties": {
                "audio": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all non-streaming audio files, typically added via the Loader.",
                    "title": "audio"
                },
                "binary": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all binary files, typically added via the Loader.",
                    "title": "binary"
                },
                "bitmapFont": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all bitmap font data files, typically added via the Loader.\nOnly the font data is stored in this cache, the textures are part of the Texture Manager.",
                    "title": "bitmapFont"
                },
                "custom": {
                    "additionalProperties": {
                        "$ref": "#/definitions/Phaser.Cache.BaseCache"
                    },
                    "description": "An object that contains your own custom BaseCache entries.\nAdd to this via the `addCustom` method.",
                    "title": "custom",
                    "type": "object"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "A reference to the Phaser.Game instance that owns this CacheManager.",
                    "title": "game"
                },
                "html": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all html files, typically added via the Loader.",
                    "title": "html"
                },
                "json": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all JSON data files, typically added via the Loader.",
                    "title": "json"
                },
                "obj": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all WaveFront OBJ files, typically added via the Loader.",
                    "title": "obj"
                },
                "physics": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all physics data files, typically added via the Loader.",
                    "title": "physics"
                },
                "shader": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all shader source files, typically added via the Loader.",
                    "title": "shader"
                },
                "text": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all text files, typically added via the Loader.",
                    "title": "text"
                },
                "tilemap": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all tilemap data files, typically added via the Loader.\nOnly the data is stored in this cache, the textures are part of the Texture Manager.",
                    "title": "tilemap"
                },
                "xml": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "A Cache storing all xml data files, typically added via the Loader.",
                    "title": "xml"
                }
            },
            "title": "Phaser.Cache.CacheManager",
            "type": "object"
        },
        "Phaser.Cameras.Scene2D.BaseCamera": {
            "description": "A Base Camera class.\n\nThe Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\nand can be positioned, rotated, zoomed and scrolled accordingly.\n\nA Camera consists of two elements: The viewport and the scroll values.\n\nThe viewport is the physical position and size of the Camera within your game. Cameras, by default, are\ncreated the same size as your game, but their position and size can be set to anything. This means if you\nwanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\nyou'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\n\nIf you wish to change where the Camera is looking in your game, then you scroll it. You can do this\nvia the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\nviewport, and changing the viewport has no impact on the scrolling.\n\nBy default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\nallowing you to filter Game Objects out on a per-Camera basis.\n\nThe Base Camera is extended by the Camera class, which adds in special effects including Fade,\nFlash and Camera Shake, as well as the ability to follow Game Objects.\n\nThe Base Camera was introduced in Phaser 3.12. It was split off from the Camera class, to allow\nyou to isolate special effects as needed. Therefore the 'since' values for properties of this class relate\nto when they were added to the Camera class.",
            "properties": {
                "alpha": {
                    "description": "The Camera alpha value. Setting this property impacts every single object that this Camera\nrenders. You can either set the property directly, i.e. via a Tween, to fade a Camera in or out,\nor via the chainable `setAlpha` method instead.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaBottomLeft": {
                    "description": "The alpha value starting from the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomLeft",
                    "type": "number"
                },
                "alphaBottomRight": {
                    "description": "The alpha value starting from the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomRight",
                    "type": "number"
                },
                "alphaTopLeft": {
                    "description": "The alpha value starting from the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopLeft",
                    "type": "number"
                },
                "alphaTopRight": {
                    "description": "The alpha value starting from the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopRight",
                    "type": "number"
                },
                "backgroundColor": {
                    "$ref": "#/definitions/Phaser.Display.Color",
                    "description": "The background color of this Camera. Only used if `transparent` is `false`.",
                    "title": "backgroundColor"
                },
                "centerX": {
                    "description": "The x position of the center of the Camera's viewport, relative to the top-left of the game canvas.",
                    "title": "centerX",
                    "type": "number"
                },
                "centerY": {
                    "description": "The y position of the center of the Camera's viewport, relative to the top-left of the game canvas.",
                    "title": "centerY",
                    "type": "number"
                },
                "config": {
                    "additionalProperties": true,
                    "description": "A reference to the Game Config.",
                    "properties": {
                    },
                    "title": "config",
                    "type": "object"
                },
                "dirty": {
                    "description": "Is this Camera dirty?\n\nA dirty Camera has had either its viewport size, bounds, scroll, rotation or zoom levels changed since the last frame.\n\nThis flag is cleared during the `postRenderCamera` method of the renderer.",
                    "title": "dirty",
                    "type": "boolean"
                },
                "disableCull": {
                    "description": "Should the camera cull Game Objects before checking them for input hit tests?\nIn some special cases it may be beneficial to disable this.",
                    "title": "disableCull",
                    "type": "boolean"
                },
                "displayHeight": {
                    "description": "The displayed height of the camera viewport, factoring in the camera zoom level.\n\nIf a camera has a viewport height of 600 and a zoom of 0.5 then its display height\nwould be 1200, as it's displaying twice as many pixels as zoom level 1.\n\nEqually, a camera with a height of 600 and zoom of 2 would have a display height\nof 300 pixels.",
                    "title": "displayHeight",
                    "type": "number"
                },
                "displayWidth": {
                    "description": "The displayed width of the camera viewport, factoring in the camera zoom level.\n\nIf a camera has a viewport width of 800 and a zoom of 0.5 then its display width\nwould be 1600, as it's displaying twice as many pixels as zoom level 1.\n\nEqually, a camera with a width of 800 and zoom of 2 would have a display width\nof 400 pixels.",
                    "title": "displayWidth",
                    "type": "number"
                },
                "height": {
                    "description": "The height of the Camera viewport, in pixels.\n\nThe viewport is the area into which the Camera renders. Setting the viewport does\nnot restrict where the Camera can scroll to.",
                    "title": "height",
                    "type": "number"
                },
                "id": {
                    "description": "The Camera ID. Assigned by the Camera Manager and used to handle camera exclusion.\nThis value is a bitmask.",
                    "title": "id",
                    "type": "integer"
                },
                "midPoint": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The mid-point of the Camera in 'world' coordinates.\n\nUse it to obtain exactly where in the world the center of the camera is currently looking.\n\nThis value is updated in the preRender method, after the scroll values and follower\nhave been processed.",
                    "title": "midPoint"
                },
                "name": {
                    "description": "The name of the Camera. This is left empty for your own use.",
                    "title": "name",
                    "type": "string"
                },
                "originX": {
                    "description": "The horizontal origin of rotation for this Camera.\n\nBy default the camera rotates around the center of the viewport.\n\nChanging the origin allows you to adjust the point in the viewport from which rotation happens.\nA value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\n\nSee `setOrigin` to set both origins in a single, chainable call.",
                    "title": "originX",
                    "type": "number"
                },
                "originY": {
                    "description": "The vertical origin of rotation for this Camera.\n\nBy default the camera rotates around the center of the viewport.\n\nChanging the origin allows you to adjust the point in the viewport from which rotation happens.\nA value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\n\nSee `setOrigin` to set both origins in a single, chainable call.",
                    "title": "originY",
                    "type": "number"
                },
                "resolution": {
                    "description": "The resolution of the Game, used in most Camera calculations.",
                    "title": "resolution",
                    "type": "number"
                },
                "roundPixels": {
                    "description": "Should this camera round its pixel values to integers?",
                    "title": "roundPixels",
                    "type": "boolean"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "A reference to the Scene this camera belongs to.",
                    "title": "scene"
                },
                "sceneManager": {
                    "$ref": "#/definitions/Phaser.Scenes.SceneManager",
                    "description": "A reference to the Game Scene Manager.",
                    "title": "sceneManager"
                },
                "scrollX": {
                    "description": "The horizontal scroll position of this Camera.\n\nChange this value to cause the Camera to scroll around your Scene.\n\nAlternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\nwill automatically adjust the Camera scroll values accordingly.\n\nYou can set the bounds within which the Camera can scroll via the `setBounds` method.",
                    "title": "scrollX",
                    "type": "number"
                },
                "scrollY": {
                    "description": "The vertical scroll position of this Camera.\n\nChange this value to cause the Camera to scroll around your Scene.\n\nAlternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\nwill automatically adjust the Camera scroll values accordingly.\n\nYou can set the bounds within which the Camera can scroll via the `setBounds` method.",
                    "title": "scrollY",
                    "type": "number"
                },
                "transparent": {
                    "description": "Does this Camera have a transparent background?",
                    "title": "transparent",
                    "type": "boolean"
                },
                "useBounds": {
                    "description": "Is this Camera using a bounds to restrict scrolling movement?\n\nSet this property along with the bounds via `Camera.setBounds`.",
                    "title": "useBounds",
                    "type": "boolean"
                },
                "visible": {
                    "description": "Is this Camera visible or not?\n\nA visible camera will render and perform input tests.\nAn invisible camera will not render anything and will skip input tests.",
                    "title": "visible",
                    "type": "boolean"
                },
                "width": {
                    "description": "The width of the Camera viewport, in pixels.\n\nThe viewport is the area into which the Camera renders. Setting the viewport does\nnot restrict where the Camera can scroll to.",
                    "title": "width",
                    "type": "number"
                },
                "worldView": {
                    "$ref": "#/definitions/Phaser.Geom.Rectangle",
                    "description": "The World View is a Rectangle that defines the area of the 'world' the Camera is currently looking at.\nThis factors in the Camera viewport size, zoom and scroll position and is updated in the Camera preRender step.\nIf you have enabled Camera bounds the worldview will be clamped to those bounds accordingly.\nYou can use it for culling or intersection checks.",
                    "title": "worldView"
                },
                "x": {
                    "description": "The x position of the Camera viewport, relative to the top-left of the game canvas.\nThe viewport is the area into which the camera renders.\nTo adjust the position the camera is looking at in the game world, see the `scrollX` value.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of the Camera viewport, relative to the top-left of the game canvas.\nThe viewport is the area into which the camera renders.\nTo adjust the position the camera is looking at in the game world, see the `scrollY` value.",
                    "title": "y",
                    "type": "number"
                },
                "zoom": {
                    "description": "The Camera zoom value. Change this value to zoom in, or out of, a Scene.\n\nA value of 0.5 would zoom the Camera out, so you can now see twice as much\nof the Scene as before. A value of 2 would zoom the Camera in, so every pixel\nnow takes up 2 pixels when rendered.\n\nSet to 1 to return to the default zoom level.\n\nBe careful to never set this value to zero.",
                    "title": "zoom",
                    "type": "number"
                }
            },
            "title": "Phaser.Cameras.Scene2D.BaseCamera",
            "type": "object"
        },
        "Phaser.Cameras.Scene2D.Camera": {
            "description": "A Camera.\n\nThe Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\nand can be positioned, rotated, zoomed and scrolled accordingly.\n\nA Camera consists of two elements: The viewport and the scroll values.\n\nThe viewport is the physical position and size of the Camera within your game. Cameras, by default, are\ncreated the same size as your game, but their position and size can be set to anything. This means if you\nwanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\nyou'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\n\nIf you wish to change where the Camera is looking in your game, then you scroll it. You can do this\nvia the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\nviewport, and changing the viewport has no impact on the scrolling.\n\nBy default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\nallowing you to filter Game Objects out on a per-Camera basis.\n\nA Camera also has built-in special effects including Fade, Flash and Camera Shake.",
            "properties": {
                "alpha": {
                    "description": "The Camera alpha value. Setting this property impacts every single object that this Camera\nrenders. You can either set the property directly, i.e. via a Tween, to fade a Camera in or out,\nor via the chainable `setAlpha` method instead.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaBottomLeft": {
                    "description": "The alpha value starting from the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomLeft",
                    "type": "number"
                },
                "alphaBottomRight": {
                    "description": "The alpha value starting from the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomRight",
                    "type": "number"
                },
                "alphaTopLeft": {
                    "description": "The alpha value starting from the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopLeft",
                    "type": "number"
                },
                "alphaTopRight": {
                    "description": "The alpha value starting from the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopRight",
                    "type": "number"
                },
                "backgroundColor": {
                    "$ref": "#/definitions/Phaser.Display.Color",
                    "description": "The background color of this Camera. Only used if `transparent` is `false`.",
                    "title": "backgroundColor"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "If this Camera has been set to render to a texture then this holds a reference\nto the HTML Canvas Element that the Camera is drawing to.\n\nEnable texture rendering using the method `setRenderToTexture`.\n\nThis is only populated if Phaser is running with the Canvas Renderer.",
                    "title": "canvas"
                },
                "centerX": {
                    "description": "The x position of the center of the Camera's viewport, relative to the top-left of the game canvas.",
                    "title": "centerX",
                    "type": "number"
                },
                "centerY": {
                    "description": "The y position of the center of the Camera's viewport, relative to the top-left of the game canvas.",
                    "title": "centerY",
                    "type": "number"
                },
                "config": {
                    "additionalProperties": true,
                    "description": "A reference to the Game Config.",
                    "properties": {
                    },
                    "title": "config",
                    "type": "object"
                },
                "context": {
                    "$ref": "#/definitions/CanvasRenderingContext2D",
                    "description": "If this Camera has been set to render to a texture then this holds a reference\nto the Rendering Context belonging to the Canvas element the Camera is drawing to.\n\nEnable texture rendering using the method `setRenderToTexture`.\n\nThis is only populated if Phaser is running with the Canvas Renderer.",
                    "title": "context"
                },
                "deadzone": {
                    "$ref": "#/definitions/Phaser.Geom.Rectangle",
                    "description": "The Camera dead zone.\n\nThe deadzone is only used when the camera is following a target.\n\nIt defines a rectangular region within which if the target is present, the camera will not scroll.\nIf the target moves outside of this area, the camera will begin scrolling in order to follow it.\n\nThe `lerp` values that you can set for a follower target also apply when using a deadzone.\n\nYou can directly set this property to be an instance of a Rectangle. Or, you can use the\n`setDeadzone` method for a chainable approach.\n\nThe rectangle you provide can have its dimensions adjusted dynamically, however, please\nnote that its position is updated every frame, as it is constantly re-centered on the cameras mid point.\n\nCalling `setDeadzone` with no arguments will reset an active deadzone, as will setting this property\nto `null`.",
                    "title": "deadzone"
                },
                "dirty": {
                    "description": "Is this Camera dirty?\n\nA dirty Camera has had either its viewport size, bounds, scroll, rotation or zoom levels changed since the last frame.\n\nThis flag is cleared during the `postRenderCamera` method of the renderer.",
                    "title": "dirty",
                    "type": "boolean"
                },
                "disableCull": {
                    "description": "Should the camera cull Game Objects before checking them for input hit tests?\nIn some special cases it may be beneficial to disable this.",
                    "title": "disableCull",
                    "type": "boolean"
                },
                "displayHeight": {
                    "description": "The displayed height of the camera viewport, factoring in the camera zoom level.\n\nIf a camera has a viewport height of 600 and a zoom of 0.5 then its display height\nwould be 1200, as it's displaying twice as many pixels as zoom level 1.\n\nEqually, a camera with a height of 600 and zoom of 2 would have a display height\nof 300 pixels.",
                    "title": "displayHeight",
                    "type": "number"
                },
                "displayWidth": {
                    "description": "The displayed width of the camera viewport, factoring in the camera zoom level.\n\nIf a camera has a viewport width of 800 and a zoom of 0.5 then its display width\nwould be 1600, as it's displaying twice as many pixels as zoom level 1.\n\nEqually, a camera with a width of 800 and zoom of 2 would have a display width\nof 400 pixels.",
                    "title": "displayWidth",
                    "type": "number"
                },
                "fadeEffect": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Effects.Fade",
                    "description": "The Camera Fade effect handler.\nTo fade this camera see the `Camera.fade` methods.",
                    "title": "fadeEffect"
                },
                "flashEffect": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Effects.Flash",
                    "description": "The Camera Flash effect handler.\nTo flash this camera see the `Camera.flash` method.",
                    "title": "flashEffect"
                },
                "flipX": {
                    "description": "The horizontally flipped state of the Game Object.\nA Game Object that is flipped horizontally will render inversed on the horizontal axis.\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipX",
                    "type": "boolean"
                },
                "flipY": {
                    "description": "The vertically flipped state of the Game Object.\nA Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipY",
                    "type": "boolean"
                },
                "followOffset": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The values stored in this property are subtracted from the Camera targets position, allowing you to\noffset the camera from the actual target x/y coordinates by this amount.\nCan also be set via `setFollowOffset` or as part of the `startFollow` call.",
                    "title": "followOffset"
                },
                "framebuffer": {
                    "$ref": "#/definitions/WebGLTexture",
                    "description": "If this Camera has been set to render to a texture then this holds a reference\nto the GL Texture belonging the Camera is drawing to.\n\nEnable texture rendering using the method `setRenderToTexture`.\n\nThis is only set if Phaser is running with the WebGL Renderer.",
                    "title": "framebuffer"
                },
                "height": {
                    "description": "The height of the Camera viewport, in pixels.\n\nThe viewport is the area into which the Camera renders. Setting the viewport does\nnot restrict where the Camera can scroll to.",
                    "title": "height",
                    "type": "number"
                },
                "id": {
                    "description": "The Camera ID. Assigned by the Camera Manager and used to handle camera exclusion.\nThis value is a bitmask.",
                    "title": "id",
                    "type": "integer"
                },
                "inputEnabled": {
                    "description": "Does this Camera allow the Game Objects it renders to receive input events?",
                    "title": "inputEnabled",
                    "type": "boolean"
                },
                "isTinted": {
                    "description": "Does this Game Object have a tint applied to it or not?",
                    "title": "isTinted",
                    "type": "boolean"
                },
                "lerp": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The linear interpolation value to use when following a target.\n\nCan also be set via `setLerp` or as part of the `startFollow` call.\n\nThe default values of 1 means the camera will instantly snap to the target coordinates.\nA lower value, such as 0.1 means the camera will more slowly track the target, giving\na smooth transition. You can set the horizontal and vertical values independently, and also\nadjust this value in real-time during your game.\n\nBe sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.",
                    "title": "lerp"
                },
                "midPoint": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The mid-point of the Camera in 'world' coordinates.\n\nUse it to obtain exactly where in the world the center of the camera is currently looking.\n\nThis value is updated in the preRender method, after the scroll values and follower\nhave been processed.",
                    "title": "midPoint"
                },
                "name": {
                    "description": "The name of the Camera. This is left empty for your own use.",
                    "title": "name",
                    "type": "string"
                },
                "originX": {
                    "description": "The horizontal origin of rotation for this Camera.\n\nBy default the camera rotates around the center of the viewport.\n\nChanging the origin allows you to adjust the point in the viewport from which rotation happens.\nA value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\n\nSee `setOrigin` to set both origins in a single, chainable call.",
                    "title": "originX",
                    "type": "number"
                },
                "originY": {
                    "description": "The vertical origin of rotation for this Camera.\n\nBy default the camera rotates around the center of the viewport.\n\nChanging the origin allows you to adjust the point in the viewport from which rotation happens.\nA value of 0 would rotate from the top-left of the viewport. A value of 1 from the bottom right.\n\nSee `setOrigin` to set both origins in a single, chainable call.",
                    "title": "originY",
                    "type": "number"
                },
                "panEffect": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Effects.Pan",
                    "description": "The Camera Pan effect handler.\nTo pan this camera see the `Camera.pan` method.",
                    "title": "panEffect"
                },
                "pipeline": {
                    "description": "If this Camera has been set to render to a texture and to use a custom pipeline,\nthen this holds a reference to the pipeline the Camera is drawing with.\n\nEnable texture rendering using the method `setRenderToTexture`.\n\nThis is only set if Phaser is running with the WebGL Renderer.",
                    "title": "pipeline"
                },
                "renderToTexture": {
                    "description": "Is this Camera rendering directly to the canvas or to a texture?\n\nEnable rendering to texture with the method `setRenderToTexture` (just enabling this boolean won't be enough)\n\nOnce enabled you can toggle it by switching this property.\n\nTo properly remove a render texture you should call the `clearRenderToTexture()` method.",
                    "title": "renderToTexture",
                    "type": "boolean"
                },
                "resolution": {
                    "description": "The resolution of the Game, used in most Camera calculations.",
                    "title": "resolution",
                    "type": "number"
                },
                "roundPixels": {
                    "description": "Should this camera round its pixel values to integers?",
                    "title": "roundPixels",
                    "type": "boolean"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "A reference to the Scene this camera belongs to.",
                    "title": "scene"
                },
                "sceneManager": {
                    "$ref": "#/definitions/Phaser.Scenes.SceneManager",
                    "description": "A reference to the Game Scene Manager.",
                    "title": "sceneManager"
                },
                "scrollX": {
                    "description": "The horizontal scroll position of this Camera.\n\nChange this value to cause the Camera to scroll around your Scene.\n\nAlternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\nwill automatically adjust the Camera scroll values accordingly.\n\nYou can set the bounds within which the Camera can scroll via the `setBounds` method.",
                    "title": "scrollX",
                    "type": "number"
                },
                "scrollY": {
                    "description": "The vertical scroll position of this Camera.\n\nChange this value to cause the Camera to scroll around your Scene.\n\nAlternatively, setting the Camera to follow a Game Object, via the `startFollow` method,\nwill automatically adjust the Camera scroll values accordingly.\n\nYou can set the bounds within which the Camera can scroll via the `setBounds` method.",
                    "title": "scrollY",
                    "type": "number"
                },
                "shakeEffect": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Effects.Shake",
                    "description": "The Camera Shake effect handler.\nTo shake this camera see the `Camera.shake` method.",
                    "title": "shakeEffect"
                },
                "tint": {
                    "description": "The tint value being applied to the whole of the Game Object.",
                    "title": "tint",
                    "type": "integer"
                },
                "tintBottomLeft": {
                    "description": "The tint value being applied to the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomLeft",
                    "type": "integer"
                },
                "tintBottomRight": {
                    "description": "The tint value being applied to the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomRight",
                    "type": "integer"
                },
                "tintFill": {
                    "description": "Fill or additive?",
                    "title": "tintFill",
                    "type": "boolean"
                },
                "tintTopLeft": {
                    "description": "The tint value being applied to the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopLeft",
                    "type": "integer"
                },
                "tintTopRight": {
                    "description": "The tint value being applied to the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopRight",
                    "type": "integer"
                },
                "transparent": {
                    "description": "Does this Camera have a transparent background?",
                    "title": "transparent",
                    "type": "boolean"
                },
                "useBounds": {
                    "description": "Is this Camera using a bounds to restrict scrolling movement?\n\nSet this property along with the bounds via `Camera.setBounds`.",
                    "title": "useBounds",
                    "type": "boolean"
                },
                "visible": {
                    "description": "Is this Camera visible or not?\n\nA visible camera will render and perform input tests.\nAn invisible camera will not render anything and will skip input tests.",
                    "title": "visible",
                    "type": "boolean"
                },
                "width": {
                    "description": "The width of the Camera viewport, in pixels.\n\nThe viewport is the area into which the Camera renders. Setting the viewport does\nnot restrict where the Camera can scroll to.",
                    "title": "width",
                    "type": "number"
                },
                "worldView": {
                    "$ref": "#/definitions/Phaser.Geom.Rectangle",
                    "description": "The World View is a Rectangle that defines the area of the 'world' the Camera is currently looking at.\nThis factors in the Camera viewport size, zoom and scroll position and is updated in the Camera preRender step.\nIf you have enabled Camera bounds the worldview will be clamped to those bounds accordingly.\nYou can use it for culling or intersection checks.",
                    "title": "worldView"
                },
                "x": {
                    "description": "The x position of the Camera viewport, relative to the top-left of the game canvas.\nThe viewport is the area into which the camera renders.\nTo adjust the position the camera is looking at in the game world, see the `scrollX` value.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of the Camera viewport, relative to the top-left of the game canvas.\nThe viewport is the area into which the camera renders.\nTo adjust the position the camera is looking at in the game world, see the `scrollY` value.",
                    "title": "y",
                    "type": "number"
                },
                "zoom": {
                    "description": "The Camera zoom value. Change this value to zoom in, or out of, a Scene.\n\nA value of 0.5 would zoom the Camera out, so you can now see twice as much\nof the Scene as before. A value of 2 would zoom the Camera in, so every pixel\nnow takes up 2 pixels when rendered.\n\nSet to 1 to return to the default zoom level.\n\nBe careful to never set this value to zero.",
                    "title": "zoom",
                    "type": "number"
                },
                "zoomEffect": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Effects.Zoom",
                    "description": "The Camera Zoom effect handler.\nTo zoom this camera see the `Camera.zoom` method.",
                    "title": "zoomEffect"
                }
            },
            "title": "Phaser.Cameras.Scene2D.Camera",
            "type": "object"
        },
        "Phaser.Cameras.Scene2D.CameraManager": {
            "description": "The Camera Manager is a plugin that belongs to a Scene and is responsible for managing all of the Scene Cameras.\n\nBy default you can access the Camera Manager from within a Scene using `this.cameras`, although this can be changed\nin your game config.\n\nCreate new Cameras using the `add` method. Or extend the Camera class with your own addition code and then add\nthe new Camera in using the `addExisting` method.\n\nCameras provide a view into your game world, and can be positioned, rotated, zoomed and scrolled accordingly.\n\nA Camera consists of two elements: The viewport and the scroll values.\n\nThe viewport is the physical position and size of the Camera within your game. Cameras, by default, are\ncreated the same size as your game, but their position and size can be set to anything. This means if you\nwanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\nyou'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\n\nIf you wish to change where the Camera is looking in your game, then you scroll it. You can do this\nvia the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\nviewport, and changing the viewport has no impact on the scrolling.\n\nBy default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\nallowing you to filter Game Objects out on a per-Camera basis. The Camera Manager can manage up to 31 unique \n'Game Object ignore capable' Cameras. Any Cameras beyond 31 that you create will all be given a Camera ID of\nzero, meaning that they cannot be used for Game Object exclusion. This means if you need your Camera to ignore\nGame Objects, make sure it's one of the first 31 created.\n\nA Camera also has built-in special effects including Fade, Flash, Camera Shake, Pan and Zoom.",
            "properties": {
                "baseScale": {
                    "description": "This scale affects all cameras. It's used by the Scale Manager.",
                    "title": "baseScale",
                    "type": "number"
                },
                "cameras": {
                    "description": "An Array of the Camera objects being managed by this Camera Manager.\nThe Cameras are updated and rendered in the same order in which they appear in this array.\nDo not directly add or remove entries to this array. However, you can move the contents\naround the array should you wish to adjust the display order.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera"
                    },
                    "title": "cameras",
                    "type": "array"
                },
                "main": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                    "description": "A handy reference to the 'main' camera. By default this is the first Camera the\nCamera Manager creates. You can also set it directly, or use the `makeMain` argument\nin the `add` and `addExisting` methods. It allows you to access it from your game:\n\n```javascript\n                 * var cam = this.cameras.main;\n                 * ```\n\nAlso see the properties `camera1`, `camera2` and so on.",
                    "title": "main"
                },
                "roundPixels": {
                    "description": "All Cameras created by, or added to, this Camera Manager, will have their `roundPixels`\nproperty set to match this value. By default it is set to match the value set in the\ngame configuration, but can be changed at any point. Equally, individual cameras can\nalso be changed as needed.",
                    "title": "roundPixels",
                    "type": "boolean"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene that owns the Camera Manager plugin.",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "A reference to the Scene.Systems handler for the Scene that owns the Camera Manager.",
                    "title": "systems"
                }
            },
            "title": "Phaser.Cameras.Scene2D.CameraManager",
            "type": "object"
        },
        "Phaser.Cameras.Scene2D.Effects.Fade": {
            "description": "A Camera Fade effect.\n\nThis effect will fade the camera viewport to the given color, over the duration specified.\n\nOnly the camera viewport is faded. None of the objects it is displaying are impacted, i.e. their colors do\nnot change.\n\nThe effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\nwhich is invoked each frame for the duration of the effect, if required.",
            "properties": {
                "camera": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                    "description": "The Camera this effect belongs to.",
                    "title": "camera"
                },
                "direction": {
                    "description": "The direction of the fade.\n`true` = fade out (transparent to color), `false` = fade in (color to transparent)",
                    "title": "direction",
                    "type": "boolean"
                },
                "duration": {
                    "description": "The duration of the effect, in milliseconds.",
                    "title": "duration",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Has this effect finished running?\n\nThis is different from `isRunning` because it remains set to `true` when the effect is over,\nuntil the effect is either reset or started again.",
                    "title": "isComplete",
                    "type": "boolean"
                },
                "isRunning": {
                    "description": "Is this effect actively running?",
                    "title": "isRunning",
                    "type": "boolean"
                },
                "progress": {
                    "description": "If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
                    "title": "progress",
                    "type": "number"
                }
            },
            "title": "Phaser.Cameras.Scene2D.Effects.Fade",
            "type": "object"
        },
        "Phaser.Cameras.Scene2D.Effects.Flash": {
            "description": "A Camera Flash effect.\n\nThis effect will flash the camera viewport to the given color, over the duration specified.\n\nOnly the camera viewport is flashed. None of the objects it is displaying are impacted, i.e. their colors do\nnot change.\n\nThe effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\nwhich is invoked each frame for the duration of the effect, if required.",
            "properties": {
                "camera": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                    "description": "The Camera this effect belongs to.",
                    "title": "camera"
                },
                "duration": {
                    "description": "The duration of the effect, in milliseconds.",
                    "title": "duration",
                    "type": "integer"
                },
                "isRunning": {
                    "description": "Is this effect actively running?",
                    "title": "isRunning",
                    "type": "boolean"
                },
                "progress": {
                    "description": "If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
                    "title": "progress",
                    "type": "number"
                }
            },
            "title": "Phaser.Cameras.Scene2D.Effects.Flash",
            "type": "object"
        },
        "Phaser.Cameras.Scene2D.Effects.Pan": {
            "description": "A Camera Pan effect.\n\nThis effect will scroll the Camera so that the center of its viewport finishes at the given destination,\nover the duration and with the ease specified.\n\nOnly the camera scroll is moved. None of the objects it is displaying are impacted, i.e. their positions do\nnot change.\n\nThe effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\nwhich is invoked each frame for the duration of the effect if required.",
            "properties": {
                "camera": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                    "description": "The Camera this effect belongs to.",
                    "title": "camera"
                },
                "current": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The constantly updated value based on zoom.",
                    "title": "current"
                },
                "destination": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The destination scroll coordinates to pan the camera to.",
                    "title": "destination"
                },
                "duration": {
                    "description": "The duration of the effect, in milliseconds.",
                    "title": "duration",
                    "type": "integer"
                },
                "ease": {
                    "$ref": "#/definitions/Function",
                    "description": "The ease function to use during the pan.",
                    "title": "ease"
                },
                "isRunning": {
                    "description": "Is this effect actively running?",
                    "title": "isRunning",
                    "type": "boolean"
                },
                "progress": {
                    "description": "If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
                    "title": "progress",
                    "type": "number"
                },
                "source": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The starting scroll coordinates to pan the camera from.",
                    "title": "source"
                }
            },
            "title": "Phaser.Cameras.Scene2D.Effects.Pan",
            "type": "object"
        },
        "Phaser.Cameras.Scene2D.Effects.Shake": {
            "description": "A Camera Shake effect.\n\nThis effect will shake the camera viewport by a random amount, bounded by the specified intensity, each frame.\n\nOnly the camera viewport is moved. None of the objects it is displaying are impacted, i.e. their positions do\nnot change.\n\nThe effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\nwhich is invoked each frame for the duration of the effect if required.",
            "properties": {
                "camera": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                    "description": "The Camera this effect belongs to.",
                    "title": "camera"
                },
                "duration": {
                    "description": "The duration of the effect, in milliseconds.",
                    "title": "duration",
                    "type": "integer"
                },
                "intensity": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The intensity of the effect. Use small float values. The default when the effect starts is 0.05.\nThis is a Vector2 object, allowing you to control the shake intensity independently across x and y.\nYou can modify this value while the effect is active to create more varied shake effects.",
                    "title": "intensity"
                },
                "isRunning": {
                    "description": "Is this effect actively running?",
                    "title": "isRunning",
                    "type": "boolean"
                },
                "progress": {
                    "description": "If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
                    "title": "progress",
                    "type": "number"
                }
            },
            "title": "Phaser.Cameras.Scene2D.Effects.Shake",
            "type": "object"
        },
        "Phaser.Cameras.Scene2D.Effects.Zoom": {
            "description": "A Camera Zoom effect.\n\nThis effect will zoom the Camera to the given scale, over the duration and with the ease specified.\n\nThe effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\nwhich is invoked each frame for the duration of the effect if required.",
            "properties": {
                "camera": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                    "description": "The Camera this effect belongs to.",
                    "title": "camera"
                },
                "destination": {
                    "description": "The destination zoom value.",
                    "title": "destination",
                    "type": "number"
                },
                "duration": {
                    "description": "The duration of the effect, in milliseconds.",
                    "title": "duration",
                    "type": "integer"
                },
                "ease": {
                    "$ref": "#/definitions/Function",
                    "description": "The ease function to use during the zoom.",
                    "title": "ease"
                },
                "isRunning": {
                    "description": "Is this effect actively running?",
                    "title": "isRunning",
                    "type": "boolean"
                },
                "progress": {
                    "description": "If this effect is running this holds the current percentage of the progress, a value between 0 and 1.",
                    "title": "progress",
                    "type": "number"
                },
                "source": {
                    "description": "The starting zoom value;",
                    "title": "source",
                    "type": "number"
                }
            },
            "title": "Phaser.Cameras.Scene2D.Effects.Zoom",
            "type": "object"
        },
        "Phaser.DOM.RequestAnimationFrame": {
            "description": "Abstracts away the use of RAF or setTimeOut for the core game update loop.\nThis is invoked automatically by the Phaser.Game instance.",
            "properties": {
                "callback": {
                    "$ref": "#/definitions/FrameRequestCallback",
                    "description": "The callback to be invoked each step.",
                    "title": "callback"
                },
                "isRunning": {
                    "description": "True if RequestAnimationFrame is running, otherwise false.",
                    "title": "isRunning",
                    "type": "boolean"
                },
                "isSetTimeOut": {
                    "description": "True if the step is using setTimeout instead of RAF.",
                    "title": "isSetTimeOut",
                    "type": "boolean"
                },
                "lastTime": {
                    "description": "The previous time the step was called.",
                    "title": "lastTime",
                    "type": "number"
                },
                "step": {
                    "$ref": "#/definitions/FrameRequestCallback",
                    "description": "The RAF step function.\nUpdates the local tick value, invokes the callback and schedules another call to requestAnimationFrame.",
                    "title": "step"
                },
                "stepTimeout": {
                    "$ref": "#/definitions/Function",
                    "description": "The SetTimeout step function.\nUpdates the local tick value, invokes the callback and schedules another call to setTimeout.",
                    "title": "stepTimeout"
                },
                "tick": {
                    "description": "The most recent timestamp. Either a DOMHighResTimeStamp under RAF or `Date.now` under SetTimeout.",
                    "title": "tick",
                    "type": "number"
                },
                "timeOutID": {
                    "description": "The setTimeout or RAF callback ID used when canceling them.",
                    "title": "timeOutID",
                    "type": "number"
                }
            },
            "title": "Phaser.DOM.RequestAnimationFrame",
            "type": "object"
        },
        "Phaser.Data.DataManager": {
            "description": "The Data Component features a means to store pieces of data specific to a Game Object, System or Plugin.\nYou can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\nor have a property called `events` that is an instance of it.",
            "properties": {
                "count": {
                    "description": "Return the total number of entries in this Data Manager.",
                    "title": "count",
                    "type": "integer"
                },
                "events": {
                    "$ref": "#/definitions/Phaser.Events.EventEmitter",
                    "description": "The DataManager's event emitter.",
                    "title": "events"
                },
                "freeze": {
                    "description": "Gets or sets the frozen state of this Data Manager.\nA frozen Data Manager will block all attempts to create new values or update existing ones.",
                    "title": "freeze",
                    "type": "boolean"
                },
                "list": {
                    "additionalProperties": {
                    },
                    "description": "The data list.",
                    "title": "list",
                    "type": "object"
                },
                "parent": {
                    "description": "The object that this DataManager belongs to.",
                    "title": "parent"
                },
                "values": {
                    "additionalProperties": {
                    },
                    "description": "The public values list. You can use this to access anything you have stored\nin this Data Manager. For example, if you set a value called `gold` you can\naccess it via:\n\n```javascript\n             * this.data.values.gold;\n             * ```\n\nYou can also modify it directly:\n\n```javascript\n             * this.data.values.gold += 1000;\n             * ```\n\nDoing so will emit a `setdata` event from the parent of this Data Manager.\n\nDo not modify this object directly. Adding properties directly to this object will not\nemit any events. Always use `DataManager.set` to create new items the first time around.",
                    "title": "values",
                    "type": "object"
                }
            },
            "title": "Phaser.Data.DataManager",
            "type": "object"
        },
        "Phaser.Display.Color": {
            "description": "The Color class holds a single color value and allows for easy modification and reading of it.",
            "properties": {
                "alpha": {
                    "description": "The alpha color value, normalized to the range 0 to 255.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaGL": {
                    "description": "The alpha color value, normalized to the range 0 to 1.",
                    "title": "alphaGL",
                    "type": "number"
                },
                "blue": {
                    "description": "The blue color value, normalized to the range 0 to 255.",
                    "title": "blue",
                    "type": "number"
                },
                "blueGL": {
                    "description": "The blue color value, normalized to the range 0 to 1.",
                    "title": "blueGL",
                    "type": "number"
                },
                "color": {
                    "description": "The color of this Color component, not including the alpha channel.",
                    "title": "color",
                    "type": "number"
                },
                "color32": {
                    "description": "The color of this Color component, including the alpha channel.",
                    "title": "color32",
                    "type": "number"
                },
                "gl": {
                    "description": "An array containing the calculated color values for WebGL use.",
                    "items": {
                        "type": "number"
                    },
                    "title": "gl",
                    "type": "array"
                },
                "green": {
                    "description": "The green color value, normalized to the range 0 to 255.",
                    "title": "green",
                    "type": "number"
                },
                "greenGL": {
                    "description": "The green color value, normalized to the range 0 to 1.",
                    "title": "greenGL",
                    "type": "number"
                },
                "h": {
                    "description": "The hue color value. A number between 0 and 1.\nThis is the base color.",
                    "title": "h",
                    "type": "number"
                },
                "red": {
                    "description": "The red color value, normalized to the range 0 to 255.",
                    "title": "red",
                    "type": "number"
                },
                "redGL": {
                    "description": "The red color value, normalized to the range 0 to 1.",
                    "title": "redGL",
                    "type": "number"
                },
                "rgba": {
                    "description": "The color of this Color component as a string which can be used in CSS color values.",
                    "title": "rgba",
                    "type": "string"
                },
                "s": {
                    "description": "The saturation color value. A number between 0 and 1.\nThis controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.",
                    "title": "s",
                    "type": "number"
                },
                "v": {
                    "description": "The lightness color value. A number between 0 and 1.\nThis controls how dark the color is. Where 1 is as bright as possible and 0 is black.",
                    "title": "v",
                    "type": "number"
                }
            },
            "title": "Phaser.Display.Color",
            "type": "object"
        },
        "Phaser.Display.Masks.BitmapMask": {
            "description": "[description]",
            "properties": {
                "bitmapMask": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "A renderable Game Object that uses a texture, such as a Sprite.",
                    "title": "bitmapMask"
                },
                "dirty": {
                    "description": "[description]",
                    "title": "dirty",
                    "type": "boolean"
                },
                "invertAlpha": {
                    "description": "[description]",
                    "title": "invertAlpha",
                    "type": "boolean"
                },
                "mainFramebuffer": {
                    "$ref": "#/definitions/WebGLFramebuffer",
                    "description": "[description]",
                    "title": "mainFramebuffer"
                },
                "mainTexture": {
                    "$ref": "#/definitions/WebGLTexture",
                    "description": "[description]",
                    "title": "mainTexture"
                },
                "maskFramebuffer": {
                    "$ref": "#/definitions/WebGLFramebuffer",
                    "description": "[description]",
                    "title": "maskFramebuffer"
                },
                "maskTexture": {
                    "$ref": "#/definitions/WebGLTexture",
                    "description": "[description]",
                    "title": "maskTexture"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Renderer.Canvas.CanvasRenderer"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLRenderer"
                        }
                    ],
                    "description": "A reference to either the Canvas or WebGL Renderer that this Mask is using.",
                    "title": "renderer"
                }
            },
            "title": "Phaser.Display.Masks.BitmapMask",
            "type": "object"
        },
        "Phaser.Display.Masks.GeometryMask": {
            "description": "A Geometry Mask can be applied to a Game Object to hide any pixels of it which don't intersect a visible pixel from the geometry mask. The mask is essentially a clipping path which can only make a masked pixel fully visible or fully invisible without changing its alpha (opacity).\n\nA Geometry Mask uses a Graphics Game Object to determine which pixels of the masked Game Object(s) should be clipped. For any given point of a masked Game Object's texture, the pixel will only be displayed if the Graphics Game Object of the Geometry Mask has a visible pixel at the same position. The color and alpha of the pixel from the Geometry Mask do not matter.\n\nThe Geometry Mask's location matches the location of its Graphics object, not the location of the masked objects. Moving or transforming the underlying Graphics object will change the mask (and affect the visibility of any masked objects), whereas moving or transforming a masked object will not affect the mask. You can think of the Geometry Mask (or rather, of the its Graphics object) as an invisible curtain placed in front of all masked objects which has its own visual properties and, naturally, respects the camera's visual properties, but isn't affected by and doesn't follow the masked objects by itself.",
            "properties": {
                "geometryMask": {
                    "$ref": "#/definitions/Phaser.GameObjects.Graphics",
                    "description": "The Graphics object which describes the Geometry Mask.",
                    "title": "geometryMask"
                }
            },
            "title": "Phaser.Display.Masks.GeometryMask",
            "type": "object"
        },
        "Phaser.Events.EventEmitter": {
            "description": "EventEmitter is a Scene Systems plugin compatible version of eventemitter3.",
            "title": "Phaser.Events.EventEmitter",
            "type": "object"
        },
        "Phaser.FacebookInstantGamesPlugin": {
            "description": "The Facebook Instant Games Plugin for Phaser 3 provides a seamless bridge between Phaser\nand the Facebook Instant Games API version 6.2.\n\nYou can access this plugin via the `facebook` property in a Scene, i.e:\n\n```javascript\n     * this.facebook.getPlatform();\n     * ```\n\nIf this is unavailable please check to make sure you're using a build of Phaser that has\nthis plugin within it. You can quickly check this by looking at the dev tools console\nheader - the Phaser version number will have `-FB` after it if this plugin is loaded.\n\nIf you are building your own version of Phaser then use this Webpack DefinePlugin flag:\n\n`\"typeof PLUGIN_FBINSTANT\": JSON.stringify(true)`\n\nYou will find that every Instant Games API method has a mapping in this plugin.\nFor a full list please consult either the plugin documentation, or the 6.2 SDK documentation\nat https://developers.facebook.com/docs/games/instant-games/sdk/fbinstant6.2\n\nInternally this plugin uses its own Data Manager to handle seamless user data updates and provides\nhandy functions for advertisement displaying, opening share dialogs, logging, leaderboards, purchase API requests,\nloader integration and more.\n\nTo get started with Facebook Instant Games you will need to register on Facebook and create a new Instant\nGame app that has its own unique app ID. Facebook have also provided a dashboard interface for setting up\nvarious features for your game, including leaderboards, ad requests and the payments API. There are lots\nof guides on the Facebook Developers portal to assist with setting these\nvarious systems up: https://developers.facebook.com/docs/games/instant-games/guides\n\nFor more details follow the Quick Start guide here: https://developers.facebook.com/docs/games/instant-games",
            "properties": {
                "ads": {
                    "description": "Contains AdInstance objects, as created by the `preloadAds()` method.",
                    "items": {
                        "properties": {
                            "instance": {
                                "description": "Represents an instance of an ad.",
                                "title": "instance"
                            },
                            "placementID": {
                                "description": "The Audience Network placement ID of this ad instance.",
                                "title": "placementID",
                                "type": "string"
                            },
                            "shown": {
                                "description": "Has this ad already been shown in-game?",
                                "title": "shown",
                                "type": "boolean"
                            },
                            "video": {
                                "description": "Is this a video ad?",
                                "title": "video",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "title": "ads",
                    "type": "array"
                },
                "catalog": {
                    "description": "The set of products that are registered to the game.",
                    "items": {
                        "properties": {
                            "description": {
                                "description": "The product description.",
                                "title": "description",
                                "type": "string"
                            },
                            "imageURI": {
                                "description": "A link to the product's associated image.",
                                "title": "imageURI",
                                "type": "string"
                            },
                            "price": {
                                "description": "The price of the product.",
                                "title": "price",
                                "type": "string"
                            },
                            "priceCurrencyCode": {
                                "description": "The currency code for the product.",
                                "title": "priceCurrencyCode",
                                "type": "string"
                            },
                            "productID": {
                                "description": "The product's game-specified identifier.",
                                "title": "productID",
                                "type": "string"
                            },
                            "title": {
                                "description": "The title of the product.",
                                "title": "title",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "title": "catalog",
                    "type": "array"
                },
                "contextID": {
                    "description": "A unique identifier for the current game context. This represents a specific context\nthat the game is being played in (for example, a particular messenger conversation or facebook post).\nThe identifier will be null if game is being played in a solo context.\nThis value is populated automatically during boot.",
                    "title": "contextID",
                    "type": "string"
                },
                "contextType": {
                    "description": "The current context in which your game is running. This can be either `null` or\none of:\n\n`POST` - The game is running inside of a Facebook post.\n`THREAD` - The game is running inside a Facebook Messenger thread.\n`GROUP` - The game is running inside a Facebook Group.\n`SOLO` - This is the default context, the player is the only participant.\n\nThis value is populated automatically during boot.",
                    "title": "contextType",
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A Data Manager instance.\nIt allows you to store, query and retrieve any key/value data you may need to store.\nIt's also used internally by the plugin to store FBIG API data.",
                    "title": "data"
                },
                "dataLocked": {
                    "description": "Is the Data Manager currently locked?",
                    "title": "dataLocked",
                    "type": "boolean"
                },
                "entryPoint": {
                    "description": "Holds the entry point that the game was launched from.\nThis value is populated automatically during boot.",
                    "title": "entryPoint",
                    "type": "string"
                },
                "entryPointData": {
                    "description": "An object that contains any data associated with the entry point that the game was launched from.\nThe contents of the object are developer-defined, and can occur from entry points on different platforms.\nThis will return null for older mobile clients, as well as when there is no data associated with the particular entry point.\nThis value is populated automatically during boot.",
                    "title": "entryPointData"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "A reference to the Phaser.Game instance.",
                    "title": "game"
                },
                "hasLoaded": {
                    "description": "Has the Facebook Instant Games API loaded yet?\nThis is set automatically during the boot process.",
                    "title": "hasLoaded",
                    "type": "boolean"
                },
                "leaderboards": {
                    "description": "Contains all of the leaderboard data, as populated by the `getLeaderboard()` method.",
                    "items": {
                        "$ref": "#/definitions/Phaser.FacebookInstantGamesPlugin.Leaderboard"
                    },
                    "title": "leaderboards",
                    "type": "array"
                },
                "locale": {
                    "description": "The current locale.\nSee https://origincache.facebook.com/developers/resources/?id=FacebookLocales.xml for a complete list of supported locale values.\nUse this to determine what languages the current game should be localized with.\nThis value is populated automatically during boot.",
                    "title": "locale",
                    "type": "string"
                },
                "paymentsReady": {
                    "description": "Does the current platform and context allow for use of the payments API?\nCurrently this is only available on Facebook.com and Android 6+.",
                    "title": "paymentsReady",
                    "type": "boolean"
                },
                "platform": {
                    "description": "The platform on which the game is currently running, i.e. `IOS`.\nThis value is populated automatically during boot.",
                    "title": "platform",
                    "type": "string"
                },
                "playerCanSubscribeBot": {
                    "description": "Whether a player can subscribe to the game bot or not.",
                    "title": "playerCanSubscribeBot",
                    "type": "boolean"
                },
                "playerID": {
                    "description": "Holds the id of the player. This is a string based ID, the same as `FBInstant.player.getID()`.\nThis value is populated automatically during boot if the API is supported.",
                    "title": "playerID",
                    "type": "string"
                },
                "playerName": {
                    "description": "The player's localized display name.\nThis value is populated automatically during boot if the API is supported.",
                    "title": "playerName",
                    "type": "string"
                },
                "playerPhotoURL": {
                    "description": "A url to the player's public profile photo. The photo will always be a square, and with dimensions\nof at least 200x200. When rendering it in the game, the exact dimensions should never be assumed to be constant.\nIt's recommended to always scale the image to a desired size before rendering.\nThis value is populated automatically during boot if the API is supported.",
                    "title": "playerPhotoURL",
                    "type": "string"
                },
                "purchases": {
                    "description": "Contains all of the player's unconsumed purchases.\nThe game must fetch the current player's purchases as soon as the client indicates that it is ready to perform payments-related operations,\ni.e. at game start. The game can then process and consume any purchases that are waiting to be consumed.",
                    "items": {
                        "properties": {
                            "developerPayload": {
                                "description": "A developer-specified string, provided during the purchase of the product.",
                                "title": "developerPayload",
                                "type": "string"
                            },
                            "paymentID": {
                                "description": "The identifier for the purchase transaction.",
                                "title": "paymentID",
                                "type": "string"
                            },
                            "productID": {
                                "description": "The product's game-specified identifier.",
                                "title": "productID",
                                "type": "string"
                            },
                            "purchaseTime": {
                                "description": "Unix timestamp of when the purchase occurred.",
                                "title": "purchaseTime",
                                "type": "string"
                            },
                            "purchaseToken": {
                                "description": "A token representing the purchase that may be used to consume the purchase.",
                                "title": "purchaseToken",
                                "type": "string"
                            },
                            "signedRequest": {
                                "description": "Server-signed encoding of the purchase request.",
                                "title": "signedRequest",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "title": "purchases",
                    "type": "array"
                },
                "supportedAPIs": {
                    "description": "A list of the Facebook Instant Games APIs that are available,\nbased on the given platform, context and user privacy settings.\nThis value is populated automatically during boot.",
                    "items": {
                        "type": "string"
                    },
                    "title": "supportedAPIs",
                    "type": "array"
                },
                "version": {
                    "description": "The string representation of the Facebook Instant Games SDK version being used.\nThis value is populated automatically during boot.",
                    "title": "version",
                    "type": "string"
                }
            },
            "title": "Phaser.FacebookInstantGamesPlugin",
            "type": "object"
        },
        "Phaser.FacebookInstantGamesPlugin.Leaderboard": {
            "description": "This class represents one single Leaderboard that belongs to a Facebook Instant Game.\n\nYou do not need to instantiate this class directly, it will be created when you use the\n`getLeaderboard()` method of the main plugin.",
            "properties": {
                "contextID": {
                    "description": "The ID of the context that the leaderboard is associated with, or null if the leaderboard is not tied to a particular context.",
                    "title": "contextID",
                    "type": "string"
                },
                "entryCount": {
                    "description": "The total number of player entries in the leaderboard.\nThis value defaults to zero. Populate it via the `getEntryCount()` method.",
                    "title": "entryCount",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the leaderboard.",
                    "title": "name",
                    "type": "string"
                },
                "playerScore": {
                    "description": "The players score object.\nThis value defaults to `null`. Populate it via the `getPlayerScore()` method.",
                    "properties": {
                        "data": {
                            "description": "The developer-specified payload associated with the score, or null if one was not set.",
                            "title": "data",
                            "type": "string"
                        },
                        "playerID": {
                            "description": "The game's unique identifier for the player.",
                            "title": "playerID",
                            "type": "string"
                        },
                        "playerName": {
                            "description": "The player's localized display name.",
                            "title": "playerName",
                            "type": "string"
                        },
                        "playerPhotoURL": {
                            "description": "A url to the player's public profile photo.",
                            "title": "playerPhotoURL",
                            "type": "string"
                        },
                        "rank": {
                            "description": "The entry's leaderboard ranking.",
                            "title": "rank",
                            "type": "integer"
                        },
                        "score": {
                            "description": "An integer score value.",
                            "title": "score",
                            "type": "integer"
                        },
                        "scoreFormatted": {
                            "description": "The score value, formatted with the score format associated with the leaderboard.",
                            "title": "scoreFormatted",
                            "type": "string"
                        },
                        "timestamp": {
                            "description": "The Unix timestamp of when the leaderboard entry was last updated.",
                            "title": "timestamp",
                            "type": "integer"
                        }
                    },
                    "title": "playerScore",
                    "type": "object"
                },
                "plugin": {
                    "$ref": "#/definitions/Phaser.FacebookInstantGamesPlugin",
                    "description": "A reference to the Facebook Instant Games Plugin.",
                    "title": "plugin"
                },
                "ref": {
                    "description": "An Instant Game leaderboard instance.",
                    "title": "ref"
                },
                "scores": {
                    "description": "The scores in the Leaderboard from the currently requested range.\nThis value defaults to an empty array. Populate it via the `getScores()` method.\nThe contents of this array are reset each time `getScores()` is called.",
                    "items": {
                        "properties": {
                            "data": {
                                "description": "The developer-specified payload associated with the score, or null if one was not set.",
                                "title": "data",
                                "type": "string"
                            },
                            "playerID": {
                                "description": "The game's unique identifier for the player.",
                                "title": "playerID",
                                "type": "string"
                            },
                            "playerName": {
                                "description": "The player's localized display name.",
                                "title": "playerName",
                                "type": "string"
                            },
                            "playerPhotoURL": {
                                "description": "A url to the player's public profile photo.",
                                "title": "playerPhotoURL",
                                "type": "string"
                            },
                            "rank": {
                                "description": "The entry's leaderboard ranking.",
                                "title": "rank",
                                "type": "integer"
                            },
                            "score": {
                                "description": "An integer score value.",
                                "title": "score",
                                "type": "integer"
                            },
                            "scoreFormatted": {
                                "description": "The score value, formatted with the score format associated with the leaderboard.",
                                "title": "scoreFormatted",
                                "type": "string"
                            },
                            "timestamp": {
                                "description": "The Unix timestamp of when the leaderboard entry was last updated.",
                                "title": "timestamp",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "title": "scores",
                    "type": "array"
                }
            },
            "title": "Phaser.FacebookInstantGamesPlugin.Leaderboard",
            "type": "object"
        },
        "Phaser.Game": {
            "description": "The Phaser.Game instance is the main controller for the entire Phaser game. It is responsible\nfor handling the boot process, parsing the configuration values, creating the renderer,\nand setting-up all of the global Phaser systems, such as sound and input.\nOnce that is complete it will start the Scene Manager and then begin the main game loop.\n\nYou should generally avoid accessing any of the systems created by Game, and instead use those\nmade available to you via the Phaser.Scene Systems class instead.",
            "properties": {
                "anims": {
                    "$ref": "#/definitions/Phaser.Animations.AnimationManager",
                    "description": "An instance of the Animation Manager.\n\nThe Animation Manager is a global system responsible for managing all animations used within your game.",
                    "title": "anims"
                },
                "cache": {
                    "$ref": "#/definitions/Phaser.Cache.CacheManager",
                    "description": "An instance of the Cache Manager.\n\nThe Cache Manager is a global system responsible for caching, accessing and releasing external game assets.",
                    "title": "cache"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "A reference to the HTML Canvas Element that Phaser uses to render the game.\nThis is created automatically by Phaser unless you provide a `canvas` property\nin your Game Config.",
                    "title": "canvas"
                },
                "config": {
                    "$ref": "#/definitions/Phaser.Boot.Config",
                    "description": "The parsed Game Configuration object.\n\nThe values stored within this object are read-only and should not be changed at run-time.",
                    "title": "config"
                },
                "context": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CanvasRenderingContext2D"
                        },
                        {
                            "$ref": "#/definitions/WebGLRenderingContext"
                        }
                    ],
                    "description": "A reference to the Rendering Context belonging to the Canvas Element this game is rendering to.\nIf the game is running under Canvas it will be a 2d Canvas Rendering Context.\nIf the game is running under WebGL it will be a WebGL Rendering Context.\nThis context is created automatically by Phaser unless you provide a `context` property\nin your Game Config.",
                    "title": "context"
                },
                "device": {
                    "description": "A reference to the Device inspector.\n\nContains information about the device running this game, such as OS, browser vendor and feature support.\nUsed by various systems to determine capabilities and code paths.",
                    "properties": {
                        "audio": {
                            "description": "The Audio Device functions.",
                            "properties": {
                                "audioData": {
                                    "description": "Can this device play HTML Audio tags?",
                                    "title": "audioData",
                                    "type": "boolean"
                                },
                                "dolby": {
                                    "description": "Can this device play EC-3 Dolby Digital Plus files?",
                                    "title": "dolby",
                                    "type": "boolean"
                                },
                                "m4a": {
                                    "description": "Can this device can play m4a files.",
                                    "title": "m4a",
                                    "type": "boolean"
                                },
                                "mp3": {
                                    "description": "Can this device play mp3 files?",
                                    "title": "mp3",
                                    "type": "boolean"
                                },
                                "ogg": {
                                    "description": "Can this device play ogg files?",
                                    "title": "ogg",
                                    "type": "boolean"
                                },
                                "opus": {
                                    "description": "Can this device play opus files?",
                                    "title": "opus",
                                    "type": "boolean"
                                },
                                "wav": {
                                    "description": "Can this device play wav files?",
                                    "title": "wav",
                                    "type": "boolean"
                                },
                                "webAudio": {
                                    "description": "Does this device have the Web Audio API?",
                                    "title": "webAudio",
                                    "type": "boolean"
                                },
                                "webm": {
                                    "description": "Can this device play webm files?",
                                    "title": "webm",
                                    "type": "boolean"
                                }
                            },
                            "title": "audio",
                            "type": "object"
                        },
                        "browser": {
                            "description": "The Browser Device functions.",
                            "properties": {
                                "chrome": {
                                    "description": "Set to true if running in Chrome.",
                                    "title": "chrome",
                                    "type": "boolean"
                                },
                                "chromeVersion": {
                                    "description": "If running in Chrome this will contain the major version number.",
                                    "title": "chromeVersion",
                                    "type": "number"
                                },
                                "edge": {
                                    "description": "Set to true if running in Microsoft Edge browser.",
                                    "title": "edge",
                                    "type": "boolean"
                                },
                                "firefox": {
                                    "description": "Set to true if running in Firefox.",
                                    "title": "firefox",
                                    "type": "boolean"
                                },
                                "firefoxVersion": {
                                    "description": "If running in Firefox this will contain the major version number.",
                                    "title": "firefoxVersion",
                                    "type": "number"
                                },
                                "ie": {
                                    "description": "Set to true if running in Internet Explorer 11 or less (not Edge).",
                                    "title": "ie",
                                    "type": "boolean"
                                },
                                "ieVersion": {
                                    "description": "If running in Internet Explorer this will contain the major version number. Beyond IE10 you should use Browser.trident and Browser.tridentVersion.",
                                    "title": "ieVersion",
                                    "type": "number"
                                },
                                "mobileSafari": {
                                    "description": "Set to true if running in Mobile Safari.",
                                    "title": "mobileSafari",
                                    "type": "boolean"
                                },
                                "opera": {
                                    "description": "Set to true if running in Opera.",
                                    "title": "opera",
                                    "type": "boolean"
                                },
                                "safari": {
                                    "description": "Set to true if running in Safari.",
                                    "title": "safari",
                                    "type": "boolean"
                                },
                                "safariVersion": {
                                    "description": "If running in Safari this will contain the major version number.",
                                    "title": "safariVersion",
                                    "type": "number"
                                },
                                "silk": {
                                    "description": "Set to true if running in the Silk browser (as used on the Amazon Kindle)",
                                    "title": "silk",
                                    "type": "boolean"
                                },
                                "trident": {
                                    "description": "Set to true if running a Trident version of Internet Explorer (IE11+)",
                                    "title": "trident",
                                    "type": "boolean"
                                },
                                "tridentVersion": {
                                    "description": "If running in Internet Explorer 11 this will contain the major version number. See {@link http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx}",
                                    "title": "tridentVersion",
                                    "type": "number"
                                }
                            },
                            "title": "browser",
                            "type": "object"
                        },
                        "canvasFeatures": {
                            "description": "The Canvas Device functions.",
                            "properties": {
                                "supportInverseAlpha": {
                                    "description": "Set to true if the browser supports inversed alpha.",
                                    "title": "supportInverseAlpha",
                                    "type": "boolean"
                                },
                                "supportNewBlendModes": {
                                    "description": "Set to true if the browser supports new canvas blend modes.",
                                    "title": "supportNewBlendModes",
                                    "type": "boolean"
                                }
                            },
                            "title": "canvasFeatures",
                            "type": "object"
                        },
                        "features": {
                            "description": "The Features Device functions.",
                            "properties": {
                                "canvas": {
                                    "description": "Is canvas available?",
                                    "title": "canvas",
                                    "type": "boolean"
                                },
                                "canvasBitBltShift": {
                                    "description": "True if canvas supports a 'copy' bitblt onto itself when the source and destination regions overlap.",
                                    "title": "canvasBitBltShift",
                                    "type": "boolean"
                                },
                                "file": {
                                    "description": "Is file available?",
                                    "title": "file",
                                    "type": "boolean"
                                },
                                "fileSystem": {
                                    "description": "Is fileSystem available?",
                                    "title": "fileSystem",
                                    "type": "boolean"
                                },
                                "getUserMedia": {
                                    "description": "Does the device support the getUserMedia API?",
                                    "title": "getUserMedia",
                                    "type": "boolean"
                                },
                                "littleEndian": {
                                    "description": "Is the device big or little endian? (only detected if the browser supports TypedArrays)",
                                    "title": "littleEndian",
                                    "type": "boolean"
                                },
                                "localStorage": {
                                    "description": "Is localStorage available?",
                                    "title": "localStorage",
                                    "type": "boolean"
                                },
                                "pointerLock": {
                                    "description": "Is Pointer Lock available?",
                                    "title": "pointerLock",
                                    "type": "boolean"
                                },
                                "support32bit": {
                                    "description": "Does the device context support 32bit pixel manipulation using array buffer views?",
                                    "title": "support32bit",
                                    "type": "boolean"
                                },
                                "vibration": {
                                    "description": "Does the device support the Vibration API?",
                                    "title": "vibration",
                                    "type": "boolean"
                                },
                                "webGL": {
                                    "description": "Is webGL available?",
                                    "title": "webGL",
                                    "type": "boolean"
                                },
                                "worker": {
                                    "description": "Is worker available?",
                                    "title": "worker",
                                    "type": "boolean"
                                }
                            },
                            "title": "features",
                            "type": "object"
                        },
                        "fullscreen": {
                            "description": "The Fullscreen Device functions.",
                            "properties": {
                                "available": {
                                    "description": "Does the browser support the Full Screen API?",
                                    "title": "available",
                                    "type": "boolean"
                                },
                                "cancel": {
                                    "description": "If the browser supports the Full Screen API this holds the call you need to use to cancel it.",
                                    "title": "cancel",
                                    "type": "string"
                                },
                                "keyboard": {
                                    "description": "Does the browser support access to the Keyboard during Full Screen mode?",
                                    "title": "keyboard",
                                    "type": "boolean"
                                },
                                "request": {
                                    "description": "If the browser supports the Full Screen API this holds the call you need to use to activate it.",
                                    "title": "request",
                                    "type": "string"
                                }
                            },
                            "title": "fullscreen",
                            "type": "object"
                        },
                        "input": {
                            "description": "The Input Device functions.",
                            "properties": {
                                "gamepads": {
                                    "description": "Is navigator.getGamepads available?",
                                    "title": "gamepads",
                                    "type": "boolean"
                                },
                                "mspointer": {
                                    "description": "Is mspointer available?",
                                    "title": "mspointer",
                                    "type": "boolean"
                                },
                                "touch": {
                                    "description": "Is touch available?",
                                    "title": "touch",
                                    "type": "boolean"
                                },
                                "wheelType": {
                                    "description": "The newest type of Wheel/Scroll event supported: 'wheel', 'mousewheel', 'DOMMouseScroll'",
                                    "title": "wheelType",
                                    "type": "string"
                                }
                            },
                            "title": "input",
                            "type": "object"
                        },
                        "os": {
                            "description": "The OS Device functions.",
                            "properties": {
                                "android": {
                                    "description": "Is running on android?",
                                    "title": "android",
                                    "type": "boolean"
                                },
                                "chromeOS": {
                                    "description": "Is running on chromeOS?",
                                    "title": "chromeOS",
                                    "type": "boolean"
                                },
                                "cocoonJS": {
                                    "description": "Is the game running under CocoonJS?",
                                    "title": "cocoonJS",
                                    "type": "boolean"
                                },
                                "cocoonJSApp": {
                                    "description": "Is this game running with CocoonJS.App?",
                                    "title": "cocoonJSApp",
                                    "type": "boolean"
                                },
                                "cordova": {
                                    "description": "Is the game running under Apache Cordova?",
                                    "title": "cordova",
                                    "type": "boolean"
                                },
                                "crosswalk": {
                                    "description": "Is the game running under the Intel Crosswalk XDK?",
                                    "title": "crosswalk",
                                    "type": "boolean"
                                },
                                "desktop": {
                                    "description": "Is running on a desktop?",
                                    "title": "desktop",
                                    "type": "boolean"
                                },
                                "ejecta": {
                                    "description": "Is the game running under Ejecta?",
                                    "title": "ejecta",
                                    "type": "boolean"
                                },
                                "electron": {
                                    "description": "Is the game running under GitHub Electron?",
                                    "title": "electron",
                                    "type": "boolean"
                                },
                                "iOS": {
                                    "description": "Is running on iOS?",
                                    "title": "iOS",
                                    "type": "boolean"
                                },
                                "iOSVersion": {
                                    "description": "If running in iOS this will contain the major version number.",
                                    "title": "iOSVersion",
                                    "type": "number"
                                },
                                "iPad": {
                                    "description": "Is running on iPad?",
                                    "title": "iPad",
                                    "type": "boolean"
                                },
                                "iPhone": {
                                    "description": "Is running on iPhone?",
                                    "title": "iPhone",
                                    "type": "boolean"
                                },
                                "kindle": {
                                    "description": "Is running on an Amazon Kindle?",
                                    "title": "kindle",
                                    "type": "boolean"
                                },
                                "linux": {
                                    "description": "Is running on linux?",
                                    "title": "linux",
                                    "type": "boolean"
                                },
                                "macOS": {
                                    "description": "Is running on macOS?",
                                    "title": "macOS",
                                    "type": "boolean"
                                },
                                "node": {
                                    "description": "Is the game running under Node.js?",
                                    "title": "node",
                                    "type": "boolean"
                                },
                                "nodeWebkit": {
                                    "description": "Is the game running under Node-Webkit?",
                                    "title": "nodeWebkit",
                                    "type": "boolean"
                                },
                                "pixelRatio": {
                                    "description": "PixelRatio of the host device?",
                                    "title": "pixelRatio",
                                    "type": "number"
                                },
                                "webApp": {
                                    "description": "Set to true if running as a WebApp, i.e. within a WebView",
                                    "title": "webApp",
                                    "type": "boolean"
                                },
                                "windows": {
                                    "description": "Is running on windows?",
                                    "title": "windows",
                                    "type": "boolean"
                                },
                                "windowsPhone": {
                                    "description": "Is running on a Windows Phone?",
                                    "title": "windowsPhone",
                                    "type": "boolean"
                                }
                            },
                            "title": "os",
                            "type": "object"
                        },
                        "video": {
                            "description": "The Video Device functions.",
                            "properties": {
                                "h264Video": {
                                    "description": "Can this device play h264 mp4 video files?",
                                    "title": "h264Video",
                                    "type": "boolean"
                                },
                                "hlsVideo": {
                                    "description": "Can this device play hls video files?",
                                    "title": "hlsVideo",
                                    "type": "boolean"
                                },
                                "mp4Video": {
                                    "description": "Can this device play h264 mp4 video files?",
                                    "title": "mp4Video",
                                    "type": "boolean"
                                },
                                "oggVideo": {
                                    "description": "Can this device play ogg video files?",
                                    "title": "oggVideo",
                                    "type": "boolean"
                                },
                                "vp9Video": {
                                    "description": "Can this device play vp9 video files?",
                                    "title": "vp9Video",
                                    "type": "boolean"
                                },
                                "webmVideo": {
                                    "description": "Can this device play webm video files?",
                                    "title": "webmVideo",
                                    "type": "boolean"
                                }
                            },
                            "title": "video",
                            "type": "object"
                        }
                    },
                    "title": "device",
                    "type": "object"
                },
                "domContainer": {
                    "$ref": "#/definitions/HTMLDivElement",
                    "description": "A reference to an HTML Div Element used as a DOM Element Container.\n\nOnly set if `createDOMContainer` is `true` in the game config (by default it is `false`) and\nif you provide a parent element to insert the Phaser Game inside.\n\nSee the DOM Element Game Object for more details.",
                    "title": "domContainer"
                },
                "events": {
                    "$ref": "#/definitions/Phaser.Events.EventEmitter",
                    "description": "An Event Emitter which is used to broadcast game-level events from the global systems.",
                    "title": "events"
                },
                "facebook": {
                    "$ref": "#/definitions/Phaser.FacebookInstantGamesPlugin",
                    "description": "An instance of the Facebook Instant Games Plugin.\n\nThis will only be available if the plugin has been built into Phaser,\nor you're using the special Facebook Instant Games custom build.",
                    "title": "facebook"
                },
                "hasFocus": {
                    "description": "Does the window the game is running in currently have focus or not?\nThis is modified by the VisibilityHandler.",
                    "title": "hasFocus",
                    "type": "boolean"
                },
                "input": {
                    "$ref": "#/definitions/Phaser.Input.InputManager",
                    "description": "An instance of the Input Manager.\n\nThe Input Manager is a global system responsible for the capture of browser-level input events.",
                    "title": "input"
                },
                "isBooted": {
                    "description": "A flag indicating when this Game instance has finished its boot process.",
                    "title": "isBooted",
                    "type": "boolean"
                },
                "isOver": {
                    "description": "Is the mouse pointer currently over the game canvas or not?\nThis is modified by the VisibilityHandler.",
                    "title": "isOver",
                    "type": "boolean"
                },
                "isRunning": {
                    "description": "A flag indicating if this Game is currently running its game step or not.",
                    "title": "isRunning",
                    "type": "boolean"
                },
                "loop": {
                    "$ref": "#/definitions/Phaser.Boot.TimeStep",
                    "description": "An instance of the Time Step.\n\nThe Time Step is a global system responsible for setting-up and responding to the browser frame events, processing\nthem and calculating delta values. It then automatically calls the game step.",
                    "title": "loop"
                },
                "plugins": {
                    "$ref": "#/definitions/Phaser.Plugins.PluginManager",
                    "description": "An instance of the Plugin Manager.\n\nThe Plugin Manager is a global system that allows plugins to register themselves with it, and can then install\nthose plugins into Scenes as required.",
                    "title": "plugins"
                },
                "registry": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "An instance of the Data Manager",
                    "title": "registry"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Renderer.Canvas.CanvasRenderer"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLRenderer"
                        }
                    ],
                    "description": "A reference to either the Canvas or WebGL Renderer that this Game is using.",
                    "title": "renderer"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scenes.SceneManager",
                    "description": "An instance of the Scene Manager.\n\nThe Scene Manager is a global system responsible for creating, modifying and updating the Scenes in your game.",
                    "title": "scene"
                },
                "sound": {
                    "$ref": "#/definitions/Phaser.Sound.BaseSoundManager",
                    "description": "An instance of the base Sound Manager.\n\nThe Sound Manager is a global system responsible for the playback and updating of all audio in your game.",
                    "title": "sound"
                },
                "textures": {
                    "$ref": "#/definitions/Phaser.Textures.TextureManager",
                    "description": "An instance of the Texture Manager.\n\nThe Texture Manager is a global system responsible for managing all textures being used by your game.",
                    "title": "textures"
                }
            },
            "title": "Phaser.Game",
            "type": "object"
        },
        "Phaser.GameObjects.Components.Animation": {
            "properties": {
                "accumulator": {
                    "description": "Internal time overflow accumulator.",
                    "title": "accumulator",
                    "type": "number"
                },
                "animationManager": {
                    "$ref": "#/definitions/Phaser.Animations.AnimationManager",
                    "description": "A reference to the global Animation Manager.",
                    "title": "animationManager"
                },
                "currentAnim": {
                    "$ref": "#/definitions/Phaser.Animations.Animation",
                    "description": "The current Animation loaded into this Animation Controller.",
                    "title": "currentAnim"
                },
                "currentFrame": {
                    "$ref": "#/definitions/Phaser.Animations.AnimationFrame",
                    "description": "The current AnimationFrame being displayed by this Animation Controller.",
                    "title": "currentFrame"
                },
                "duration": {
                    "description": "How long the animation should play for, in milliseconds.\nIf the `frameRate` property has been set then it overrides this value,\notherwise the `frameRate` is derived from `duration`.",
                    "title": "duration",
                    "type": "number"
                },
                "forward": {
                    "description": "Will the playhead move forwards (`true`) or in reverse (`false`).",
                    "title": "forward",
                    "type": "boolean"
                },
                "frameRate": {
                    "description": "The frame rate of playback in frames per second.\nThe default is 24 if the `duration` property is `null`.",
                    "title": "frameRate",
                    "type": "number"
                },
                "isPaused": {
                    "description": "`true` if the current animation is paused, otherwise `false`.",
                    "title": "isPaused",
                    "type": "boolean"
                },
                "isPlaying": {
                    "description": "Is an animation currently playing or not?",
                    "title": "isPlaying",
                    "type": "boolean"
                },
                "msPerFrame": {
                    "description": "ms per frame, not including frame specific modifiers that may be present in the Animation data.",
                    "title": "msPerFrame",
                    "type": "number"
                },
                "nextTick": {
                    "description": "The time point at which the next animation frame will change.",
                    "title": "nextTick",
                    "type": "number"
                },
                "parent": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "The Game Object to which this animation controller belongs.",
                    "title": "parent"
                },
                "pendingRepeat": {
                    "description": "An internal flag keeping track of pending repeats.",
                    "title": "pendingRepeat",
                    "type": "boolean"
                },
                "repeatCounter": {
                    "description": "An internal counter keeping track of how many repeats are left to play.",
                    "title": "repeatCounter",
                    "type": "number"
                },
                "skipMissedFrames": {
                    "description": "Skip frames if the time lags, or always advanced anyway?",
                    "title": "skipMissedFrames",
                    "type": "boolean"
                }
            },
            "title": "Phaser.GameObjects.Components.Animation",
            "type": "object"
        },
        "Phaser.GameObjects.Components.TransformMatrix": {
            "description": "A Matrix used for display transformations for rendering.\n\nIt is represented like so:\n\n```\n             * | a | c | tx |\n             * | b | d | ty |\n             * | 0 | 0 | 1  |\n             * ```",
            "properties": {
                "a": {
                    "description": "The Scale X value.",
                    "title": "a",
                    "type": "number"
                },
                "b": {
                    "description": "The Shear Y value.",
                    "title": "b",
                    "type": "number"
                },
                "c": {
                    "description": "The Shear X value.",
                    "title": "c",
                    "type": "number"
                },
                "d": {
                    "description": "The Scale Y value.",
                    "title": "d",
                    "type": "number"
                },
                "decomposedMatrix": {
                    "additionalProperties": true,
                    "description": "The decomposed matrix.",
                    "properties": {
                    },
                    "title": "decomposedMatrix",
                    "type": "object"
                },
                "e": {
                    "description": "The Translate X value.",
                    "title": "e",
                    "type": "number"
                },
                "f": {
                    "description": "The Translate Y value.",
                    "title": "f",
                    "type": "number"
                },
                "matrix": {
                    "additionalProperties": false,
                    "description": "A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\nof bytes could not be allocated an exception is raised.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "title": "matrix",
                    "type": "object"
                },
                "rotation": {
                    "description": "The rotation of the Matrix.",
                    "title": "rotation",
                    "type": "number"
                },
                "scaleX": {
                    "description": "The horizontal scale of the Matrix.",
                    "title": "scaleX",
                    "type": "number"
                },
                "scaleY": {
                    "description": "The vertical scale of the Matrix.",
                    "title": "scaleY",
                    "type": "number"
                },
                "tx": {
                    "description": "The Translate X value.",
                    "title": "tx",
                    "type": "number"
                },
                "ty": {
                    "description": "The Translate Y value.",
                    "title": "ty",
                    "type": "number"
                }
            },
            "title": "Phaser.GameObjects.Components.TransformMatrix",
            "type": "object"
        },
        "Phaser.GameObjects.Container": {
            "description": "A Container Game Object.\n\nA Container, as the name implies, can 'contain' other types of Game Object.\nWhen a Game Object is added to a Container, the Container becomes responsible for the rendering of it.\nBy default it will be removed from the Display List and instead added to the Containers own internal list.\n\nThe position of the Game Object automatically becomes relative to the position of the Container.\n\nWhen the Container is rendered, all of its children are rendered as well, in the order in which they exist\nwithin the Container. Container children can be repositioned using methods such as `MoveUp`, `MoveDown` and `SendToBack`.\n\nIf you modify a transform property of the Container, such as `Container.x` or `Container.rotation` then it will\nautomatically influence all children as well.\n\nContainers can include other Containers for deeply nested transforms.\n\nContainers can have masks set on them and can be used as a mask too. However, Container children cannot be masked.\nThe masks do not 'stack up'. Only a Container on the root of the display list will use its mask.\n\nContainers can be enabled for input. Because they do not have a texture you need to provide a shape for them\nto use as their hit area. Container children can also be enabled for input, independent of the Container.\n\nContainers can be given a physics body for either Arcade Physics, Impact Physics or Matter Physics. However,\nif Container _children_ are enabled for physics you may get unexpected results, such as offset bodies,\nif the Container itself, or any of its ancestors, is positioned anywhere other than at 0 x 0. Container children\nwith physics do not factor in the Container due to the excessive extra calculations needed. Please structure\nyour game to work around this.\n\nIt's important to understand the impact of using Containers. They add additional processing overhead into\nevery one of their children. The deeper you nest them, the more the cost escalates. This is especially true\nfor input events. You also loose the ability to set the display depth of Container children in the same\nflexible manner as those not within them. In short, don't use them for the sake of it. You pay a small cost\nevery time you create one, try to structure your game around avoiding that where possible.",
            "properties": {
                "active": {
                    "description": "The active state of this Game Object.\nA Game Object with an active state of `true` is processed by the Scenes UpdateList, if added to it.\nAn active object is one which is having its logic and internal systems updated.",
                    "title": "active",
                    "type": "boolean"
                },
                "alpha": {
                    "description": "The alpha value of the Game Object.\n\nThis is a global value, impacting the entire Game Object, not just a region of it.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaBottomLeft": {
                    "description": "The alpha value starting from the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomLeft",
                    "type": "number"
                },
                "alphaBottomRight": {
                    "description": "The alpha value starting from the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomRight",
                    "type": "number"
                },
                "alphaTopLeft": {
                    "description": "The alpha value starting from the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopLeft",
                    "type": "number"
                },
                "alphaTopRight": {
                    "description": "The alpha value starting from the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopRight",
                    "type": "number"
                },
                "angle": {
                    "description": "The angle of this Game Object as expressed in degrees.\n\nWhere 0 is to the right, 90 is down, 180 is left.\n\nIf you prefer to work in radians, see the `rotation` property instead.",
                    "title": "angle",
                    "type": "integer"
                },
                "blendMode": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.BlendModes"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Sets the Blend Mode being used by this Game Object.\n\nThis can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n\nUnder WebGL only the following Blend Modes are available:\n\n* ADD\n* MULTIPLY\n* SCREEN\n\nCanvas has more available depending on browser support.\n\nYou can also create your own custom Blend Modes in WebGL.\n\nBlend modes have different effects under Canvas and WebGL, and from browser to browser, depending\non support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\nreasons try to be careful about the construction of your Scene and the frequency of which blend modes\nare used.",
                    "title": "blendMode"
                },
                "body": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "properties": {
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Arcade.Body"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body"
                        }
                    ],
                    "description": "If this Game Object is enabled for physics then this property will contain a reference to a Physics Body.",
                    "title": "body"
                },
                "cameraFilter": {
                    "description": "A bitmask that controls if this Game Object is drawn by a Camera or not.\nNot usually set directly, instead call `Camera.ignore`, however you can\nset this property directly using the Camera.id property:",
                    "title": "cameraFilter",
                    "type": "number"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A Data Manager.\nIt allows you to store, query and get key/value paired information specific to this Game Object.\n`null` by default. Automatically created if you use `getData` or `setData` or `setDataEnabled`.",
                    "title": "data"
                },
                "depth": {
                    "description": "The depth of this Game Object within the Scene.\n\nThe depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\nof Game Objects, without actually moving their position in the display list.\n\nThe depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\nvalue will always render in front of one with a lower value.\n\nSetting the depth will queue a depth sort event within the Scene.",
                    "title": "depth",
                    "type": "number"
                },
                "displayHeight": {
                    "description": "The displayed height of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayHeight",
                    "type": "number"
                },
                "displayOriginX": {
                    "description": "Internal value to allow Containers to be used for input and physics.\nDo not change this value. It has no effect other than to break things.",
                    "title": "displayOriginX",
                    "type": "number"
                },
                "displayOriginY": {
                    "description": "Internal value to allow Containers to be used for input and physics.\nDo not change this value. It has no effect other than to break things.",
                    "title": "displayOriginY",
                    "type": "number"
                },
                "displayWidth": {
                    "description": "The displayed width of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayWidth",
                    "type": "number"
                },
                "exclusive": {
                    "description": "Does this Container exclusively manage its children?\n\nThe default is `true` which means a child added to this Container cannot\nbelong in another Container, which includes the Scene display list.\n\nIf you disable this then this Container will no longer exclusively manage its children.\nThis allows you to create all kinds of interesting graphical effects, such as replicating\nGame Objects without reparenting them all over the Scene.\nHowever, doing so will prevent children from receiving any kind of input event or have\ntheir physics bodies work by default, as they're no longer a single entity on the\ndisplay list, but are being replicated where-ever this Container is.",
                    "title": "exclusive",
                    "type": "boolean"
                },
                "first": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "Returns the first Game Object within the Container, or `null` if it is empty.\n\nYou can move the cursor by calling `Container.next` and `Container.previous`.",
                    "title": "first"
                },
                "height": {
                    "description": "The native (un-scaled) height of this Game Object.\n\nChanging this value will not change the size that the Game Object is rendered in-game.\nFor that you need to either set the scale of the Game Object (`setScale`) or use\nthe `displayHeight` property.",
                    "title": "height",
                    "type": "number"
                },
                "ignoreDestroy": {
                    "description": "This Game Object will ignore all calls made to its destroy method if this flag is set to `true`.\nThis includes calls that may come from a Group, Container or the Scene itself.\nWhile it allows you to persist a Game Object across Scenes, please understand you are entirely\nresponsible for managing references to and from this Game Object.",
                    "title": "ignoreDestroy",
                    "type": "boolean"
                },
                "input": {
                    "description": "If this Game Object is enabled for input then this property will contain an InteractiveObject instance.\nNot usually set directly. Instead call `GameObject.setInteractive()`.",
                    "properties": {
                        "camera": {
                            "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                            "description": "The most recent Camera to be tested against this Interactive Object.",
                            "title": "camera"
                        },
                        "cursor": {
                            "description": "Should this Interactive Object change the cursor (via css) when over? (desktop only)",
                            "title": "cursor",
                            "type": [
                                "string",
                                "boolean"
                            ]
                        },
                        "dragStartX": {
                            "description": "The x coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartX",
                            "type": "number"
                        },
                        "dragStartY": {
                            "description": "The y coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartY",
                            "type": "number"
                        },
                        "dragState": {
                            "description": "The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "title": "dragState",
                            "type": "number"
                        },
                        "dragX": {
                            "description": "The x coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragX",
                            "type": "number"
                        },
                        "dragY": {
                            "description": "The y coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragY",
                            "type": "number"
                        },
                        "draggable": {
                            "description": "Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.",
                            "title": "draggable",
                            "type": "boolean"
                        },
                        "dropZone": {
                            "description": "Is this Interactive Object a drag-targets drop zone? Set when the object is created.",
                            "title": "dropZone",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "Is this Interactive Object currently enabled for input events?",
                            "title": "enabled",
                            "type": "boolean"
                        },
                        "gameObject": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "The Game Object to which this Interactive Object is bound.",
                            "title": "gameObject"
                        },
                        "hitArea": {
                            "description": "The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.",
                            "title": "hitArea"
                        },
                        "hitAreaCallback": {
                            "description": "The 'contains' check callback that the hit area shape will use for all hit tests.",
                            "title": "hitAreaCallback",
                            "type": "object"
                        },
                        "localX": {
                            "description": "The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localX",
                            "type": "number"
                        },
                        "localY": {
                            "description": "The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localY",
                            "type": "number"
                        },
                        "target": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "An optional drop target for a draggable Interactive Object.",
                            "title": "target"
                        }
                    },
                    "title": "input",
                    "type": "object"
                },
                "last": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "Returns the last Game Object within the Container, or `null` if it is empty.\n\nYou can move the cursor by calling `Container.next` and `Container.previous`.",
                    "title": "last"
                },
                "length": {
                    "description": "The number of Game Objects inside this Container.",
                    "title": "length",
                    "type": "integer"
                },
                "list": {
                    "description": "An array holding the children of this Container.",
                    "items": {
                        "$ref": "#/definitions/Phaser.GameObjects.GameObject"
                    },
                    "title": "list",
                    "type": "array"
                },
                "localTransform": {
                    "$ref": "#/definitions/Phaser.GameObjects.Components.TransformMatrix",
                    "description": "Internal Transform Matrix used for local space conversion.",
                    "title": "localTransform"
                },
                "mask": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.BitmapMask"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.GeometryMask"
                        }
                    ],
                    "description": "The Mask this Game Object is using during render.",
                    "title": "mask"
                },
                "maxSize": {
                    "description": "Containers can have an optional maximum size. If set to anything above 0 it\nwill constrict the addition of new Game Objects into the Container, capping off\nthe maximum limit the Container can grow in size to.",
                    "title": "maxSize",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of this Game Object.\nEmpty by default and never populated by Phaser, this is left for developers to use.",
                    "title": "name",
                    "type": "string"
                },
                "next": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "Returns the next Game Object within the Container, or `null` if it is empty.\n\nYou can move the cursor by calling `Container.next` and `Container.previous`.",
                    "title": "next"
                },
                "originX": {
                    "description": "Internal value to allow Containers to be used for input and physics.\nDo not change this value. It has no effect other than to break things.",
                    "title": "originX",
                    "type": "number"
                },
                "originY": {
                    "description": "Internal value to allow Containers to be used for input and physics.\nDo not change this value. It has no effect other than to break things.",
                    "title": "originY",
                    "type": "number"
                },
                "parentContainer": {
                    "$ref": "#/definitions/Phaser.GameObjects.Container",
                    "description": "The parent Container of this Game Object, if it has one.",
                    "title": "parentContainer"
                },
                "position": {
                    "description": "The cursor position.",
                    "title": "position",
                    "type": "integer"
                },
                "previous": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "Returns the previous Game Object within the Container, or `null` if it is empty.\n\nYou can move the cursor by calling `Container.next` and `Container.previous`.",
                    "title": "previous"
                },
                "renderFlags": {
                    "description": "The flags that are compared against `RENDER_MASK` to determine if this Game Object will render or not.\nThe bits are 0001 | 0010 | 0100 | 1000 set by the components Visible, Alpha, Transform and Texture respectively.\nIf those components are not used by your custom class then you can use this bitmask as you wish.",
                    "title": "renderFlags",
                    "type": "integer"
                },
                "rotation": {
                    "description": "The angle of this Game Object in radians.\n\nIf you prefer to work in degrees, see the `angle` property instead.",
                    "title": "rotation",
                    "type": "number"
                },
                "scaleX": {
                    "description": "The horizontal scale of this Game Object.",
                    "title": "scaleX",
                    "type": "number"
                },
                "scaleY": {
                    "description": "The vertical scale of this Game Object.",
                    "title": "scaleY",
                    "type": "number"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object belongs.\nGame Objects can only belong to one Scene.",
                    "title": "scene"
                },
                "scrollFactorX": {
                    "description": "The horizontal scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorX",
                    "type": "number"
                },
                "scrollFactorY": {
                    "description": "The vertical scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorY",
                    "type": "number"
                },
                "tabIndex": {
                    "description": "The Tab Index of the Game Object.\nReserved for future use by plugins and the Input Manager.",
                    "title": "tabIndex",
                    "type": "integer"
                },
                "type": {
                    "description": "A textual representation of this Game Object, i.e. `sprite`.\nUsed internally by Phaser but is available for your own custom classes to populate.",
                    "title": "type",
                    "type": "string"
                },
                "visible": {
                    "description": "The visible state of the Game Object.\n\nAn invisible Game Object will skip rendering, but will still process update logic.",
                    "title": "visible",
                    "type": "boolean"
                },
                "w": {
                    "description": "The w position of this Game Object.",
                    "title": "w",
                    "type": "number"
                },
                "width": {
                    "description": "The native (un-scaled) width of this Game Object.\n\nChanging this value will not change the size that the Game Object is rendered in-game.\nFor that you need to either set the scale of the Game Object (`setScale`) or use\nthe `displayWidth` property.",
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "description": "The x position of this Game Object.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of this Game Object.",
                    "title": "y",
                    "type": "number"
                },
                "z": {
                    "description": "The z position of this Game Object.\nNote: Do not use this value to set the z-index, instead see the `depth` property.",
                    "title": "z",
                    "type": "number"
                }
            },
            "title": "Phaser.GameObjects.Container",
            "type": "object"
        },
        "Phaser.GameObjects.DisplayList": {
            "description": "The Display List plugin.\n\nDisplay Lists belong to a Scene and maintain the list of Game Objects to render every frame.\n\nSome of these Game Objects may also be part of the Scene's [Update List]{@link Phaser.GameObjects.UpdateList}, for updating.",
            "properties": {
                "_sortKey": {
                    "description": "The property key to sort by.",
                    "title": "_sortKey",
                    "type": "string"
                },
                "addCallback": {
                    "$ref": "#/definitions/Function",
                    "description": "A callback that is invoked every time a child is added to this list.",
                    "title": "addCallback"
                },
                "first": {
                    "description": "The first item in the List or `null` for an empty List.",
                    "title": "first",
                    "type": "integer"
                },
                "last": {
                    "description": "The last item in the List, or `null` for an empty List.",
                    "title": "last",
                    "type": "integer"
                },
                "length": {
                    "description": "The number of items inside the List.",
                    "title": "length",
                    "type": "integer"
                },
                "list": {
                    "description": "The objects that belong to this collection.",
                    "items": {
                        "$ref": "#/definitions/Phaser.GameObjects.GameObject"
                    },
                    "title": "list",
                    "type": "array"
                },
                "next": {
                    "description": "The next item in the List, or `null` if the entire List has been traversed.\n\nThis property can be read successively after reading {@link #first} or manually setting the {@link #position} to iterate the List.",
                    "title": "next",
                    "type": "integer"
                },
                "parent": {
                    "description": "The parent of this list.",
                    "title": "parent"
                },
                "position": {
                    "description": "The index of the current element.\n\nThis is used internally when iterating through the list with the {@link #first}, {@link #last}, {@link #get}, and {@link #previous} properties.",
                    "title": "position",
                    "type": "integer"
                },
                "previous": {
                    "description": "The previous item in the List, or `null` if the entire List has been traversed.\n\nThis property can be read successively after reading {@link #last} or manually setting the {@link #position} to iterate the List backwards.",
                    "title": "previous",
                    "type": "integer"
                },
                "removeCallback": {
                    "$ref": "#/definitions/Function",
                    "description": "A callback that is invoked every time a child is removed from this list.",
                    "title": "removeCallback"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene that this Display List belongs to.",
                    "title": "scene"
                },
                "sortChildrenFlag": {
                    "description": "The flag the determines whether Game Objects should be sorted when `depthSort()` is called.",
                    "title": "sortChildrenFlag",
                    "type": "boolean"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "The Scene's Systems.",
                    "title": "systems"
                }
            },
            "title": "Phaser.GameObjects.DisplayList",
            "type": "object"
        },
        "Phaser.GameObjects.GameObject": {
            "description": "The base class that all Game Objects extend.\nYou don't create GameObjects directly and they cannot be added to the display list.\nInstead, use them as the base for your own custom classes.",
            "properties": {
                "active": {
                    "description": "The active state of this Game Object.\nA Game Object with an active state of `true` is processed by the Scenes UpdateList, if added to it.\nAn active object is one which is having its logic and internal systems updated.",
                    "title": "active",
                    "type": "boolean"
                },
                "body": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "properties": {
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Arcade.Body"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body"
                        }
                    ],
                    "description": "If this Game Object is enabled for physics then this property will contain a reference to a Physics Body.",
                    "title": "body"
                },
                "cameraFilter": {
                    "description": "A bitmask that controls if this Game Object is drawn by a Camera or not.\nNot usually set directly, instead call `Camera.ignore`, however you can\nset this property directly using the Camera.id property:",
                    "title": "cameraFilter",
                    "type": "number"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A Data Manager.\nIt allows you to store, query and get key/value paired information specific to this Game Object.\n`null` by default. Automatically created if you use `getData` or `setData` or `setDataEnabled`.",
                    "title": "data"
                },
                "ignoreDestroy": {
                    "description": "This Game Object will ignore all calls made to its destroy method if this flag is set to `true`.\nThis includes calls that may come from a Group, Container or the Scene itself.\nWhile it allows you to persist a Game Object across Scenes, please understand you are entirely\nresponsible for managing references to and from this Game Object.",
                    "title": "ignoreDestroy",
                    "type": "boolean"
                },
                "input": {
                    "description": "If this Game Object is enabled for input then this property will contain an InteractiveObject instance.\nNot usually set directly. Instead call `GameObject.setInteractive()`.",
                    "properties": {
                        "camera": {
                            "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                            "description": "The most recent Camera to be tested against this Interactive Object.",
                            "title": "camera"
                        },
                        "cursor": {
                            "description": "Should this Interactive Object change the cursor (via css) when over? (desktop only)",
                            "title": "cursor",
                            "type": [
                                "string",
                                "boolean"
                            ]
                        },
                        "dragStartX": {
                            "description": "The x coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartX",
                            "type": "number"
                        },
                        "dragStartY": {
                            "description": "The y coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartY",
                            "type": "number"
                        },
                        "dragState": {
                            "description": "The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "title": "dragState",
                            "type": "number"
                        },
                        "dragX": {
                            "description": "The x coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragX",
                            "type": "number"
                        },
                        "dragY": {
                            "description": "The y coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragY",
                            "type": "number"
                        },
                        "draggable": {
                            "description": "Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.",
                            "title": "draggable",
                            "type": "boolean"
                        },
                        "dropZone": {
                            "description": "Is this Interactive Object a drag-targets drop zone? Set when the object is created.",
                            "title": "dropZone",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "Is this Interactive Object currently enabled for input events?",
                            "title": "enabled",
                            "type": "boolean"
                        },
                        "gameObject": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "The Game Object to which this Interactive Object is bound.",
                            "title": "gameObject"
                        },
                        "hitArea": {
                            "description": "The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.",
                            "title": "hitArea"
                        },
                        "hitAreaCallback": {
                            "description": "The 'contains' check callback that the hit area shape will use for all hit tests.",
                            "title": "hitAreaCallback",
                            "type": "object"
                        },
                        "localX": {
                            "description": "The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localX",
                            "type": "number"
                        },
                        "localY": {
                            "description": "The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localY",
                            "type": "number"
                        },
                        "target": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "An optional drop target for a draggable Interactive Object.",
                            "title": "target"
                        }
                    },
                    "title": "input",
                    "type": "object"
                },
                "name": {
                    "description": "The name of this Game Object.\nEmpty by default and never populated by Phaser, this is left for developers to use.",
                    "title": "name",
                    "type": "string"
                },
                "parentContainer": {
                    "$ref": "#/definitions/Phaser.GameObjects.Container",
                    "description": "The parent Container of this Game Object, if it has one.",
                    "title": "parentContainer"
                },
                "renderFlags": {
                    "description": "The flags that are compared against `RENDER_MASK` to determine if this Game Object will render or not.\nThe bits are 0001 | 0010 | 0100 | 1000 set by the components Visible, Alpha, Transform and Texture respectively.\nIf those components are not used by your custom class then you can use this bitmask as you wish.",
                    "title": "renderFlags",
                    "type": "integer"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object belongs.\nGame Objects can only belong to one Scene.",
                    "title": "scene"
                },
                "tabIndex": {
                    "description": "The Tab Index of the Game Object.\nReserved for future use by plugins and the Input Manager.",
                    "title": "tabIndex",
                    "type": "integer"
                },
                "type": {
                    "description": "A textual representation of this Game Object, i.e. `sprite`.\nUsed internally by Phaser but is available for your own custom classes to populate.",
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "Phaser.GameObjects.GameObject",
            "type": "object"
        },
        "Phaser.GameObjects.GameObjectCreator": {
            "description": "The Game Object Creator is a Scene plugin that allows you to quickly create many common\ntypes of Game Objects and return them. Unlike the Game Object Factory, they are not automatically\nadded to the Scene.\n\nGame Objects directly register themselves with the Creator and inject their own creation\nmethods into the class.",
            "properties": {
                "displayList": {
                    "$ref": "#/definitions/Phaser.GameObjects.DisplayList",
                    "description": "A reference to the Scene Display List.",
                    "title": "displayList"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object Creator belongs.",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "A reference to the Scene.Systems.",
                    "title": "systems"
                },
                "updateList;": {
                    "$ref": "#/definitions/Phaser.GameObjects.UpdateList",
                    "description": "A reference to the Scene Update List.",
                    "title": "updateList;"
                }
            },
            "title": "Phaser.GameObjects.GameObjectCreator",
            "type": "object"
        },
        "Phaser.GameObjects.GameObjectFactory": {
            "description": "The Game Object Factory is a Scene plugin that allows you to quickly create many common\ntypes of Game Objects and have them automatically registered with the Scene.\n\nGame Objects directly register themselves with the Factory and inject their own creation\nmethods into the class.",
            "properties": {
                "displayList": {
                    "$ref": "#/definitions/Phaser.GameObjects.DisplayList",
                    "description": "A reference to the Scene Display List.",
                    "title": "displayList"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object Factory belongs.",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "A reference to the Scene.Systems.",
                    "title": "systems"
                },
                "updateList;": {
                    "$ref": "#/definitions/Phaser.GameObjects.UpdateList",
                    "description": "A reference to the Scene Update List.",
                    "title": "updateList;"
                }
            },
            "title": "Phaser.GameObjects.GameObjectFactory",
            "type": "object"
        },
        "Phaser.GameObjects.Graphics": {
            "description": "A Graphics object is a way to draw primitive shapes to your game. Primitives include forms of geometry, such as\nRectangles, Circles, and Polygons. They also include lines, arcs and curves. When you initially create a Graphics\nobject it will be empty.\n\nTo draw to it you must first specify a line style or fill style (or both), draw shapes using paths, and finally\nfill or stroke them. For example:\n\n```javascript\n         * graphics.lineStyle(5, 0xFF00FF, 1.0);\n         * graphics.beginPath();\n         * graphics.moveTo(100, 100);\n         * graphics.lineTo(200, 200);\n         * graphics.closePath();\n         * graphics.strokePath();\n         * ```\n\nThere are also many helpful methods that draw and fill/stroke common shapes for you.\n\n```javascript\n         * graphics.lineStyle(5, 0xFF00FF, 1.0);\n         * graphics.fillStyle(0xFFFFFF, 1.0);\n         * graphics.fillRect(50, 50, 400, 200);\n         * graphics.strokeRect(50, 50, 400, 200);\n         * ```\n\nWhen a Graphics object is rendered it will render differently based on if the game is running under Canvas or WebGL.\nUnder Canvas it will use the HTML Canvas context drawing operations to draw the path.\nUnder WebGL the graphics data is decomposed into polygons. Both of these are expensive processes, especially with\ncomplex shapes.\n\nIf your Graphics object doesn't change much (or at all) once you've drawn your shape to it, then you will help\nperformance by calling {@link Phaser.GameObjects.Graphics#generateTexture}. This will 'bake' the Graphics object into\na Texture, and return it. You can then use this Texture for Sprites or other display objects. If your Graphics object\nupdates frequently then you should avoid doing this, as it will constantly generate new textures, which will consume\nmemory.\n\nAs you can tell, Graphics objects are a bit of a trade-off. While they are extremely useful, you need to be careful\nin their complexity and quantity of them in your game.",
            "properties": {
                "active": {
                    "description": "The active state of this Game Object.\nA Game Object with an active state of `true` is processed by the Scenes UpdateList, if added to it.\nAn active object is one which is having its logic and internal systems updated.",
                    "title": "active",
                    "type": "boolean"
                },
                "alpha": {
                    "description": "The alpha value of the Game Object.\n\nThis is a global value, impacting the entire Game Object, not just a region of it.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaBottomLeft": {
                    "description": "The alpha value starting from the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomLeft",
                    "type": "number"
                },
                "alphaBottomRight": {
                    "description": "The alpha value starting from the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomRight",
                    "type": "number"
                },
                "alphaTopLeft": {
                    "description": "The alpha value starting from the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopLeft",
                    "type": "number"
                },
                "alphaTopRight": {
                    "description": "The alpha value starting from the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopRight",
                    "type": "number"
                },
                "angle": {
                    "description": "The angle of this Game Object as expressed in degrees.\n\nWhere 0 is to the right, 90 is down, 180 is left.\n\nIf you prefer to work in radians, see the `rotation` property instead.",
                    "title": "angle",
                    "type": "integer"
                },
                "blendMode": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.BlendModes"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Sets the Blend Mode being used by this Game Object.\n\nThis can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n\nUnder WebGL only the following Blend Modes are available:\n\n* ADD\n* MULTIPLY\n* SCREEN\n\nCanvas has more available depending on browser support.\n\nYou can also create your own custom Blend Modes in WebGL.\n\nBlend modes have different effects under Canvas and WebGL, and from browser to browser, depending\non support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\nreasons try to be careful about the construction of your Scene and the frequency of which blend modes\nare used.",
                    "title": "blendMode"
                },
                "body": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "properties": {
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Arcade.Body"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body"
                        }
                    ],
                    "description": "If this Game Object is enabled for physics then this property will contain a reference to a Physics Body.",
                    "title": "body"
                },
                "cameraFilter": {
                    "description": "A bitmask that controls if this Game Object is drawn by a Camera or not.\nNot usually set directly, instead call `Camera.ignore`, however you can\nset this property directly using the Camera.id property:",
                    "title": "cameraFilter",
                    "type": "number"
                },
                "commandBuffer": {
                    "description": "The array of commands used to render the Graphics.",
                    "items": {
                    },
                    "title": "commandBuffer",
                    "type": "array"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A Data Manager.\nIt allows you to store, query and get key/value paired information specific to this Game Object.\n`null` by default. Automatically created if you use `getData` or `setData` or `setDataEnabled`.",
                    "title": "data"
                },
                "defaultFillAlpha": {
                    "description": "The default fill alpha for shapes rendered by this Graphics object.",
                    "title": "defaultFillAlpha",
                    "type": "number"
                },
                "defaultFillColor": {
                    "description": "The default fill color for shapes rendered by this Graphics object.",
                    "title": "defaultFillColor",
                    "type": "number"
                },
                "defaultPipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The initial WebGL pipeline of this Game Object.",
                    "title": "defaultPipeline"
                },
                "defaultStrokeAlpha": {
                    "description": "The default stroke alpha for shapes rendered by this Graphics object.",
                    "title": "defaultStrokeAlpha",
                    "type": "number"
                },
                "defaultStrokeColor": {
                    "description": "The default stroke color for shapes rendered by this Graphics object.",
                    "title": "defaultStrokeColor",
                    "type": "number"
                },
                "defaultStrokeWidth": {
                    "description": "The default stroke width for shapes rendered by this Graphics object.",
                    "title": "defaultStrokeWidth",
                    "type": "number"
                },
                "depth": {
                    "description": "The depth of this Game Object within the Scene.\n\nThe depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\nof Game Objects, without actually moving their position in the display list.\n\nThe depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\nvalue will always render in front of one with a lower value.\n\nSetting the depth will queue a depth sort event within the Scene.",
                    "title": "depth",
                    "type": "number"
                },
                "displayOriginX": {
                    "description": "The horizontal display origin of the Graphics.",
                    "title": "displayOriginX",
                    "type": "number"
                },
                "displayOriginY": {
                    "description": "The vertical display origin of the Graphics.",
                    "title": "displayOriginY",
                    "type": "number"
                },
                "ignoreDestroy": {
                    "description": "This Game Object will ignore all calls made to its destroy method if this flag is set to `true`.\nThis includes calls that may come from a Group, Container or the Scene itself.\nWhile it allows you to persist a Game Object across Scenes, please understand you are entirely\nresponsible for managing references to and from this Game Object.",
                    "title": "ignoreDestroy",
                    "type": "boolean"
                },
                "input": {
                    "description": "If this Game Object is enabled for input then this property will contain an InteractiveObject instance.\nNot usually set directly. Instead call `GameObject.setInteractive()`.",
                    "properties": {
                        "camera": {
                            "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                            "description": "The most recent Camera to be tested against this Interactive Object.",
                            "title": "camera"
                        },
                        "cursor": {
                            "description": "Should this Interactive Object change the cursor (via css) when over? (desktop only)",
                            "title": "cursor",
                            "type": [
                                "string",
                                "boolean"
                            ]
                        },
                        "dragStartX": {
                            "description": "The x coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartX",
                            "type": "number"
                        },
                        "dragStartY": {
                            "description": "The y coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartY",
                            "type": "number"
                        },
                        "dragState": {
                            "description": "The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "title": "dragState",
                            "type": "number"
                        },
                        "dragX": {
                            "description": "The x coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragX",
                            "type": "number"
                        },
                        "dragY": {
                            "description": "The y coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragY",
                            "type": "number"
                        },
                        "draggable": {
                            "description": "Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.",
                            "title": "draggable",
                            "type": "boolean"
                        },
                        "dropZone": {
                            "description": "Is this Interactive Object a drag-targets drop zone? Set when the object is created.",
                            "title": "dropZone",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "Is this Interactive Object currently enabled for input events?",
                            "title": "enabled",
                            "type": "boolean"
                        },
                        "gameObject": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "The Game Object to which this Interactive Object is bound.",
                            "title": "gameObject"
                        },
                        "hitArea": {
                            "description": "The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.",
                            "title": "hitArea"
                        },
                        "hitAreaCallback": {
                            "description": "The 'contains' check callback that the hit area shape will use for all hit tests.",
                            "title": "hitAreaCallback",
                            "type": "object"
                        },
                        "localX": {
                            "description": "The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localX",
                            "type": "number"
                        },
                        "localY": {
                            "description": "The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localY",
                            "type": "number"
                        },
                        "target": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "An optional drop target for a draggable Interactive Object.",
                            "title": "target"
                        }
                    },
                    "title": "input",
                    "type": "object"
                },
                "mask": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.BitmapMask"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.GeometryMask"
                        }
                    ],
                    "description": "The Mask this Game Object is using during render.",
                    "title": "mask"
                },
                "name": {
                    "description": "The name of this Game Object.\nEmpty by default and never populated by Phaser, this is left for developers to use.",
                    "title": "name",
                    "type": "string"
                },
                "parentContainer": {
                    "$ref": "#/definitions/Phaser.GameObjects.Container",
                    "description": "The parent Container of this Game Object, if it has one.",
                    "title": "parentContainer"
                },
                "pipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The current WebGL pipeline of this Game Object.",
                    "title": "pipeline"
                },
                "renderFlags": {
                    "description": "The flags that are compared against `RENDER_MASK` to determine if this Game Object will render or not.\nThe bits are 0001 | 0010 | 0100 | 1000 set by the components Visible, Alpha, Transform and Texture respectively.\nIf those components are not used by your custom class then you can use this bitmask as you wish.",
                    "title": "renderFlags",
                    "type": "integer"
                },
                "rotation": {
                    "description": "The angle of this Game Object in radians.\n\nIf you prefer to work in degrees, see the `angle` property instead.",
                    "title": "rotation",
                    "type": "number"
                },
                "scaleX": {
                    "description": "The horizontal scale of this Game Object.",
                    "title": "scaleX",
                    "type": "number"
                },
                "scaleY": {
                    "description": "The vertical scale of this Game Object.",
                    "title": "scaleY",
                    "type": "number"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object belongs.\nGame Objects can only belong to one Scene.",
                    "title": "scene"
                },
                "scrollFactorX": {
                    "description": "The horizontal scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorX",
                    "type": "number"
                },
                "scrollFactorY": {
                    "description": "The vertical scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorY",
                    "type": "number"
                },
                "tabIndex": {
                    "description": "The Tab Index of the Game Object.\nReserved for future use by plugins and the Input Manager.",
                    "title": "tabIndex",
                    "type": "integer"
                },
                "type": {
                    "description": "A textual representation of this Game Object, i.e. `sprite`.\nUsed internally by Phaser but is available for your own custom classes to populate.",
                    "title": "type",
                    "type": "string"
                },
                "visible": {
                    "description": "The visible state of the Game Object.\n\nAn invisible Game Object will skip rendering, but will still process update logic.",
                    "title": "visible",
                    "type": "boolean"
                },
                "w": {
                    "description": "The w position of this Game Object.",
                    "title": "w",
                    "type": "number"
                },
                "x": {
                    "description": "The x position of this Game Object.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of this Game Object.",
                    "title": "y",
                    "type": "number"
                },
                "z": {
                    "description": "The z position of this Game Object.\nNote: Do not use this value to set the z-index, instead see the `depth` property.",
                    "title": "z",
                    "type": "number"
                }
            },
            "title": "Phaser.GameObjects.Graphics",
            "type": "object"
        },
        "Phaser.GameObjects.Light": {
            "description": "A 2D point light.\n\nThese are typically created by a {@link Phaser.GameObjects.LightsManager}, available from within a scene via `this.lights`.\n\nAny Game Objects using the Light2D pipeline will then be affected by these Lights.\n\nThey can also simply be used to represent a point light for your own purposes.",
            "properties": {
                "b": {
                    "description": "The blue color of the light. A value between 0 and 1.",
                    "title": "b",
                    "type": "number"
                },
                "g": {
                    "description": "The green color of the light. A value between 0 and 1.",
                    "title": "g",
                    "type": "number"
                },
                "intensity": {
                    "description": "The intensity of the light.",
                    "title": "intensity",
                    "type": "number"
                },
                "r": {
                    "description": "The red color of the light. A value between 0 and 1.",
                    "title": "r",
                    "type": "number"
                },
                "radius": {
                    "description": "The radius of the light.",
                    "title": "radius",
                    "type": "number"
                },
                "scrollFactorX": {
                    "description": "The horizontal scroll factor of the light.",
                    "title": "scrollFactorX",
                    "type": "number"
                },
                "scrollFactorY": {
                    "description": "The vertical scroll factor of the light.",
                    "title": "scrollFactorY",
                    "type": "number"
                },
                "x": {
                    "description": "The horizontal position of the light.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The vertical position of the light.",
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "Phaser.GameObjects.Light",
            "type": "object"
        },
        "Phaser.GameObjects.LightsManager": {
            "description": "Manages Lights for a Scene.\n\nAffects the rendering of Game Objects using the `Light2D` pipeline.",
            "properties": {
                "active": {
                    "description": "Whether the Lights Manager is enabled.",
                    "title": "active",
                    "type": "boolean"
                },
                "ambientColor": {
                    "$ref": "#/definitions/Object",
                    "description": "The ambient color.",
                    "title": "ambientColor"
                },
                "culledLights": {
                    "description": "Lights that have been culled from a Camera's viewport.\n\nLights in this list will not be rendered.",
                    "items": {
                        "$ref": "#/definitions/Phaser.GameObjects.Light"
                    },
                    "title": "culledLights",
                    "type": "array"
                },
                "lightPool": {
                    "description": "The pool of Lights.\n\nUsed to recycle removed Lights for a more efficient use of memory.",
                    "items": {
                        "$ref": "#/definitions/Phaser.GameObjects.Light"
                    },
                    "title": "lightPool",
                    "type": "array"
                },
                "lights": {
                    "description": "The Lights in the Scene.",
                    "items": {
                        "$ref": "#/definitions/Phaser.GameObjects.Light"
                    },
                    "title": "lights",
                    "type": "array"
                },
                "maxLights": {
                    "description": "The maximum number of lights that a single Camera and the lights shader can process.\nChange this via the `maxLights` property in your game config, as it cannot be changed at runtime.",
                    "title": "maxLights",
                    "type": "integer"
                }
            },
            "title": "Phaser.GameObjects.LightsManager",
            "type": "object"
        },
        "Phaser.GameObjects.RenderTexture": {
            "description": "A Render Texture.\n\nA Render Texture is a special texture that allows any number of Game Objects to be drawn to it. You can take many complex objects and\ndraw them all to this one texture, which can they be used as the texture for other Game Object's. It's a way to generate dynamic\ntextures at run-time that are WebGL friendly and don't invoke expensive GPU uploads.",
            "properties": {
                "active": {
                    "description": "The active state of this Game Object.\nA Game Object with an active state of `true` is processed by the Scenes UpdateList, if added to it.\nAn active object is one which is having its logic and internal systems updated.",
                    "title": "active",
                    "type": "boolean"
                },
                "alpha": {
                    "description": "The alpha value of the Game Object.\n\nThis is a global value, impacting the entire Game Object, not just a region of it.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaBottomLeft": {
                    "description": "The alpha value starting from the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomLeft",
                    "type": "number"
                },
                "alphaBottomRight": {
                    "description": "The alpha value starting from the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomRight",
                    "type": "number"
                },
                "alphaTopLeft": {
                    "description": "The alpha value starting from the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopLeft",
                    "type": "number"
                },
                "alphaTopRight": {
                    "description": "The alpha value starting from the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopRight",
                    "type": "number"
                },
                "angle": {
                    "description": "The angle of this Game Object as expressed in degrees.\n\nWhere 0 is to the right, 90 is down, 180 is left.\n\nIf you prefer to work in radians, see the `rotation` property instead.",
                    "title": "angle",
                    "type": "integer"
                },
                "blendMode": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.BlendModes"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Sets the Blend Mode being used by this Game Object.\n\nThis can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n\nUnder WebGL only the following Blend Modes are available:\n\n* ADD\n* MULTIPLY\n* SCREEN\n\nCanvas has more available depending on browser support.\n\nYou can also create your own custom Blend Modes in WebGL.\n\nBlend modes have different effects under Canvas and WebGL, and from browser to browser, depending\non support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\nreasons try to be careful about the construction of your Scene and the frequency of which blend modes\nare used.",
                    "title": "blendMode"
                },
                "body": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "properties": {
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Arcade.Body"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body"
                        }
                    ],
                    "description": "If this Game Object is enabled for physics then this property will contain a reference to a Physics Body.",
                    "title": "body"
                },
                "camera": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.BaseCamera",
                    "description": "An internal Camera that can be used to move around the Render Texture.\nControl it just like you would any Scene Camera. The difference is that it only impacts the placement of what\nis drawn to the Render Texture. You can scroll, zoom and rotate this Camera.",
                    "title": "camera"
                },
                "cameraFilter": {
                    "description": "A bitmask that controls if this Game Object is drawn by a Camera or not.\nNot usually set directly, instead call `Camera.ignore`, however you can\nset this property directly using the Camera.id property:",
                    "title": "cameraFilter",
                    "type": "number"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "The HTML Canvas Element that the Render Texture is drawing to.\nThis is only populated if Phaser is running with the Canvas Renderer.",
                    "title": "canvas"
                },
                "context": {
                    "$ref": "#/definitions/CanvasRenderingContext2D",
                    "description": "A reference to the Rendering Context belonging to the Canvas Element this Render Texture is drawing to.",
                    "title": "context"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A Data Manager.\nIt allows you to store, query and get key/value paired information specific to this Game Object.\n`null` by default. Automatically created if you use `getData` or `setData` or `setDataEnabled`.",
                    "title": "data"
                },
                "defaultPipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The initial WebGL pipeline of this Game Object.",
                    "title": "defaultPipeline"
                },
                "depth": {
                    "description": "The depth of this Game Object within the Scene.\n\nThe depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\nof Game Objects, without actually moving their position in the display list.\n\nThe depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\nvalue will always render in front of one with a lower value.\n\nSetting the depth will queue a depth sort event within the Scene.",
                    "title": "depth",
                    "type": "number"
                },
                "dirty": {
                    "description": "Is this Render Texture dirty or not? If not it won't spend time clearing or filling itself.",
                    "title": "dirty",
                    "type": "boolean"
                },
                "displayHeight": {
                    "description": "The displayed height of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayHeight",
                    "type": "number"
                },
                "displayOriginX": {
                    "description": "The horizontal display origin of this Game Object.\nThe origin is a normalized value between 0 and 1.\nThe displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
                    "title": "displayOriginX",
                    "type": "number"
                },
                "displayOriginY": {
                    "description": "The vertical display origin of this Game Object.\nThe origin is a normalized value between 0 and 1.\nThe displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
                    "title": "displayOriginY",
                    "type": "number"
                },
                "displayWidth": {
                    "description": "The displayed width of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayWidth",
                    "type": "number"
                },
                "flipX": {
                    "description": "The horizontally flipped state of the Game Object.\nA Game Object that is flipped horizontally will render inversed on the horizontal axis.\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipX",
                    "type": "boolean"
                },
                "flipY": {
                    "description": "The vertically flipped state of the Game Object.\nA Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipY",
                    "type": "boolean"
                },
                "frame": {
                    "$ref": "#/definitions/Phaser.Textures.Frame",
                    "description": "The Frame corresponding to this Render Texture.",
                    "title": "frame"
                },
                "framebuffer": {
                    "$ref": "#/definitions/WebGLFramebuffer",
                    "description": "A reference to the GL Frame Buffer this Render Texture is drawing to.\nThis is only set if Phaser is running with the WebGL Renderer.",
                    "title": "framebuffer"
                },
                "gl": {
                    "$ref": "#/definitions/WebGLRenderingContext",
                    "description": "A reference to the WebGL Rendering Context.",
                    "title": "gl"
                },
                "globalAlpha": {
                    "description": "The alpha of the Render Texture when rendered.",
                    "title": "globalAlpha",
                    "type": "number"
                },
                "globalTint": {
                    "description": "The tint of the Render Texture when rendered.",
                    "title": "globalTint",
                    "type": "number"
                },
                "height": {
                    "description": "The native (un-scaled) height of this Game Object.\n\nChanging this value will not change the size that the Game Object is rendered in-game.\nFor that you need to either set the scale of the Game Object (`setScale`) or use\nthe `displayHeight` property.",
                    "title": "height",
                    "type": "number"
                },
                "ignoreDestroy": {
                    "description": "This Game Object will ignore all calls made to its destroy method if this flag is set to `true`.\nThis includes calls that may come from a Group, Container or the Scene itself.\nWhile it allows you to persist a Game Object across Scenes, please understand you are entirely\nresponsible for managing references to and from this Game Object.",
                    "title": "ignoreDestroy",
                    "type": "boolean"
                },
                "input": {
                    "description": "If this Game Object is enabled for input then this property will contain an InteractiveObject instance.\nNot usually set directly. Instead call `GameObject.setInteractive()`.",
                    "properties": {
                        "camera": {
                            "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                            "description": "The most recent Camera to be tested against this Interactive Object.",
                            "title": "camera"
                        },
                        "cursor": {
                            "description": "Should this Interactive Object change the cursor (via css) when over? (desktop only)",
                            "title": "cursor",
                            "type": [
                                "string",
                                "boolean"
                            ]
                        },
                        "dragStartX": {
                            "description": "The x coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartX",
                            "type": "number"
                        },
                        "dragStartY": {
                            "description": "The y coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartY",
                            "type": "number"
                        },
                        "dragState": {
                            "description": "The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "title": "dragState",
                            "type": "number"
                        },
                        "dragX": {
                            "description": "The x coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragX",
                            "type": "number"
                        },
                        "dragY": {
                            "description": "The y coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragY",
                            "type": "number"
                        },
                        "draggable": {
                            "description": "Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.",
                            "title": "draggable",
                            "type": "boolean"
                        },
                        "dropZone": {
                            "description": "Is this Interactive Object a drag-targets drop zone? Set when the object is created.",
                            "title": "dropZone",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "Is this Interactive Object currently enabled for input events?",
                            "title": "enabled",
                            "type": "boolean"
                        },
                        "gameObject": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "The Game Object to which this Interactive Object is bound.",
                            "title": "gameObject"
                        },
                        "hitArea": {
                            "description": "The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.",
                            "title": "hitArea"
                        },
                        "hitAreaCallback": {
                            "description": "The 'contains' check callback that the hit area shape will use for all hit tests.",
                            "title": "hitAreaCallback",
                            "type": "object"
                        },
                        "localX": {
                            "description": "The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localX",
                            "type": "number"
                        },
                        "localY": {
                            "description": "The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localY",
                            "type": "number"
                        },
                        "target": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "An optional drop target for a draggable Interactive Object.",
                            "title": "target"
                        }
                    },
                    "title": "input",
                    "type": "object"
                },
                "isTinted": {
                    "description": "Does this Game Object have a tint applied to it or not?",
                    "title": "isTinted",
                    "type": "boolean"
                },
                "mask": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.BitmapMask"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.GeometryMask"
                        }
                    ],
                    "description": "The Mask this Game Object is using during render.",
                    "title": "mask"
                },
                "name": {
                    "description": "The name of this Game Object.\nEmpty by default and never populated by Phaser, this is left for developers to use.",
                    "title": "name",
                    "type": "string"
                },
                "originX": {
                    "description": "The horizontal origin of this Game Object.\nThe origin maps the relationship between the size and position of the Game Object.\nThe default value is 0.5, meaning all Game Objects are positioned based on their center.\nSetting the value to 0 means the position now relates to the left of the Game Object.",
                    "title": "originX",
                    "type": "number"
                },
                "originY": {
                    "description": "The vertical origin of this Game Object.\nThe origin maps the relationship between the size and position of the Game Object.\nThe default value is 0.5, meaning all Game Objects are positioned based on their center.\nSetting the value to 0 means the position now relates to the top of the Game Object.",
                    "title": "originY",
                    "type": "number"
                },
                "parentContainer": {
                    "$ref": "#/definitions/Phaser.GameObjects.Container",
                    "description": "The parent Container of this Game Object, if it has one.",
                    "title": "parentContainer"
                },
                "pipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The current WebGL pipeline of this Game Object.",
                    "title": "pipeline"
                },
                "renderFlags": {
                    "description": "The flags that are compared against `RENDER_MASK` to determine if this Game Object will render or not.\nThe bits are 0001 | 0010 | 0100 | 1000 set by the components Visible, Alpha, Transform and Texture respectively.\nIf those components are not used by your custom class then you can use this bitmask as you wish.",
                    "title": "renderFlags",
                    "type": "integer"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Renderer.Canvas.CanvasRenderer"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLRenderer"
                        }
                    ],
                    "description": "A reference to either the Canvas or WebGL Renderer that the Game instance is using.",
                    "title": "renderer"
                },
                "rotation": {
                    "description": "The angle of this Game Object in radians.\n\nIf you prefer to work in degrees, see the `angle` property instead.",
                    "title": "rotation",
                    "type": "number"
                },
                "scaleMode": {
                    "$ref": "#/definitions/Phaser.ScaleModes",
                    "description": "The Scale Mode being used by this Game Object.\nCan be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
                    "title": "scaleMode"
                },
                "scaleX": {
                    "description": "The horizontal scale of this Game Object.",
                    "title": "scaleX",
                    "type": "number"
                },
                "scaleY": {
                    "description": "The vertical scale of this Game Object.",
                    "title": "scaleY",
                    "type": "number"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object belongs.\nGame Objects can only belong to one Scene.",
                    "title": "scene"
                },
                "scrollFactorX": {
                    "description": "The horizontal scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorX",
                    "type": "number"
                },
                "scrollFactorY": {
                    "description": "The vertical scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorY",
                    "type": "number"
                },
                "tabIndex": {
                    "description": "The Tab Index of the Game Object.\nReserved for future use by plugins and the Input Manager.",
                    "title": "tabIndex",
                    "type": "integer"
                },
                "texture": {
                    "$ref": "#/definitions/Phaser.Textures.Texture",
                    "description": "The Texture corresponding to this Render Texture.",
                    "title": "texture"
                },
                "textureManager": {
                    "$ref": "#/definitions/Phaser.Textures.TextureManager",
                    "description": "A reference to the Texture Manager.",
                    "title": "textureManager"
                },
                "tint": {
                    "description": "The tint value being applied to the whole of the Game Object.",
                    "title": "tint",
                    "type": "integer"
                },
                "tintBottomLeft": {
                    "description": "The tint value being applied to the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomLeft",
                    "type": "integer"
                },
                "tintBottomRight": {
                    "description": "The tint value being applied to the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomRight",
                    "type": "integer"
                },
                "tintFill": {
                    "description": "Fill or additive?",
                    "title": "tintFill",
                    "type": "boolean"
                },
                "tintTopLeft": {
                    "description": "The tint value being applied to the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopLeft",
                    "type": "integer"
                },
                "tintTopRight": {
                    "description": "The tint value being applied to the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopRight",
                    "type": "integer"
                },
                "type": {
                    "description": "A textual representation of this Game Object, i.e. `sprite`.\nUsed internally by Phaser but is available for your own custom classes to populate.",
                    "title": "type",
                    "type": "string"
                },
                "visible": {
                    "description": "The visible state of the Game Object.\n\nAn invisible Game Object will skip rendering, but will still process update logic.",
                    "title": "visible",
                    "type": "boolean"
                },
                "w": {
                    "description": "The w position of this Game Object.",
                    "title": "w",
                    "type": "number"
                },
                "width": {
                    "description": "The native (un-scaled) width of this Game Object.\n\nChanging this value will not change the size that the Game Object is rendered in-game.\nFor that you need to either set the scale of the Game Object (`setScale`) or use\nthe `displayWidth` property.",
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "description": "The x position of this Game Object.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of this Game Object.",
                    "title": "y",
                    "type": "number"
                },
                "z": {
                    "description": "The z position of this Game Object.\nNote: Do not use this value to set the z-index, instead see the `depth` property.",
                    "title": "z",
                    "type": "number"
                }
            },
            "title": "Phaser.GameObjects.RenderTexture",
            "type": "object"
        },
        "Phaser.GameObjects.Text": {
            "description": "A Text Game Object.\n\nText objects work by creating their own internal hidden Canvas and then renders text to it using\nthe standard Canvas `fillText` API. It then creates a texture from this canvas which is rendered\nto your game during the render pass.\n\nBecause it uses the Canvas API you can take advantage of all the features this offers, such as\napplying gradient fills to the text, or strokes, shadows and more. You can also use custom fonts\nloaded externally, such as Google or TypeKit Web fonts.\n\nYou can only display fonts that are currently loaded and available to the browser: therefore fonts must\nbe pre-loaded. Phaser does not do ths for you, so you will require the use of a 3rd party font loader,\nor have the fonts ready available in the CSS on the page in which your Phaser game resides.\n\nSee {@link http://www.jordanm.co.uk/tinytype this compatibility table} for the available default fonts\nacross mobile browsers.\n\nA note on performance: Every time the contents of a Text object changes, i.e. changing the text being\ndisplayed, or the style of the text, it needs to remake the Text canvas, and if on WebGL, re-upload the\nnew texture to the GPU. This can be an expensive operation if used often, or with large quantities of\nText objects in your game. If you run into performance issues you would be better off using Bitmap Text\ninstead, as it benefits from batching and avoids expensive Canvas API calls.",
            "properties": {
                "active": {
                    "description": "The active state of this Game Object.\nA Game Object with an active state of `true` is processed by the Scenes UpdateList, if added to it.\nAn active object is one which is having its logic and internal systems updated.",
                    "title": "active",
                    "type": "boolean"
                },
                "alpha": {
                    "description": "The alpha value of the Game Object.\n\nThis is a global value, impacting the entire Game Object, not just a region of it.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaBottomLeft": {
                    "description": "The alpha value starting from the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomLeft",
                    "type": "number"
                },
                "alphaBottomRight": {
                    "description": "The alpha value starting from the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomRight",
                    "type": "number"
                },
                "alphaTopLeft": {
                    "description": "The alpha value starting from the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopLeft",
                    "type": "number"
                },
                "alphaTopRight": {
                    "description": "The alpha value starting from the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopRight",
                    "type": "number"
                },
                "angle": {
                    "description": "The angle of this Game Object as expressed in degrees.\n\nWhere 0 is to the right, 90 is down, 180 is left.\n\nIf you prefer to work in radians, see the `rotation` property instead.",
                    "title": "angle",
                    "type": "integer"
                },
                "autoRound": {
                    "description": "Whether to automatically round line positions.",
                    "title": "autoRound",
                    "type": "boolean"
                },
                "blendMode": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.BlendModes"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Sets the Blend Mode being used by this Game Object.\n\nThis can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n\nUnder WebGL only the following Blend Modes are available:\n\n* ADD\n* MULTIPLY\n* SCREEN\n\nCanvas has more available depending on browser support.\n\nYou can also create your own custom Blend Modes in WebGL.\n\nBlend modes have different effects under Canvas and WebGL, and from browser to browser, depending\non support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\nreasons try to be careful about the construction of your Scene and the frequency of which blend modes\nare used.",
                    "title": "blendMode"
                },
                "body": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "properties": {
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Arcade.Body"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body"
                        }
                    ],
                    "description": "If this Game Object is enabled for physics then this property will contain a reference to a Physics Body.",
                    "title": "body"
                },
                "cameraFilter": {
                    "description": "A bitmask that controls if this Game Object is drawn by a Camera or not.\nNot usually set directly, instead call `Camera.ignore`, however you can\nset this property directly using the Camera.id property:",
                    "title": "cameraFilter",
                    "type": "number"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "The canvas element that the text is rendered to.",
                    "title": "canvas"
                },
                "context": {
                    "$ref": "#/definitions/CanvasRenderingContext2D",
                    "description": "The context of the canvas element that the text is rendered to.",
                    "title": "context"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A Data Manager.\nIt allows you to store, query and get key/value paired information specific to this Game Object.\n`null` by default. Automatically created if you use `getData` or `setData` or `setDataEnabled`.",
                    "title": "data"
                },
                "defaultPipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The initial WebGL pipeline of this Game Object.",
                    "title": "defaultPipeline"
                },
                "depth": {
                    "description": "The depth of this Game Object within the Scene.\n\nThe depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\nof Game Objects, without actually moving their position in the display list.\n\nThe depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\nvalue will always render in front of one with a lower value.\n\nSetting the depth will queue a depth sort event within the Scene.",
                    "title": "depth",
                    "type": "number"
                },
                "dirty": {
                    "description": "Whether the text or its settings have changed and need updating.",
                    "title": "dirty",
                    "type": "boolean"
                },
                "displayHeight": {
                    "description": "The displayed height of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayHeight",
                    "type": "number"
                },
                "displayOriginX": {
                    "description": "The horizontal display origin of this Game Object.\nThe origin is a normalized value between 0 and 1.\nThe displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
                    "title": "displayOriginX",
                    "type": "number"
                },
                "displayOriginY": {
                    "description": "The vertical display origin of this Game Object.\nThe origin is a normalized value between 0 and 1.\nThe displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
                    "title": "displayOriginY",
                    "type": "number"
                },
                "displayWidth": {
                    "description": "The displayed width of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayWidth",
                    "type": "number"
                },
                "flipX": {
                    "description": "The horizontally flipped state of the Game Object.\nA Game Object that is flipped horizontally will render inversed on the horizontal axis.\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipX",
                    "type": "boolean"
                },
                "flipY": {
                    "description": "The vertically flipped state of the Game Object.\nA Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipY",
                    "type": "boolean"
                },
                "frame": {
                    "$ref": "#/definitions/Phaser.Textures.Frame",
                    "description": "The Texture Frame this Game Object is using to render with.",
                    "title": "frame"
                },
                "height": {
                    "description": "The height of this Text object.",
                    "title": "height",
                    "type": "number"
                },
                "ignoreDestroy": {
                    "description": "This Game Object will ignore all calls made to its destroy method if this flag is set to `true`.\nThis includes calls that may come from a Group, Container or the Scene itself.\nWhile it allows you to persist a Game Object across Scenes, please understand you are entirely\nresponsible for managing references to and from this Game Object.",
                    "title": "ignoreDestroy",
                    "type": "boolean"
                },
                "input": {
                    "description": "If this Game Object is enabled for input then this property will contain an InteractiveObject instance.\nNot usually set directly. Instead call `GameObject.setInteractive()`.",
                    "properties": {
                        "camera": {
                            "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                            "description": "The most recent Camera to be tested against this Interactive Object.",
                            "title": "camera"
                        },
                        "cursor": {
                            "description": "Should this Interactive Object change the cursor (via css) when over? (desktop only)",
                            "title": "cursor",
                            "type": [
                                "string",
                                "boolean"
                            ]
                        },
                        "dragStartX": {
                            "description": "The x coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartX",
                            "type": "number"
                        },
                        "dragStartY": {
                            "description": "The y coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartY",
                            "type": "number"
                        },
                        "dragState": {
                            "description": "The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "title": "dragState",
                            "type": "number"
                        },
                        "dragX": {
                            "description": "The x coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragX",
                            "type": "number"
                        },
                        "dragY": {
                            "description": "The y coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragY",
                            "type": "number"
                        },
                        "draggable": {
                            "description": "Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.",
                            "title": "draggable",
                            "type": "boolean"
                        },
                        "dropZone": {
                            "description": "Is this Interactive Object a drag-targets drop zone? Set when the object is created.",
                            "title": "dropZone",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "Is this Interactive Object currently enabled for input events?",
                            "title": "enabled",
                            "type": "boolean"
                        },
                        "gameObject": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "The Game Object to which this Interactive Object is bound.",
                            "title": "gameObject"
                        },
                        "hitArea": {
                            "description": "The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.",
                            "title": "hitArea"
                        },
                        "hitAreaCallback": {
                            "description": "The 'contains' check callback that the hit area shape will use for all hit tests.",
                            "title": "hitAreaCallback",
                            "type": "object"
                        },
                        "localX": {
                            "description": "The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localX",
                            "type": "number"
                        },
                        "localY": {
                            "description": "The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localY",
                            "type": "number"
                        },
                        "target": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "An optional drop target for a draggable Interactive Object.",
                            "title": "target"
                        }
                    },
                    "title": "input",
                    "type": "object"
                },
                "isCropped": {
                    "description": "A boolean flag indicating if this Game Object is being cropped or not.\nYou can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\nEqually, calling `setCrop` with no arguments will reset the crop and disable it.",
                    "title": "isCropped",
                    "type": "boolean"
                },
                "isTinted": {
                    "description": "Does this Game Object have a tint applied to it or not?",
                    "title": "isTinted",
                    "type": "boolean"
                },
                "lineSpacing": {
                    "description": "The line spacing value.\nThis value is added to the font height to calculate the overall line height.\nOnly has an effect if this Text object contains multiple lines of text.\n\nIf you update this property directly, instead of using the `setLineSpacing` method, then\nbe sure to call `updateText` after, or you won't see the change reflected in the Text object.",
                    "title": "lineSpacing",
                    "type": "number"
                },
                "mask": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.BitmapMask"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.GeometryMask"
                        }
                    ],
                    "description": "The Mask this Game Object is using during render.",
                    "title": "mask"
                },
                "name": {
                    "description": "The name of this Game Object.\nEmpty by default and never populated by Phaser, this is left for developers to use.",
                    "title": "name",
                    "type": "string"
                },
                "originX": {
                    "description": "The horizontal origin of this Game Object.\nThe origin maps the relationship between the size and position of the Game Object.\nThe default value is 0.5, meaning all Game Objects are positioned based on their center.\nSetting the value to 0 means the position now relates to the left of the Game Object.",
                    "title": "originX",
                    "type": "number"
                },
                "originY": {
                    "description": "The vertical origin of this Game Object.\nThe origin maps the relationship between the size and position of the Game Object.\nThe default value is 0.5, meaning all Game Objects are positioned based on their center.\nSetting the value to 0 means the position now relates to the top of the Game Object.",
                    "title": "originY",
                    "type": "number"
                },
                "padding": {
                    "$ref": "#/definitions/Object",
                    "description": "Specify a padding value which is added to the line width and height when calculating the Text size.\nAllows you to add extra spacing if the browser is unable to accurately determine the true font dimensions.",
                    "title": "padding"
                },
                "parentContainer": {
                    "$ref": "#/definitions/Phaser.GameObjects.Container",
                    "description": "The parent Container of this Game Object, if it has one.",
                    "title": "parentContainer"
                },
                "pipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The current WebGL pipeline of this Game Object.",
                    "title": "pipeline"
                },
                "renderFlags": {
                    "description": "The flags that are compared against `RENDER_MASK` to determine if this Game Object will render or not.\nThe bits are 0001 | 0010 | 0100 | 1000 set by the components Visible, Alpha, Transform and Texture respectively.\nIf those components are not used by your custom class then you can use this bitmask as you wish.",
                    "title": "renderFlags",
                    "type": "integer"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Renderer.Canvas.CanvasRenderer"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLRenderer"
                        }
                    ],
                    "description": "The renderer in use by this Text object.",
                    "title": "renderer"
                },
                "rotation": {
                    "description": "The angle of this Game Object in radians.\n\nIf you prefer to work in degrees, see the `angle` property instead.",
                    "title": "rotation",
                    "type": "number"
                },
                "scaleMode": {
                    "$ref": "#/definitions/Phaser.ScaleModes",
                    "description": "The Scale Mode being used by this Game Object.\nCan be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
                    "title": "scaleMode"
                },
                "scaleX": {
                    "description": "The horizontal scale of this Game Object.",
                    "title": "scaleX",
                    "type": "number"
                },
                "scaleY": {
                    "description": "The vertical scale of this Game Object.",
                    "title": "scaleY",
                    "type": "number"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object belongs.\nGame Objects can only belong to one Scene.",
                    "title": "scene"
                },
                "scrollFactorX": {
                    "description": "The horizontal scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorX",
                    "type": "number"
                },
                "scrollFactorY": {
                    "description": "The vertical scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorY",
                    "type": "number"
                },
                "splitRegExp": {
                    "additionalProperties": true,
                    "description": "The Regular Expression that is used to split the text up into lines, in\nmulti-line text. By default this is `/(?:\\r\\n|\\r|\\n)/`.\nYou can change this RegExp to be anything else that you may need.",
                    "properties": {
                    },
                    "title": "splitRegExp",
                    "type": "object"
                },
                "style": {
                    "$ref": "#/definitions/Phaser.GameObjects.Text.TextStyle",
                    "description": "The Text Style object.\n\nManages the style of this Text object.",
                    "title": "style"
                },
                "tabIndex": {
                    "description": "The Tab Index of the Game Object.\nReserved for future use by plugins and the Input Manager.",
                    "title": "tabIndex",
                    "type": "integer"
                },
                "text": {
                    "description": "The text string being rendered by this Text Game Object.",
                    "title": "text",
                    "type": "string"
                },
                "texture": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Textures.CanvasTexture"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Textures.Texture"
                        }
                    ],
                    "description": "The Texture this Game Object is using to render with.",
                    "title": "texture"
                },
                "tint": {
                    "description": "The tint value being applied to the whole of the Game Object.",
                    "title": "tint",
                    "type": "integer"
                },
                "tintBottomLeft": {
                    "description": "The tint value being applied to the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomLeft",
                    "type": "integer"
                },
                "tintBottomRight": {
                    "description": "The tint value being applied to the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomRight",
                    "type": "integer"
                },
                "tintFill": {
                    "description": "Fill or additive?",
                    "title": "tintFill",
                    "type": "boolean"
                },
                "tintTopLeft": {
                    "description": "The tint value being applied to the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopLeft",
                    "type": "integer"
                },
                "tintTopRight": {
                    "description": "The tint value being applied to the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopRight",
                    "type": "integer"
                },
                "type": {
                    "description": "A textual representation of this Game Object, i.e. `sprite`.\nUsed internally by Phaser but is available for your own custom classes to populate.",
                    "title": "type",
                    "type": "string"
                },
                "visible": {
                    "description": "The visible state of the Game Object.\n\nAn invisible Game Object will skip rendering, but will still process update logic.",
                    "title": "visible",
                    "type": "boolean"
                },
                "w": {
                    "description": "The w position of this Game Object.",
                    "title": "w",
                    "type": "number"
                },
                "width": {
                    "description": "The width of this Text object.",
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "description": "The x position of this Game Object.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of this Game Object.",
                    "title": "y",
                    "type": "number"
                },
                "z": {
                    "description": "The z position of this Game Object.\nNote: Do not use this value to set the z-index, instead see the `depth` property.",
                    "title": "z",
                    "type": "number"
                }
            },
            "title": "Phaser.GameObjects.Text",
            "type": "object"
        },
        "Phaser.GameObjects.Text.TextStyle": {
            "description": "Style settings for a Text object.",
            "properties": {
                "align": {
                    "description": "The text alignment.",
                    "title": "align",
                    "type": "string"
                },
                "backgroundColor": {
                    "description": "The background color.",
                    "title": "backgroundColor",
                    "type": "string"
                },
                "baselineX": {
                    "description": "The amount of horizontal padding adding to the width of the text when calculating the font metrics.",
                    "title": "baselineX",
                    "type": "number"
                },
                "baselineY": {
                    "description": "The amount of vertical padding adding to the width of the text when calculating the font metrics.",
                    "title": "baselineY",
                    "type": "number"
                },
                "color": {
                    "description": "The text fill color.",
                    "title": "color",
                    "type": "string"
                },
                "fixedHeight": {
                    "description": "The fixed height of the text.\n\n`0` means no fixed height.",
                    "title": "fixedHeight",
                    "type": "number"
                },
                "fixedWidth": {
                    "description": "The fixed width of the text.\n\n`0` means no fixed with.",
                    "title": "fixedWidth",
                    "type": "number"
                },
                "fontFamily": {
                    "description": "The font family.",
                    "title": "fontFamily",
                    "type": "string"
                },
                "fontSize": {
                    "description": "The font size.",
                    "title": "fontSize",
                    "type": "string"
                },
                "fontStyle": {
                    "description": "The font style.",
                    "title": "fontStyle",
                    "type": "string"
                },
                "maxLines": {
                    "description": "The maximum number of lines to draw.",
                    "title": "maxLines",
                    "type": "integer"
                },
                "parent": {
                    "$ref": "#/definitions/Phaser.GameObjects.Text",
                    "description": "The Text object that this TextStyle is styling.",
                    "title": "parent"
                },
                "resolution": {
                    "description": "The resolution the text is rendered to its internal canvas at.\nThe default is 0, which means it will use the resolution set in the Game Config.",
                    "title": "resolution",
                    "type": "number"
                },
                "rtl": {
                    "description": "Whether the text should render right to left.",
                    "title": "rtl",
                    "type": "boolean"
                },
                "shadowBlur": {
                    "description": "The shadow blur radius.",
                    "title": "shadowBlur",
                    "type": "number"
                },
                "shadowColor": {
                    "description": "The shadow color.",
                    "title": "shadowColor",
                    "type": "string"
                },
                "shadowFill": {
                    "description": "Whether shadow fill is enabled or not.",
                    "title": "shadowFill",
                    "type": "boolean"
                },
                "shadowOffsetX": {
                    "description": "The horizontal shadow offset.",
                    "title": "shadowOffsetX",
                    "type": "number"
                },
                "shadowOffsetY": {
                    "description": "The vertical shadow offset.",
                    "title": "shadowOffsetY",
                    "type": "number"
                },
                "shadowStroke": {
                    "description": "Whether shadow stroke is enabled or not.",
                    "title": "shadowStroke",
                    "type": "boolean"
                },
                "stroke": {
                    "description": "The text stroke color.",
                    "title": "stroke",
                    "type": "string"
                },
                "strokeThickness": {
                    "description": "The text stroke thickness.",
                    "title": "strokeThickness",
                    "type": "number"
                },
                "testString": {
                    "description": "The test string to use when measuring the font.",
                    "title": "testString",
                    "type": "string"
                }
            },
            "title": "Phaser.GameObjects.Text.TextStyle",
            "type": "object"
        },
        "Phaser.GameObjects.UpdateList": {
            "description": "The Update List plugin.\n\nUpdate Lists belong to a Scene and maintain the list Game Objects to be updated every frame.\n\nSome or all of these Game Objects may also be part of the Scene's [Display List]{@link Phaser.GameObjects.DisplayList}, for Rendering.",
            "properties": {
                "length": {
                    "description": "The length of the list.",
                    "title": "length",
                    "type": "integer"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene that the Update List belongs to.",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "The Scene's Systems.",
                    "title": "systems"
                }
            },
            "title": "Phaser.GameObjects.UpdateList",
            "type": "object"
        },
        "Phaser.Geom.Rectangle": {
            "description": "Encapsulates a 2D rectangle defined by its corner point in the top-left and its extends in x (width) and y (height)",
            "properties": {
                "bottom": {
                    "description": "The sum of the y and height properties.\nChanging the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.",
                    "title": "bottom",
                    "type": "number"
                },
                "centerX": {
                    "description": "The x coordinate of the center of the Rectangle.",
                    "title": "centerX",
                    "type": "number"
                },
                "centerY": {
                    "description": "The y coordinate of the center of the Rectangle.",
                    "title": "centerY",
                    "type": "number"
                },
                "height": {
                    "description": "The height of the Rectangle, i.e. the distance between its top side (defined by `y`) and its bottom side.",
                    "title": "height",
                    "type": "number"
                },
                "left": {
                    "description": "The x coordinate of the left of the Rectangle.\nChanging the left property of a Rectangle object has no effect on the y and height properties. However it does affect the width property, whereas changing the x value does not affect the width property.",
                    "title": "left",
                    "type": "number"
                },
                "right": {
                    "description": "The sum of the x and width properties.\nChanging the right property of a Rectangle object has no effect on the x, y and height properties, however it does affect the width property.",
                    "title": "right",
                    "type": "number"
                },
                "top": {
                    "description": "The y coordinate of the top of the Rectangle. Changing the top property of a Rectangle object has no effect on the x and width properties.\nHowever it does affect the height property, whereas changing the y value does not affect the height property.",
                    "title": "top",
                    "type": "number"
                },
                "width": {
                    "description": "The width of the Rectangle, i.e. the distance between its left side (defined by `x`) and its right side.",
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "description": "The X coordinate of the top left corner of the Rectangle.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The Y coordinate of the top left corner of the Rectangle.",
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "Phaser.Geom.Rectangle",
            "type": "object"
        },
        "Phaser.Input.Gamepad.Axis": {
            "description": "Contains information about a specific Gamepad Axis.\nAxis objects are created automatically by the Gamepad as they are needed.",
            "properties": {
                "events": {
                    "$ref": "#/definitions/Phaser.Events.EventEmitter",
                    "description": "An event emitter to use to emit the axis events.",
                    "title": "events"
                },
                "index": {
                    "description": "The index of this Axis.",
                    "title": "index",
                    "type": "integer"
                },
                "pad": {
                    "$ref": "#/definitions/Phaser.Input.Gamepad.Gamepad",
                    "description": "A reference to the Gamepad that this Axis belongs to.",
                    "title": "pad"
                },
                "threshold": {
                    "description": "Movement tolerance threshold below which axis values are ignored in `getValue`.",
                    "title": "threshold",
                    "type": "number"
                },
                "value": {
                    "description": "The raw axis value, between -1 and 1 with 0 being dead center.\nUse the method `getValue` to get a normalized value with the threshold applied.",
                    "title": "value",
                    "type": "number"
                }
            },
            "title": "Phaser.Input.Gamepad.Axis",
            "type": "object"
        },
        "Phaser.Input.Gamepad.Button": {
            "description": "Contains information about a specific button on a Gamepad.\nButton objects are created automatically by the Gamepad as they are needed.",
            "properties": {
                "events": {
                    "$ref": "#/definitions/Phaser.Events.EventEmitter",
                    "description": "An event emitter to use to emit the button events.",
                    "title": "events"
                },
                "index": {
                    "description": "The index of this Button.",
                    "title": "index",
                    "type": "integer"
                },
                "pad": {
                    "$ref": "#/definitions/Phaser.Input.Gamepad.Gamepad",
                    "description": "A reference to the Gamepad that this Button belongs to.",
                    "title": "pad"
                },
                "pressed": {
                    "description": "Is the Button being pressed down or not?",
                    "title": "pressed",
                    "type": "boolean"
                },
                "threshold": {
                    "description": "Can be set for analogue buttons to enable a 'pressure' threshold,\nbefore a button is considered as being 'pressed'.",
                    "title": "threshold",
                    "type": "number"
                },
                "value": {
                    "description": "Between 0 and 1.",
                    "title": "value",
                    "type": "number"
                }
            },
            "title": "Phaser.Input.Gamepad.Button",
            "type": "object"
        },
        "Phaser.Input.Gamepad.Gamepad": {
            "description": "A single Gamepad.\n\nThese are created, updated and managed by the Gamepad Plugin.",
            "properties": {
                "A": {
                    "description": "Is the Gamepad's bottom button in the right button cluster being pressed?\nIf the Gamepad doesn't have this button it will always return false.\nOn a Dual Shock controller it's the X button.\nOn an XBox controller it's the A button.",
                    "title": "A",
                    "type": "boolean"
                },
                "B": {
                    "description": "Is the Gamepad's right button in the right button cluster being pressed?\nIf the Gamepad doesn't have this button it will always return false.\nOn a Dual Shock controller it's the Circle button.\nOn an XBox controller it's the B button.",
                    "title": "B",
                    "type": "boolean"
                },
                "L1": {
                    "description": "Returns the value of the Gamepad's top left shoulder button.\nIf the Gamepad doesn't have this button it will always return zero.\nThe value is a float between 0 and 1, corresponding to how depressed the button is.\nOn a Dual Shock controller it's the L1 button.\nOn an XBox controller it's the LB button.",
                    "title": "L1",
                    "type": "number"
                },
                "L2": {
                    "description": "Returns the value of the Gamepad's bottom left shoulder button.\nIf the Gamepad doesn't have this button it will always return zero.\nThe value is a float between 0 and 1, corresponding to how depressed the button is.\nOn a Dual Shock controller it's the L2 button.\nOn an XBox controller it's the LT button.",
                    "title": "L2",
                    "type": "number"
                },
                "R1": {
                    "description": "Returns the value of the Gamepad's top right shoulder button.\nIf the Gamepad doesn't have this button it will always return zero.\nThe value is a float between 0 and 1, corresponding to how depressed the button is.\nOn a Dual Shock controller it's the R1 button.\nOn an XBox controller it's the RB button.",
                    "title": "R1",
                    "type": "number"
                },
                "R2": {
                    "description": "Returns the value of the Gamepad's bottom right shoulder button.\nIf the Gamepad doesn't have this button it will always return zero.\nThe value is a float between 0 and 1, corresponding to how depressed the button is.\nOn a Dual Shock controller it's the R2 button.\nOn an XBox controller it's the RT button.",
                    "title": "R2",
                    "type": "number"
                },
                "X": {
                    "description": "Is the Gamepad's left button in the right button cluster being pressed?\nIf the Gamepad doesn't have this button it will always return false.\nOn a Dual Shock controller it's the Square button.\nOn an XBox controller it's the X button.",
                    "title": "X",
                    "type": "boolean"
                },
                "Y": {
                    "description": "Is the Gamepad's top button in the right button cluster being pressed?\nIf the Gamepad doesn't have this button it will always return false.\nOn a Dual Shock controller it's the Triangle button.\nOn an XBox controller it's the Y button.",
                    "title": "Y",
                    "type": "boolean"
                },
                "axes": {
                    "description": "An array of Gamepad Axis objects, corresponding to the different axes available on the Gamepad, if any.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Input.Gamepad.Axis"
                    },
                    "title": "axes",
                    "type": "array"
                },
                "buttons": {
                    "description": "An array of Gamepad Button objects, corresponding to the different buttons available on the Gamepad.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Input.Gamepad.Button"
                    },
                    "title": "buttons",
                    "type": "array"
                },
                "connected": {
                    "description": "Is this Gamepad currently connected or not?",
                    "title": "connected",
                    "type": "boolean"
                },
                "down": {
                    "description": "Is the Gamepad's Down button being pressed?\nIf the Gamepad doesn't have this button it will always return false.\nThis is the d-pad down button under standard Gamepad mapping.",
                    "title": "down",
                    "type": "boolean"
                },
                "id": {
                    "description": "A string containing some information about the controller.\n\nThis is not strictly specified, but in Firefox it will contain three pieces of information\nseparated by dashes (-): two 4-digit hexadecimal strings containing the USB vendor and\nproduct id of the controller, and the name of the controller as provided by the driver.\nIn Chrome it will contain the name of the controller as provided by the driver,\nfollowed by vendor and product 4-digit hexadecimal strings.",
                    "title": "id",
                    "type": "string"
                },
                "index": {
                    "description": "An integer that is unique for each Gamepad currently connected to the system.\nThis can be used to distinguish multiple controllers.\nNote that disconnecting a device and then connecting a new device may reuse the previous index.",
                    "title": "index",
                    "type": "number"
                },
                "left": {
                    "description": "Is the Gamepad's Left button being pressed?\nIf the Gamepad doesn't have this button it will always return false.\nThis is the d-pad left button under standard Gamepad mapping.",
                    "title": "left",
                    "type": "boolean"
                },
                "leftStick": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "A Vector2 containing the most recent values from the Gamepad's left axis stick.\nThis is updated automatically as part of the Gamepad.update cycle.\nThe H Axis is mapped to the `Vector2.x` property, and the V Axis to the `Vector2.y` property.\nThe values are based on the Axis thresholds.\nIf the Gamepad does not have a left axis stick, the values will always be zero.",
                    "title": "leftStick"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Input.Gamepad.GamepadPlugin",
                    "description": "A reference to the Gamepad Plugin.",
                    "title": "manager"
                },
                "pad": {
                    "description": "A reference to the native Gamepad object that is connected to the browser.",
                    "title": "pad"
                },
                "right": {
                    "description": "Is the Gamepad's Right button being pressed?\nIf the Gamepad doesn't have this button it will always return false.\nThis is the d-pad right button under standard Gamepad mapping.",
                    "title": "right",
                    "type": "boolean"
                },
                "rightStick": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "A Vector2 containing the most recent values from the Gamepad's right axis stick.\nThis is updated automatically as part of the Gamepad.update cycle.\nThe H Axis is mapped to the `Vector2.x` property, and the V Axis to the `Vector2.y` property.\nThe values are based on the Axis thresholds.\nIf the Gamepad does not have a right axis stick, the values will always be zero.",
                    "title": "rightStick"
                },
                "timestamp": {
                    "description": "A timestamp containing the most recent time this Gamepad was updated.",
                    "title": "timestamp",
                    "type": "number"
                },
                "up": {
                    "description": "Is the Gamepad's Up button being pressed?\nIf the Gamepad doesn't have this button it will always return false.\nThis is the d-pad up button under standard Gamepad mapping.",
                    "title": "up",
                    "type": "boolean"
                },
                "vibration": {
                    "$ref": "#/definitions/GamepadHapticActuator",
                    "description": "The Gamepad's Haptic Actuator (Vibration / Rumble support).\nThis is highly experimental and only set if both present on the device,\nand exposed by both the hardware and browser.",
                    "title": "vibration"
                }
            },
            "title": "Phaser.Input.Gamepad.Gamepad",
            "type": "object"
        },
        "Phaser.Input.Gamepad.GamepadPlugin": {
            "description": "The Gamepad Plugin is an input plugin that belongs to the Scene-owned Input system.\n\nIts role is to listen for native DOM Gamepad Events and then process them.\n\nYou do not need to create this class directly, the Input system will create an instance of it automatically.\n\nYou can access it from within a Scene using `this.input.gamepad`.\n\nTo listen for a gamepad being connected:\n\n```javascript\n             * this.input.gamepad.once('connected', function (pad) {\n             *     //   'pad' is a reference to the gamepad that was just connected\n             * });\n             * ```\n\nNote that the browser may require you to press a button on a gamepad before it will allow you to access it,\nthis is for security reasons. However, it may also trust the page already, in which case you won't get the\n'connected' event and instead should check `GamepadPlugin.total` to see if it thinks there are any gamepads\nalready connected.\n\nOnce you have received the connected event, or polled the gamepads and found them enabled, you can access\nthem via the built-in properties `GamepadPlugin.pad1` to `pad4`, for up to 4 game pads. With a reference\nto the gamepads you can poll its buttons and axis sticks. See the properties and methods available on\nthe `Gamepad` class for more details.\n\nFor more information about Gamepad support in browsers see the following resources:\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\nhttps://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\nhttps://www.smashingmagazine.com/2015/11/gamepad-api-in-web-games/\nhttp://html5gamepad.com/",
            "properties": {
                "enabled": {
                    "description": "A boolean that controls if the Gamepad Manager is enabled or not.\nCan be toggled on the fly.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "gamepads": {
                    "description": "An array of the connected Gamepads.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Input.Gamepad.Gamepad"
                    },
                    "title": "gamepads",
                    "type": "array"
                },
                "pad1": {
                    "$ref": "#/definitions/Phaser.Input.Gamepad.Gamepad",
                    "description": "A reference to the first connected Gamepad.\n\nThis will be undefined if either no pads are connected, or the browser\nhas not yet issued a gamepadconnect, which can happen even if a Gamepad\nis plugged in, but hasn't yet had any buttons pressed on it.",
                    "title": "pad1"
                },
                "pad2": {
                    "$ref": "#/definitions/Phaser.Input.Gamepad.Gamepad",
                    "description": "A reference to the second connected Gamepad.\n\nThis will be undefined if either no pads are connected, or the browser\nhas not yet issued a gamepadconnect, which can happen even if a Gamepad\nis plugged in, but hasn't yet had any buttons pressed on it.",
                    "title": "pad2"
                },
                "pad3": {
                    "$ref": "#/definitions/Phaser.Input.Gamepad.Gamepad",
                    "description": "A reference to the third connected Gamepad.\n\nThis will be undefined if either no pads are connected, or the browser\nhas not yet issued a gamepadconnect, which can happen even if a Gamepad\nis plugged in, but hasn't yet had any buttons pressed on it.",
                    "title": "pad3"
                },
                "pad4": {
                    "$ref": "#/definitions/Phaser.Input.Gamepad.Gamepad",
                    "description": "A reference to the fourth connected Gamepad.\n\nThis will be undefined if either no pads are connected, or the browser\nhas not yet issued a gamepadconnect, which can happen even if a Gamepad\nis plugged in, but hasn't yet had any buttons pressed on it.",
                    "title": "pad4"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "A reference to the Scene that this Input Plugin is responsible for.",
                    "title": "scene"
                },
                "sceneInputPlugin": {
                    "$ref": "#/definitions/Phaser.Input.InputPlugin",
                    "description": "A reference to the Scene Input Plugin that created this Keyboard Plugin.",
                    "title": "sceneInputPlugin"
                },
                "settings": {
                    "description": "A reference to the Scene Systems Settings.",
                    "properties": {
                        "active": {
                            "description": "[description]",
                            "title": "active",
                            "type": "boolean"
                        },
                        "cameras": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "backgroundColor": {
                                            "anyOf": [
                                                {
                                                    "enum": [
                                                        false
                                                    ],
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "description": "A CSS color string controlling the Camera background color.",
                                            "title": "backgroundColor"
                                        },
                                        "bounds": {
                                            "additionalProperties": true,
                                            "description": "Defines the Camera bounds.",
                                            "properties": {
                                            },
                                            "title": "bounds",
                                            "type": "object"
                                        },
                                        "bounds.height": {
                                            "description": "The height of the Camera bounds.",
                                            "title": "bounds.height",
                                            "type": "number"
                                        },
                                        "bounds.width": {
                                            "description": "The width of the Camera bounds.",
                                            "title": "bounds.width",
                                            "type": "number"
                                        },
                                        "bounds.x": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.x",
                                            "type": "number"
                                        },
                                        "bounds.y": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.y",
                                            "type": "number"
                                        },
                                        "height": {
                                            "description": "The height of the Camera viewport.",
                                            "title": "height",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of the Camera.",
                                            "title": "name",
                                            "type": "string"
                                        },
                                        "rotation": {
                                            "description": "The rotation of the Camera, in radians.",
                                            "title": "rotation",
                                            "type": "number"
                                        },
                                        "roundPixels": {
                                            "description": "Should the Camera round pixels before rendering?",
                                            "title": "roundPixels",
                                            "type": "boolean"
                                        },
                                        "scrollX": {
                                            "description": "The horizontal scroll position of the Camera.",
                                            "title": "scrollX",
                                            "type": "number"
                                        },
                                        "scrollY": {
                                            "description": "The vertical scroll position of the Camera.",
                                            "title": "scrollY",
                                            "type": "number"
                                        },
                                        "width": {
                                            "description": "The width of the Camera viewport.",
                                            "title": "width",
                                            "type": "integer"
                                        },
                                        "x": {
                                            "description": "The horizontal position of the Camera viewport.",
                                            "title": "x",
                                            "type": "integer"
                                        },
                                        "y": {
                                            "description": "The vertical position of the Camera viewport.",
                                            "title": "y",
                                            "type": "integer"
                                        },
                                        "zoom": {
                                            "description": "The default zoom level of the Camera.",
                                            "title": "zoom",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "items": {
                                        "properties": {
                                            "backgroundColor": {
                                                "anyOf": [
                                                    {
                                                        "enum": [
                                                            false
                                                        ],
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "A CSS color string controlling the Camera background color.",
                                                "title": "backgroundColor"
                                            },
                                            "bounds": {
                                                "additionalProperties": true,
                                                "description": "Defines the Camera bounds.",
                                                "properties": {
                                                },
                                                "title": "bounds",
                                                "type": "object"
                                            },
                                            "bounds.height": {
                                                "description": "The height of the Camera bounds.",
                                                "title": "bounds.height",
                                                "type": "number"
                                            },
                                            "bounds.width": {
                                                "description": "The width of the Camera bounds.",
                                                "title": "bounds.width",
                                                "type": "number"
                                            },
                                            "bounds.x": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.x",
                                                "type": "number"
                                            },
                                            "bounds.y": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.y",
                                                "type": "number"
                                            },
                                            "height": {
                                                "description": "The height of the Camera viewport.",
                                                "title": "height",
                                                "type": "integer"
                                            },
                                            "name": {
                                                "description": "The name of the Camera.",
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "rotation": {
                                                "description": "The rotation of the Camera, in radians.",
                                                "title": "rotation",
                                                "type": "number"
                                            },
                                            "roundPixels": {
                                                "description": "Should the Camera round pixels before rendering?",
                                                "title": "roundPixels",
                                                "type": "boolean"
                                            },
                                            "scrollX": {
                                                "description": "The horizontal scroll position of the Camera.",
                                                "title": "scrollX",
                                                "type": "number"
                                            },
                                            "scrollY": {
                                                "description": "The vertical scroll position of the Camera.",
                                                "title": "scrollY",
                                                "type": "number"
                                            },
                                            "width": {
                                                "description": "The width of the Camera viewport.",
                                                "title": "width",
                                                "type": "integer"
                                            },
                                            "x": {
                                                "description": "The horizontal position of the Camera viewport.",
                                                "title": "x",
                                                "type": "integer"
                                            },
                                            "y": {
                                                "description": "The vertical position of the Camera viewport.",
                                                "title": "y",
                                                "type": "integer"
                                            },
                                            "zoom": {
                                                "description": "The default zoom level of the Camera.",
                                                "title": "zoom",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            ],
                            "description": "[description]",
                            "title": "cameras"
                        },
                        "data": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "data",
                            "type": "object"
                        },
                        "isBooted": {
                            "description": "[description]",
                            "title": "isBooted",
                            "type": "boolean"
                        },
                        "isTransition": {
                            "description": "[description]",
                            "title": "isTransition",
                            "type": "boolean"
                        },
                        "key": {
                            "description": "[description]",
                            "title": "key",
                            "type": "string"
                        },
                        "loader": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "loader",
                            "type": "object"
                        },
                        "map": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "[description]",
                            "title": "map",
                            "type": "object"
                        },
                        "pack": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "dataKey": {
                                            "description": "If specified instead of the whole JSON file being parsed, only the section corresponding to this property key will be added. If the property you want to extract is nested, use periods to divide it.",
                                            "title": "dataKey",
                                            "type": "string"
                                        },
                                        "extension": {
                                            "description": "The default file extension to use if no url is provided.",
                                            "title": "extension",
                                            "type": "string"
                                        },
                                        "key": {
                                            "description": "The key of the file. Must be unique within both the Loader and the JSON Cache.",
                                            "title": "key",
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The absolute or relative URL to load the file from. Or can be a ready formed JSON object, in which case it will be directly processed.",
                                            "title": "url"
                                        },
                                        "xhrSettings": {
                                            "description": "Extra XHR Settings specifically for this file.",
                                            "properties": {
                                                "async": {
                                                    "description": "Should the XHR request use async or not?",
                                                    "title": "async",
                                                    "type": "boolean"
                                                },
                                                "header": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "header",
                                                    "type": "string"
                                                },
                                                "headerValue": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "headerValue",
                                                    "type": "string"
                                                },
                                                "overrideMimeType": {
                                                    "description": "Provide a custom mime-type to use instead of the default.",
                                                    "title": "overrideMimeType",
                                                    "type": "string"
                                                },
                                                "password": {
                                                    "description": "Optional password for the XHR request.",
                                                    "title": "password",
                                                    "type": "string"
                                                },
                                                "requestedWith": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "requestedWith",
                                                    "type": "string"
                                                },
                                                "responseType": {
                                                    "$ref": "#/definitions/XMLHttpRequestResponseType",
                                                    "description": "The response type of the XHR request, i.e. `blob`, `text`, etc.",
                                                    "title": "responseType"
                                                },
                                                "timeout": {
                                                    "description": "Optional XHR timeout value.",
                                                    "title": "timeout",
                                                    "type": "integer"
                                                },
                                                "user": {
                                                    "description": "Optional username for the XHR request.",
                                                    "title": "user",
                                                    "type": "string"
                                                }
                                            },
                                            "title": "xhrSettings",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        false
                                    ],
                                    "type": "boolean"
                                }
                            ],
                            "description": "[description]",
                            "title": "pack"
                        },
                        "physics": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "physics",
                            "type": "object"
                        },
                        "plugins": {
                            "description": "[description]",
                            "title": "plugins"
                        },
                        "status": {
                            "description": "[description]",
                            "title": "status",
                            "type": "number"
                        },
                        "transitionAllowInput": {
                            "description": "[description]",
                            "title": "transitionAllowInput",
                            "type": "boolean"
                        },
                        "transitionDuration": {
                            "description": "[description]",
                            "title": "transitionDuration",
                            "type": "integer"
                        },
                        "transitionFrom": {
                            "$ref": "#/definitions/Phaser.Scene",
                            "description": "[description]",
                            "title": "transitionFrom"
                        },
                        "visible": {
                            "description": "[description]",
                            "title": "visible",
                            "type": "boolean"
                        }
                    },
                    "title": "settings",
                    "type": "object"
                },
                "target": {
                    "description": "The Gamepad Event target, as defined in the Game Config.\nTypically the browser window, but can be any interactive DOM element.",
                    "title": "target"
                },
                "total": {
                    "description": "The total number of connected game pads.",
                    "title": "total",
                    "type": "integer"
                }
            },
            "title": "Phaser.Input.Gamepad.GamepadPlugin",
            "type": "object"
        },
        "Phaser.Input.InputManager": {
            "description": "The Input Manager is responsible for handling the pointer related systems in a single Phaser Game instance.\n\nBased on the Game Config it will create handlers for mouse and touch support.\n\nKeyboard and Gamepad are plugins, handled directly by the InputPlugin class.\n\nIt then manages the event queue, pointer creation and general hit test related operations.\n\nYou rarely need to interact with the Input Manager directly, and as such, all of its properties and methods\nshould be considered private. Instead, you should use the Input Plugin, which is a Scene level system, responsible\nfor dealing with all input events for a Scene.",
            "properties": {
                "activePointer": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "The most recently active Pointer object.\n\nIf you've only 1 Pointer in your game then this will accurately be either the first finger touched, or the mouse.\n\nIf your game doesn't need to support multi-touch then you can safely use this property in all of your game\ncode and it will adapt to be either the mouse or the touch, based on device.",
                    "title": "activePointer"
                },
                "bounds": {
                    "$ref": "#/definitions/Phaser.Geom.Rectangle",
                    "description": "The bounds of the Input Manager, used for pointer hit test calculations.",
                    "title": "bounds"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "The Canvas that is used for all DOM event input listeners.",
                    "title": "canvas"
                },
                "config": {
                    "additionalProperties": true,
                    "description": "The Input Configuration object, as set in the Game Config.",
                    "properties": {
                    },
                    "title": "config",
                    "type": "object"
                },
                "defaultCursor": {
                    "description": "The default CSS cursor to be used when interacting with your game.\n\nSee the `setDefaultCursor` method for more details.",
                    "title": "defaultCursor",
                    "type": "string"
                },
                "dirty": {
                    "description": "Reset every frame. Set to `true` if any of the Pointers are dirty this frame.",
                    "title": "dirty",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "If set, the Input Manager will run its update loop every frame.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "events": {
                    "$ref": "#/definitions/Phaser.Events.EventEmitter",
                    "description": "The Event Emitter instance that the Input Manager uses to emit events from.",
                    "title": "events"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "The Game instance that owns the Input Manager.\nA Game only maintains on instance of the Input Manager at any time.",
                    "title": "game"
                },
                "globalTopOnly": {
                    "description": "If the top-most Scene in the Scene List receives an input it will stop input from\npropagating any lower down the scene list, i.e. if you have a UI Scene at the top\nand click something on it, that click will not then be passed down to any other\nScene below. Disable this to have input events passed through all Scenes, all the time.",
                    "title": "globalTopOnly",
                    "type": "boolean"
                },
                "ignoreEvents": {
                    "description": "An internal flag that controls if the Input Manager will ignore or process native DOM events this frame.\nSet via the InputPlugin.stopPropagation method.",
                    "title": "ignoreEvents",
                    "type": "boolean"
                },
                "mouse": {
                    "$ref": "#/definitions/Phaser.Input.Mouse.MouseManager",
                    "description": "A reference to the Mouse Manager class, if enabled via the `input.mouse` Game Config property.",
                    "title": "mouse"
                },
                "mousePointer": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "The mouse has its own unique Pointer object, which you can reference directly if making a _desktop specific game_.\nIf you are supporting both desktop and touch devices then do not use this property, instead use `activePointer`\nwhich will always map to the most recently interacted pointer.",
                    "title": "mousePointer"
                },
                "pointers": {
                    "description": "An array of Pointers that have been added to the game.\nThe first entry is reserved for the Mouse Pointer, the rest are Touch Pointers.\n\nBy default there is 1 touch pointer enabled. If you need more use the `addPointer` method to start them,\nor set the `input.activePointers` property in the Game Config.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Input.Pointer"
                    },
                    "title": "pointers",
                    "type": "array"
                },
                "pointersTotal": {
                    "description": "The number of touch objects activated and being processed each update.\n\nYou can change this by either calling `addPointer` at run-time, or by\nsetting the `input.activePointers` property in the Game Config.",
                    "title": "pointersTotal",
                    "type": "integer"
                },
                "queue": {
                    "description": "A standard FIFO queue for the native DOM events waiting to be handled by the Input Manager.",
                    "items": {
                    },
                    "title": "queue",
                    "type": "array"
                },
                "scale": {
                    "$ref": "#/definitions/Object",
                    "description": "The Scale factor being applied to input coordinates.",
                    "title": "scale"
                },
                "touch": {
                    "$ref": "#/definitions/Phaser.Input.Touch.TouchManager",
                    "description": "A reference to the Touch Manager class, if enabled via the `input.touch` Game Config property.",
                    "title": "touch"
                }
            },
            "title": "Phaser.Input.InputManager",
            "type": "object"
        },
        "Phaser.Input.InputPlugin": {
            "description": "The Input Plugin belongs to a Scene and handles all input related events and operations for it.\n\nYou can access it from within a Scene using `this.input`.\n\nIt emits events directly. For example, you can do:\n\n```javascript\n         * this.input.on('pointerdown', callback, context);\n         * ```\n\nTo listen for a pointer down event anywhere on the game canvas.\n\nGame Objects can be enabled for input by calling their `setInteractive` method. After which they\nwill directly emit input events:\n\n```javascript\n         * var sprite = this.add.sprite(x, y, texture);\n         * sprite.setInteractive();\n         * sprite.on('pointerdown', callback, context);\n         * ```\n\nPlease see the Input examples and tutorials for more information.",
            "properties": {
                "activePointer": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "The current active input Pointer.",
                    "title": "activePointer"
                },
                "cameras": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.CameraManager",
                    "description": "A reference to the Scene Cameras Manager. This property is set during the `boot` method.",
                    "title": "cameras"
                },
                "displayList": {
                    "$ref": "#/definitions/Phaser.GameObjects.DisplayList",
                    "description": "A reference to the Scene Display List. This property is set during the `boot` method.",
                    "title": "displayList"
                },
                "dragDistanceThreshold": {
                    "description": "The distance, in pixels, a pointer has to move while being held down, before it thinks it is being dragged.",
                    "title": "dragDistanceThreshold",
                    "type": "number"
                },
                "dragTimeThreshold": {
                    "description": "The amount of time, in ms, a pointer has to be held down before it thinks it is dragging.",
                    "title": "dragTimeThreshold",
                    "type": "number"
                },
                "enabled": {
                    "description": "If set, the Input Plugin will run its update loop every frame.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "gamepad": {
                    "$ref": "#/definitions/Phaser.Input.Gamepad.GamepadPlugin",
                    "description": "An instance of the Gamepad Plugin class, if enabled via the `input.gamepad` Scene or Game Config property.\nUse this to create access Gamepads connected to the browser and respond to gamepad buttons.",
                    "title": "gamepad"
                },
                "keyboard": {
                    "$ref": "#/definitions/Phaser.Input.Keyboard.KeyboardPlugin",
                    "description": "An instance of the Keyboard Plugin class, if enabled via the `input.keyboard` Scene or Game Config property.\nUse this to create Key objects and listen for keyboard specific events.",
                    "title": "keyboard"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Input.InputManager",
                    "description": "A reference to the Game Input Manager.",
                    "title": "manager"
                },
                "mouse": {
                    "$ref": "#/definitions/Phaser.Input.Mouse.MouseManager",
                    "description": "A reference to the Mouse Manager.\n\nThis property is only set if Mouse support has been enabled in your Game Configuration file.\n\nIf you just wish to get access to the mouse pointer, use the `mousePointer` property instead.",
                    "title": "mouse"
                },
                "mousePointer": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "The mouse has its own unique Pointer object, which you can reference directly if making a _desktop specific game_.\nIf you are supporting both desktop and touch devices then do not use this property, instead use `activePointer`\nwhich will always map to the most recently interacted pointer.",
                    "title": "mousePointer"
                },
                "pointer1": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer1"
                },
                "pointer10": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer10"
                },
                "pointer2": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer2"
                },
                "pointer3": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer3"
                },
                "pointer4": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer4"
                },
                "pointer5": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer5"
                },
                "pointer6": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer6"
                },
                "pointer7": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer7"
                },
                "pointer8": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer8"
                },
                "pointer9": {
                    "$ref": "#/definitions/Phaser.Input.Pointer",
                    "description": "A touch-based Pointer object.\nThis will be `undefined` by default unless you add a new Pointer using `addPointer`.",
                    "title": "pointer9"
                },
                "pollRate": {
                    "description": "How often should the Pointers be checked?\n\nThe value is a time, given in ms, and is the time that must have elapsed between game steps before\nthe Pointers will be polled again. When a pointer is polled it runs a hit test to see which Game\nObjects are currently below it, or being interacted with it.\n\nPointers will *always* be checked if they have been moved by the user, or press or released.\n\nThis property only controls how often they will be polled if they have not been updated.\nYou should set this if you want to have Game Objects constantly check against the pointers, even\nif the pointer didn't move itself.\n\nSet to 0 to poll constantly. Set to -1 to only poll on user movement.",
                    "title": "pollRate",
                    "type": "integer"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "A reference to the Scene that this Input Plugin is responsible for.",
                    "title": "scene"
                },
                "settings": {
                    "description": "A reference to the Scene Systems Settings.",
                    "properties": {
                        "active": {
                            "description": "[description]",
                            "title": "active",
                            "type": "boolean"
                        },
                        "cameras": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "backgroundColor": {
                                            "anyOf": [
                                                {
                                                    "enum": [
                                                        false
                                                    ],
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "description": "A CSS color string controlling the Camera background color.",
                                            "title": "backgroundColor"
                                        },
                                        "bounds": {
                                            "additionalProperties": true,
                                            "description": "Defines the Camera bounds.",
                                            "properties": {
                                            },
                                            "title": "bounds",
                                            "type": "object"
                                        },
                                        "bounds.height": {
                                            "description": "The height of the Camera bounds.",
                                            "title": "bounds.height",
                                            "type": "number"
                                        },
                                        "bounds.width": {
                                            "description": "The width of the Camera bounds.",
                                            "title": "bounds.width",
                                            "type": "number"
                                        },
                                        "bounds.x": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.x",
                                            "type": "number"
                                        },
                                        "bounds.y": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.y",
                                            "type": "number"
                                        },
                                        "height": {
                                            "description": "The height of the Camera viewport.",
                                            "title": "height",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of the Camera.",
                                            "title": "name",
                                            "type": "string"
                                        },
                                        "rotation": {
                                            "description": "The rotation of the Camera, in radians.",
                                            "title": "rotation",
                                            "type": "number"
                                        },
                                        "roundPixels": {
                                            "description": "Should the Camera round pixels before rendering?",
                                            "title": "roundPixels",
                                            "type": "boolean"
                                        },
                                        "scrollX": {
                                            "description": "The horizontal scroll position of the Camera.",
                                            "title": "scrollX",
                                            "type": "number"
                                        },
                                        "scrollY": {
                                            "description": "The vertical scroll position of the Camera.",
                                            "title": "scrollY",
                                            "type": "number"
                                        },
                                        "width": {
                                            "description": "The width of the Camera viewport.",
                                            "title": "width",
                                            "type": "integer"
                                        },
                                        "x": {
                                            "description": "The horizontal position of the Camera viewport.",
                                            "title": "x",
                                            "type": "integer"
                                        },
                                        "y": {
                                            "description": "The vertical position of the Camera viewport.",
                                            "title": "y",
                                            "type": "integer"
                                        },
                                        "zoom": {
                                            "description": "The default zoom level of the Camera.",
                                            "title": "zoom",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "items": {
                                        "properties": {
                                            "backgroundColor": {
                                                "anyOf": [
                                                    {
                                                        "enum": [
                                                            false
                                                        ],
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "A CSS color string controlling the Camera background color.",
                                                "title": "backgroundColor"
                                            },
                                            "bounds": {
                                                "additionalProperties": true,
                                                "description": "Defines the Camera bounds.",
                                                "properties": {
                                                },
                                                "title": "bounds",
                                                "type": "object"
                                            },
                                            "bounds.height": {
                                                "description": "The height of the Camera bounds.",
                                                "title": "bounds.height",
                                                "type": "number"
                                            },
                                            "bounds.width": {
                                                "description": "The width of the Camera bounds.",
                                                "title": "bounds.width",
                                                "type": "number"
                                            },
                                            "bounds.x": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.x",
                                                "type": "number"
                                            },
                                            "bounds.y": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.y",
                                                "type": "number"
                                            },
                                            "height": {
                                                "description": "The height of the Camera viewport.",
                                                "title": "height",
                                                "type": "integer"
                                            },
                                            "name": {
                                                "description": "The name of the Camera.",
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "rotation": {
                                                "description": "The rotation of the Camera, in radians.",
                                                "title": "rotation",
                                                "type": "number"
                                            },
                                            "roundPixels": {
                                                "description": "Should the Camera round pixels before rendering?",
                                                "title": "roundPixels",
                                                "type": "boolean"
                                            },
                                            "scrollX": {
                                                "description": "The horizontal scroll position of the Camera.",
                                                "title": "scrollX",
                                                "type": "number"
                                            },
                                            "scrollY": {
                                                "description": "The vertical scroll position of the Camera.",
                                                "title": "scrollY",
                                                "type": "number"
                                            },
                                            "width": {
                                                "description": "The width of the Camera viewport.",
                                                "title": "width",
                                                "type": "integer"
                                            },
                                            "x": {
                                                "description": "The horizontal position of the Camera viewport.",
                                                "title": "x",
                                                "type": "integer"
                                            },
                                            "y": {
                                                "description": "The vertical position of the Camera viewport.",
                                                "title": "y",
                                                "type": "integer"
                                            },
                                            "zoom": {
                                                "description": "The default zoom level of the Camera.",
                                                "title": "zoom",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            ],
                            "description": "[description]",
                            "title": "cameras"
                        },
                        "data": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "data",
                            "type": "object"
                        },
                        "isBooted": {
                            "description": "[description]",
                            "title": "isBooted",
                            "type": "boolean"
                        },
                        "isTransition": {
                            "description": "[description]",
                            "title": "isTransition",
                            "type": "boolean"
                        },
                        "key": {
                            "description": "[description]",
                            "title": "key",
                            "type": "string"
                        },
                        "loader": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "loader",
                            "type": "object"
                        },
                        "map": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "[description]",
                            "title": "map",
                            "type": "object"
                        },
                        "pack": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "dataKey": {
                                            "description": "If specified instead of the whole JSON file being parsed, only the section corresponding to this property key will be added. If the property you want to extract is nested, use periods to divide it.",
                                            "title": "dataKey",
                                            "type": "string"
                                        },
                                        "extension": {
                                            "description": "The default file extension to use if no url is provided.",
                                            "title": "extension",
                                            "type": "string"
                                        },
                                        "key": {
                                            "description": "The key of the file. Must be unique within both the Loader and the JSON Cache.",
                                            "title": "key",
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The absolute or relative URL to load the file from. Or can be a ready formed JSON object, in which case it will be directly processed.",
                                            "title": "url"
                                        },
                                        "xhrSettings": {
                                            "description": "Extra XHR Settings specifically for this file.",
                                            "properties": {
                                                "async": {
                                                    "description": "Should the XHR request use async or not?",
                                                    "title": "async",
                                                    "type": "boolean"
                                                },
                                                "header": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "header",
                                                    "type": "string"
                                                },
                                                "headerValue": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "headerValue",
                                                    "type": "string"
                                                },
                                                "overrideMimeType": {
                                                    "description": "Provide a custom mime-type to use instead of the default.",
                                                    "title": "overrideMimeType",
                                                    "type": "string"
                                                },
                                                "password": {
                                                    "description": "Optional password for the XHR request.",
                                                    "title": "password",
                                                    "type": "string"
                                                },
                                                "requestedWith": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "requestedWith",
                                                    "type": "string"
                                                },
                                                "responseType": {
                                                    "$ref": "#/definitions/XMLHttpRequestResponseType",
                                                    "description": "The response type of the XHR request, i.e. `blob`, `text`, etc.",
                                                    "title": "responseType"
                                                },
                                                "timeout": {
                                                    "description": "Optional XHR timeout value.",
                                                    "title": "timeout",
                                                    "type": "integer"
                                                },
                                                "user": {
                                                    "description": "Optional username for the XHR request.",
                                                    "title": "user",
                                                    "type": "string"
                                                }
                                            },
                                            "title": "xhrSettings",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        false
                                    ],
                                    "type": "boolean"
                                }
                            ],
                            "description": "[description]",
                            "title": "pack"
                        },
                        "physics": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "physics",
                            "type": "object"
                        },
                        "plugins": {
                            "description": "[description]",
                            "title": "plugins"
                        },
                        "status": {
                            "description": "[description]",
                            "title": "status",
                            "type": "number"
                        },
                        "transitionAllowInput": {
                            "description": "[description]",
                            "title": "transitionAllowInput",
                            "type": "boolean"
                        },
                        "transitionDuration": {
                            "description": "[description]",
                            "title": "transitionDuration",
                            "type": "integer"
                        },
                        "transitionFrom": {
                            "$ref": "#/definitions/Phaser.Scene",
                            "description": "[description]",
                            "title": "transitionFrom"
                        },
                        "visible": {
                            "description": "[description]",
                            "title": "visible",
                            "type": "boolean"
                        }
                    },
                    "title": "settings",
                    "type": "object"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "A reference to the Scene Systems class.",
                    "title": "systems"
                },
                "topOnly": {
                    "description": "When set to `true` (the default) the Input Plugin will emulate DOM behavior by only emitting events from\nthe top-most Game Objects in the Display List.\n\nIf set to `false` it will emit events from all Game Objects below a Pointer, not just the top one.",
                    "title": "topOnly",
                    "type": "boolean"
                },
                "x": {
                    "description": "The x coordinates of the ActivePointer based on the first camera in the camera list.\nThis is only safe to use if your game has just 1 non-transformed camera and doesn't use multi-touch.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y coordinates of the ActivePointer based on the first camera in the camera list.\nThis is only safe to use if your game has just 1 non-transformed camera and doesn't use multi-touch.",
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "Phaser.Input.InputPlugin",
            "type": "object"
        },
        "Phaser.Input.Keyboard.Key": {
            "description": "A generic Key object which can be passed to the Process functions (and so on)\nkeycode must be an integer",
            "properties": {
                "altKey": {
                    "description": "The down state of the ALT key, if pressed at the same time as this key.",
                    "title": "altKey",
                    "type": "boolean"
                },
                "ctrlKey": {
                    "description": "The down state of the CTRL key, if pressed at the same time as this key.",
                    "title": "ctrlKey",
                    "type": "boolean"
                },
                "duration": {
                    "description": "The number of milliseconds this key was held down for in the previous down - up sequence.",
                    "title": "duration",
                    "type": "number"
                },
                "enabled": {
                    "description": "Can this Key be processed?",
                    "title": "enabled",
                    "type": "boolean"
                },
                "isDown": {
                    "description": "The \"down\" state of the key. This will remain `true` for as long as the keyboard thinks this key is held down.",
                    "title": "isDown",
                    "type": "boolean"
                },
                "isUp": {
                    "description": "The \"up\" state of the key. This will remain `true` for as long as the keyboard thinks this key is up.",
                    "title": "isUp",
                    "type": "boolean"
                },
                "keyCode": {
                    "description": "The keycode of this key.",
                    "title": "keyCode",
                    "type": "integer"
                },
                "location": {
                    "description": "The location of the modifier key. 0 for standard (or unknown), 1 for left, 2 for right, 3 for numpad.",
                    "title": "location",
                    "type": "number"
                },
                "originalEvent": {
                    "$ref": "#/definitions/KeyboardEvent",
                    "description": "The original DOM event.",
                    "title": "originalEvent"
                },
                "preventDefault": {
                    "description": "Should this Key prevent event propagation?",
                    "title": "preventDefault",
                    "type": "boolean"
                },
                "repeats": {
                    "description": "If a key is held down this holds down the number of times the key has 'repeated'.",
                    "title": "repeats",
                    "type": "number"
                },
                "shiftKey": {
                    "description": "The down state of the SHIFT key, if pressed at the same time as this key.",
                    "title": "shiftKey",
                    "type": "boolean"
                },
                "timeDown": {
                    "description": "The timestamp when the key was last pressed down.",
                    "title": "timeDown",
                    "type": "number"
                },
                "timeUp": {
                    "description": "The timestamp when the key was last released.",
                    "title": "timeUp",
                    "type": "number"
                }
            },
            "title": "Phaser.Input.Keyboard.Key",
            "type": "object"
        },
        "Phaser.Input.Keyboard.KeyCombo": {
            "description": "A KeyCombo will listen for a specific string of keys from the Keyboard, and when it receives them\nit will emit a `keycombomatch` event from the Keyboard Manager.\n\nThe keys to be listened for can be defined as:\n\nA string (i.e. 'ATARI')\nAn array of either integers (key codes) or strings, or a mixture of both\nAn array of objects (such as Key objects) with a public 'keyCode' property\n\nFor example, to listen for the Konami code (up, up, down, down, left, right, left, right, b, a, enter)\nyou could pass the following array of key codes:\n\n```javascript\n             * this.input.keyboard.createCombo([ 38, 38, 40, 40, 37, 39, 37, 39, 66, 65, 13 ], { resetOnMatch: true });\n             * \n             * this.input.keyboard.on('keycombomatch', function (event) {\n             *     console.log('Konami Code entered!');\n             * });\n             * ```\n\nOr, to listen for the user entering the word PHASER:\n\n```javascript\n             * this.input.keyboard.createCombo('PHASER');\n             * ```",
            "properties": {
                "current": {
                    "description": "The current keyCode the combo is waiting for.",
                    "title": "current",
                    "type": "integer"
                },
                "deleteOnMatch": {
                    "description": "If the combo matches, will it delete itself?",
                    "title": "deleteOnMatch",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "A flag that controls if this Key Combo is actively processing keys or not.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "index": {
                    "description": "The current index of the key being waited for in the 'keys' string.",
                    "title": "index",
                    "type": "integer"
                },
                "keyCodes": {
                    "description": "An array of the keycodes that comprise this combo.",
                    "items": {
                    },
                    "title": "keyCodes",
                    "type": "array"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Input.Keyboard.KeyboardPlugin",
                    "description": "A reference to the Keyboard Manager",
                    "title": "manager"
                },
                "matched": {
                    "description": "Has this Key Combo been matched yet?",
                    "title": "matched",
                    "type": "boolean"
                },
                "maxKeyDelay": {
                    "description": "The max delay in ms between each key press. Above this the combo is reset. 0 means disabled.",
                    "title": "maxKeyDelay",
                    "type": "integer"
                },
                "progress": {
                    "description": "How far complete is this combo? A value between 0 and 1.",
                    "title": "progress",
                    "type": "number"
                },
                "resetOnMatch": {
                    "description": "If previously matched and they press the first key of the combo again, will it reset?",
                    "title": "resetOnMatch",
                    "type": "boolean"
                },
                "resetOnWrongKey": {
                    "description": "If they press the wrong key do we reset the combo?",
                    "title": "resetOnWrongKey",
                    "type": "boolean"
                },
                "size": {
                    "description": "The length of this combo (in keycodes)",
                    "title": "size",
                    "type": "number"
                },
                "timeLastMatched": {
                    "description": "The time the previous key in the combo was matched.",
                    "title": "timeLastMatched",
                    "type": "number"
                },
                "timeMatched": {
                    "description": "The time the entire combo was matched.",
                    "title": "timeMatched",
                    "type": "number"
                }
            },
            "title": "Phaser.Input.Keyboard.KeyCombo",
            "type": "object"
        },
        "Phaser.Input.Keyboard.KeyboardPlugin": {
            "description": "The Keyboard Plugin is an input plugin that belongs to the Scene-owned Input system.\n\nIts role is to listen for native DOM Keyboard Events and then process them.\n\nYou do not need to create this class directly, the Input system will create an instance of it automatically.\n\nYou can access it from within a Scene using `this.input.keyboard`. For example, you can do:\n\n```javascript\n             * this.input.keyboard.on('keydown', callback, context);\n             * ```\n\nOr, to listen for a specific key:\n\n```javascript\n             * this.input.keyboard.on('keydown_A', callback, context);\n             * ```\n\nYou can also create Key objects, which you can then poll in your game loop:\n\n```javascript\n             * var spaceBar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n             * ```\n\n_Note_: Many keyboards are unable to process certain combinations of keys due to hardware limitations known as ghosting.\nSee http://www.html5gamedevs.com/topic/4876-impossible-to-use-more-than-2-keyboard-input-buttons-at-the-same-time/ for more details.\n\nAlso please be aware that certain browser extensions can disable or override Phaser keyboard handling.\nFor example the Chrome extension vimium is known to disable Phaser from using the D key, while EverNote disables the backtick key.\nAnd there are others. So, please check your extensions before opening Phaser issues about keys that don't work.",
            "properties": {
                "combos": {
                    "description": "An array of KeyCombo objects to process.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Input.Keyboard.KeyCombo"
                    },
                    "title": "combos",
                    "type": "array"
                },
                "enabled": {
                    "description": "A boolean that controls if the Keyboard Plugin is enabled or not.\nCan be toggled on the fly.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "keys": {
                    "description": "An array of Key objects to process.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Input.Keyboard.Key"
                    },
                    "title": "keys",
                    "type": "array"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "A reference to the Scene that this Input Plugin is responsible for.",
                    "title": "scene"
                },
                "sceneInputPlugin": {
                    "$ref": "#/definitions/Phaser.Input.InputPlugin",
                    "description": "A reference to the Scene Input Plugin that created this Keyboard Plugin.",
                    "title": "sceneInputPlugin"
                },
                "settings": {
                    "description": "A reference to the Scene Systems Settings.",
                    "properties": {
                        "active": {
                            "description": "[description]",
                            "title": "active",
                            "type": "boolean"
                        },
                        "cameras": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "backgroundColor": {
                                            "anyOf": [
                                                {
                                                    "enum": [
                                                        false
                                                    ],
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "description": "A CSS color string controlling the Camera background color.",
                                            "title": "backgroundColor"
                                        },
                                        "bounds": {
                                            "additionalProperties": true,
                                            "description": "Defines the Camera bounds.",
                                            "properties": {
                                            },
                                            "title": "bounds",
                                            "type": "object"
                                        },
                                        "bounds.height": {
                                            "description": "The height of the Camera bounds.",
                                            "title": "bounds.height",
                                            "type": "number"
                                        },
                                        "bounds.width": {
                                            "description": "The width of the Camera bounds.",
                                            "title": "bounds.width",
                                            "type": "number"
                                        },
                                        "bounds.x": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.x",
                                            "type": "number"
                                        },
                                        "bounds.y": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.y",
                                            "type": "number"
                                        },
                                        "height": {
                                            "description": "The height of the Camera viewport.",
                                            "title": "height",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of the Camera.",
                                            "title": "name",
                                            "type": "string"
                                        },
                                        "rotation": {
                                            "description": "The rotation of the Camera, in radians.",
                                            "title": "rotation",
                                            "type": "number"
                                        },
                                        "roundPixels": {
                                            "description": "Should the Camera round pixels before rendering?",
                                            "title": "roundPixels",
                                            "type": "boolean"
                                        },
                                        "scrollX": {
                                            "description": "The horizontal scroll position of the Camera.",
                                            "title": "scrollX",
                                            "type": "number"
                                        },
                                        "scrollY": {
                                            "description": "The vertical scroll position of the Camera.",
                                            "title": "scrollY",
                                            "type": "number"
                                        },
                                        "width": {
                                            "description": "The width of the Camera viewport.",
                                            "title": "width",
                                            "type": "integer"
                                        },
                                        "x": {
                                            "description": "The horizontal position of the Camera viewport.",
                                            "title": "x",
                                            "type": "integer"
                                        },
                                        "y": {
                                            "description": "The vertical position of the Camera viewport.",
                                            "title": "y",
                                            "type": "integer"
                                        },
                                        "zoom": {
                                            "description": "The default zoom level of the Camera.",
                                            "title": "zoom",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "items": {
                                        "properties": {
                                            "backgroundColor": {
                                                "anyOf": [
                                                    {
                                                        "enum": [
                                                            false
                                                        ],
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "A CSS color string controlling the Camera background color.",
                                                "title": "backgroundColor"
                                            },
                                            "bounds": {
                                                "additionalProperties": true,
                                                "description": "Defines the Camera bounds.",
                                                "properties": {
                                                },
                                                "title": "bounds",
                                                "type": "object"
                                            },
                                            "bounds.height": {
                                                "description": "The height of the Camera bounds.",
                                                "title": "bounds.height",
                                                "type": "number"
                                            },
                                            "bounds.width": {
                                                "description": "The width of the Camera bounds.",
                                                "title": "bounds.width",
                                                "type": "number"
                                            },
                                            "bounds.x": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.x",
                                                "type": "number"
                                            },
                                            "bounds.y": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.y",
                                                "type": "number"
                                            },
                                            "height": {
                                                "description": "The height of the Camera viewport.",
                                                "title": "height",
                                                "type": "integer"
                                            },
                                            "name": {
                                                "description": "The name of the Camera.",
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "rotation": {
                                                "description": "The rotation of the Camera, in radians.",
                                                "title": "rotation",
                                                "type": "number"
                                            },
                                            "roundPixels": {
                                                "description": "Should the Camera round pixels before rendering?",
                                                "title": "roundPixels",
                                                "type": "boolean"
                                            },
                                            "scrollX": {
                                                "description": "The horizontal scroll position of the Camera.",
                                                "title": "scrollX",
                                                "type": "number"
                                            },
                                            "scrollY": {
                                                "description": "The vertical scroll position of the Camera.",
                                                "title": "scrollY",
                                                "type": "number"
                                            },
                                            "width": {
                                                "description": "The width of the Camera viewport.",
                                                "title": "width",
                                                "type": "integer"
                                            },
                                            "x": {
                                                "description": "The horizontal position of the Camera viewport.",
                                                "title": "x",
                                                "type": "integer"
                                            },
                                            "y": {
                                                "description": "The vertical position of the Camera viewport.",
                                                "title": "y",
                                                "type": "integer"
                                            },
                                            "zoom": {
                                                "description": "The default zoom level of the Camera.",
                                                "title": "zoom",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            ],
                            "description": "[description]",
                            "title": "cameras"
                        },
                        "data": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "data",
                            "type": "object"
                        },
                        "isBooted": {
                            "description": "[description]",
                            "title": "isBooted",
                            "type": "boolean"
                        },
                        "isTransition": {
                            "description": "[description]",
                            "title": "isTransition",
                            "type": "boolean"
                        },
                        "key": {
                            "description": "[description]",
                            "title": "key",
                            "type": "string"
                        },
                        "loader": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "loader",
                            "type": "object"
                        },
                        "map": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "[description]",
                            "title": "map",
                            "type": "object"
                        },
                        "pack": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "dataKey": {
                                            "description": "If specified instead of the whole JSON file being parsed, only the section corresponding to this property key will be added. If the property you want to extract is nested, use periods to divide it.",
                                            "title": "dataKey",
                                            "type": "string"
                                        },
                                        "extension": {
                                            "description": "The default file extension to use if no url is provided.",
                                            "title": "extension",
                                            "type": "string"
                                        },
                                        "key": {
                                            "description": "The key of the file. Must be unique within both the Loader and the JSON Cache.",
                                            "title": "key",
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The absolute or relative URL to load the file from. Or can be a ready formed JSON object, in which case it will be directly processed.",
                                            "title": "url"
                                        },
                                        "xhrSettings": {
                                            "description": "Extra XHR Settings specifically for this file.",
                                            "properties": {
                                                "async": {
                                                    "description": "Should the XHR request use async or not?",
                                                    "title": "async",
                                                    "type": "boolean"
                                                },
                                                "header": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "header",
                                                    "type": "string"
                                                },
                                                "headerValue": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "headerValue",
                                                    "type": "string"
                                                },
                                                "overrideMimeType": {
                                                    "description": "Provide a custom mime-type to use instead of the default.",
                                                    "title": "overrideMimeType",
                                                    "type": "string"
                                                },
                                                "password": {
                                                    "description": "Optional password for the XHR request.",
                                                    "title": "password",
                                                    "type": "string"
                                                },
                                                "requestedWith": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "requestedWith",
                                                    "type": "string"
                                                },
                                                "responseType": {
                                                    "$ref": "#/definitions/XMLHttpRequestResponseType",
                                                    "description": "The response type of the XHR request, i.e. `blob`, `text`, etc.",
                                                    "title": "responseType"
                                                },
                                                "timeout": {
                                                    "description": "Optional XHR timeout value.",
                                                    "title": "timeout",
                                                    "type": "integer"
                                                },
                                                "user": {
                                                    "description": "Optional username for the XHR request.",
                                                    "title": "user",
                                                    "type": "string"
                                                }
                                            },
                                            "title": "xhrSettings",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        false
                                    ],
                                    "type": "boolean"
                                }
                            ],
                            "description": "[description]",
                            "title": "pack"
                        },
                        "physics": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "physics",
                            "type": "object"
                        },
                        "plugins": {
                            "description": "[description]",
                            "title": "plugins"
                        },
                        "status": {
                            "description": "[description]",
                            "title": "status",
                            "type": "number"
                        },
                        "transitionAllowInput": {
                            "description": "[description]",
                            "title": "transitionAllowInput",
                            "type": "boolean"
                        },
                        "transitionDuration": {
                            "description": "[description]",
                            "title": "transitionDuration",
                            "type": "integer"
                        },
                        "transitionFrom": {
                            "$ref": "#/definitions/Phaser.Scene",
                            "description": "[description]",
                            "title": "transitionFrom"
                        },
                        "visible": {
                            "description": "[description]",
                            "title": "visible",
                            "type": "boolean"
                        }
                    },
                    "title": "settings",
                    "type": "object"
                },
                "target": {
                    "description": "The Keyboard Event target, as defined in the Scene or Game Config.\nTypically the browser window, but can be any interactive DOM element.",
                    "title": "target"
                }
            },
            "title": "Phaser.Input.Keyboard.KeyboardPlugin",
            "type": "object"
        },
        "Phaser.Input.Mouse.MouseManager": {
            "description": "The Mouse Manager is a helper class that belongs to the Input Manager.\n\nIts role is to listen for native DOM Mouse Events and then pass them onto the Input Manager for further processing.\n\nYou do not need to create this class directly, the Input Manager will create an instance of it automatically.",
            "properties": {
                "capture": {
                    "description": "If true the DOM mouse events will have event.preventDefault applied to them, if false they will propagate fully.",
                    "title": "capture",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "A boolean that controls if the Mouse Manager is enabled or not.\nCan be toggled on the fly.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "locked": {
                    "description": "If the mouse has been pointer locked successfully this will be set to true.",
                    "title": "locked",
                    "type": "boolean"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Input.InputManager",
                    "description": "A reference to the Input Manager.",
                    "title": "manager"
                },
                "target": {
                    "description": "The Touch Event target, as defined in the Game Config.\nTypically the canvas to which the game is rendering, but can be any interactive DOM element.",
                    "title": "target"
                }
            },
            "title": "Phaser.Input.Mouse.MouseManager",
            "type": "object"
        },
        "Phaser.Input.Pointer": {
            "description": "A Pointer object encapsulates both mouse and touch input within Phaser.\n\nBy default, Phaser will create 2 pointers for your game to use. If you require more, i.e. for a multi-touch\ngame, then use the `InputPlugin.addPointer` method to do so, rather than instantiating this class directly,\notherwise it won't be managed by the input system.\n\nYou can reference the current active pointer via `InputPlugin.activePointer`. You can also use the properties\n`InputPlugin.pointer1` through to `pointer10`, for each pointer you have enabled in your game.\n\nThe properties of this object are set by the Input Plugin during processing. This object is then sent in all\ninput related events that the Input Plugin emits, so you can reference properties from it directly in your\ncallbacks.",
            "properties": {
                "active": {
                    "description": "An active Pointer is one that is currently pressed down on the display.\nA Mouse is always considered as active.",
                    "title": "active",
                    "type": "boolean"
                },
                "buttons": {
                    "description": "0: No button or un-initialized\n1: Left button\n2: Right button\n4: Wheel button or middle button\n8: 4th button (typically the \"Browser Back\" button)\n16: 5th button (typically the \"Browser Forward\" button)\n\nFor a mouse configured for left-handed use, the button actions are reversed.\nIn this case, the values are read from right to left.",
                    "title": "buttons",
                    "type": "integer"
                },
                "camera": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                    "description": "The camera the Pointer interacted with during its last update.\n\nA Pointer can only ever interact with one camera at once, which will be the top-most camera\nin the list should multiple cameras be positioned on-top of each other.",
                    "title": "camera"
                },
                "dirty": {
                    "description": "A dirty flag for this Pointer, used internally by the Input Plugin.",
                    "title": "dirty",
                    "type": "boolean"
                },
                "downTime": {
                    "description": "Time when Button 1 (left button), or Touch, was pressed, used for dragging objects.",
                    "title": "downTime",
                    "type": "number"
                },
                "downX": {
                    "description": "X coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.",
                    "title": "downX",
                    "type": "number"
                },
                "downY": {
                    "description": "Y coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.",
                    "title": "downY",
                    "type": "number"
                },
                "dragState": {
                    "description": "The Drag State of the Pointer:\n\n0 = Not dragging anything\n1 = Being checked if dragging\n2 = Dragging something",
                    "title": "dragState",
                    "type": "number"
                },
                "event": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/MouseEvent"
                        },
                        {
                            "$ref": "#/definitions/TouchEvent"
                        }
                    ],
                    "description": "The most recent native DOM Event this Pointer has processed.",
                    "title": "event"
                },
                "id": {
                    "description": "The internal ID of this Pointer.",
                    "title": "id",
                    "type": "integer"
                },
                "identifier": {
                    "description": "The identifier property of the Pointer as set by the DOM event when this Pointer is started.",
                    "title": "identifier",
                    "type": "number"
                },
                "isDown": {
                    "description": "Is _any_ button on this pointer considered as being down?",
                    "title": "isDown",
                    "type": "boolean"
                },
                "justDown": {
                    "description": "Is this Pointer considered as being \"just down\" or not?",
                    "title": "justDown",
                    "type": "boolean"
                },
                "justMoved": {
                    "description": "Is this Pointer considered as being \"just moved\" or not?",
                    "title": "justMoved",
                    "type": "boolean"
                },
                "justUp": {
                    "description": "Is this Pointer considered as being \"just up\" or not?",
                    "title": "justUp",
                    "type": "boolean"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Input.InputManager",
                    "description": "A reference to the Input Manager.",
                    "title": "manager"
                },
                "movementX": {
                    "description": "If the mouse is locked, the horizontal relative movement of the Pointer in pixels since last frame.",
                    "title": "movementX",
                    "type": "number"
                },
                "movementY": {
                    "description": "If the mouse is locked, the vertical relative movement of the Pointer in pixels since last frame.",
                    "title": "movementY",
                    "type": "number"
                },
                "pointerId": {
                    "description": "The pointerId property of the Pointer as set by the DOM event when this Pointer is started.\nThe browser can and will recycle this value.",
                    "title": "pointerId",
                    "type": "number"
                },
                "position": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The position of the Pointer in screen space.",
                    "title": "position"
                },
                "prevPosition": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The previous position of the Pointer in screen space.\n\nThe old x and y values are stored in here during the InputManager.transformPointer call.\n\nYou can use it to track how fast the pointer is moving, or to smoothly interpolate between the old and current position.\nSee the `Pointer.getInterpolatedPosition` method to assist in this.",
                    "title": "prevPosition"
                },
                "primaryDown": {
                    "description": "Is the primary button down? (usually button 0, the left mouse button)",
                    "title": "primaryDown",
                    "type": "boolean"
                },
                "upTime": {
                    "description": "Time when Button 1 (left button), or Touch, was released, used for dragging objects.",
                    "title": "upTime",
                    "type": "number"
                },
                "upX": {
                    "description": "X coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.",
                    "title": "upX",
                    "type": "number"
                },
                "upY": {
                    "description": "Y coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.",
                    "title": "upY",
                    "type": "number"
                },
                "wasCanceled": {
                    "description": "Did this Pointer get canceled by a touchcancel event?\n\nNote: \"canceled\" is the American-English spelling of \"cancelled\". Please don't submit PRs correcting it!",
                    "title": "wasCanceled",
                    "type": "boolean"
                },
                "wasTouch": {
                    "description": "Did the previous input event come from a Touch input (true) or Mouse? (false)",
                    "title": "wasTouch",
                    "type": "boolean"
                },
                "worldX": {
                    "description": "The x position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.",
                    "title": "worldX",
                    "type": "number"
                },
                "worldY": {
                    "description": "The y position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.",
                    "title": "worldY",
                    "type": "number"
                },
                "x": {
                    "description": "The x position of this Pointer.\nThe value is in screen space.\nSee `worldX` to get a camera converted position.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of this Pointer.\nThe value is in screen space.\nSee `worldY` to get a camera converted position.",
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "Phaser.Input.Pointer",
            "type": "object"
        },
        "Phaser.Input.Touch.TouchManager": {
            "description": "The Touch Manager is a helper class that belongs to the Input Manager.\n\nIts role is to listen for native DOM Touch Events and then pass them onto the Input Manager for further processing.\n\nYou do not need to create this class directly, the Input Manager will create an instance of it automatically.",
            "properties": {
                "capture": {
                    "description": "If true the DOM events will have event.preventDefault applied to them, if false they will propagate fully.",
                    "title": "capture",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "A boolean that controls if the Touch Manager is enabled or not.\nCan be toggled on the fly.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Input.InputManager",
                    "description": "A reference to the Input Manager.",
                    "title": "manager"
                },
                "onTouchCancel": {
                    "$ref": "#/definitions/Function",
                    "description": "The Touch Cancel event handler function.\nInitially empty and bound in the `startListeners` method.",
                    "title": "onTouchCancel"
                },
                "onTouchEnd": {
                    "$ref": "#/definitions/Function",
                    "description": "The Touch End event handler function.\nInitially empty and bound in the `startListeners` method.",
                    "title": "onTouchEnd"
                },
                "onTouchMove": {
                    "$ref": "#/definitions/Function",
                    "description": "The Touch Move event handler function.\nInitially empty and bound in the `startListeners` method.",
                    "title": "onTouchMove"
                },
                "onTouchStart": {
                    "$ref": "#/definitions/Function",
                    "description": "The Touch Start event handler function.\nInitially empty and bound in the `startListeners` method.",
                    "title": "onTouchStart"
                },
                "target": {
                    "description": "The Touch Event target, as defined in the Game Config.\nTypically the canvas to which the game is rendering, but can be any interactive DOM element.",
                    "title": "target"
                }
            },
            "title": "Phaser.Input.Touch.TouchManager",
            "type": "object"
        },
        "Phaser.Loader.File": {
            "description": "The base File class used by all File Types that the Loader can support.\nYou shouldn't create an instance of a File directly, but should extend it with your own class, setting a custom type and processing methods.",
            "properties": {
                "bytesLoaded": {
                    "description": "Updated as the file loads.\nOnly set if loading via XHR.",
                    "title": "bytesLoaded",
                    "type": "number"
                },
                "bytesTotal": {
                    "description": "The total size of this file.\nSet by onProgress and only if loading via XHR.",
                    "title": "bytesTotal",
                    "type": "number"
                },
                "cache": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Cache.BaseCache"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Textures.TextureManager"
                        }
                    ],
                    "description": "A reference to the Cache, or Texture Manager, that is going to store this file if it loads.",
                    "title": "cache"
                },
                "config": {
                    "description": "A config object that can be used by file types to store transitional data.",
                    "title": "config"
                },
                "crossOrigin": {
                    "description": "For CORs based loading.\nIf this is undefined then the File will check BaseLoader.crossOrigin and use that (if set)",
                    "title": "crossOrigin",
                    "type": "string"
                },
                "data": {
                    "description": "The processed file data, stored here after the file has loaded.",
                    "title": "data"
                },
                "key": {
                    "description": "Unique cache key (unique within its file type)",
                    "title": "key",
                    "type": "string"
                },
                "linkFile": {
                    "$ref": "#/definitions/Phaser.Loader.File",
                    "description": "Does this file have an associated linked file? Such as an image and a normal map.\nAtlases and Bitmap Fonts use the multiFile, because those files need loading together but aren't\nactually bound by data, where-as a linkFile is.",
                    "title": "linkFile"
                },
                "loader": {
                    "$ref": "#/definitions/Phaser.Loader.LoaderPlugin",
                    "description": "A reference to the Loader that is going to load this file.",
                    "title": "loader"
                },
                "multiFile": {
                    "$ref": "#/definitions/Phaser.Loader.MultiFile",
                    "description": "If this is a multipart file, i.e. an atlas and its json together, then this is a reference\nto the parent MultiFile. Set and used internally by the Loader or specific file types.",
                    "title": "multiFile"
                },
                "percentComplete": {
                    "description": "A percentage value between 0 and 1 indicating how much of this file has loaded.\nOnly set if loading via XHR.",
                    "title": "percentComplete",
                    "type": "number"
                },
                "src": {
                    "description": "The final URL this file will load from, including baseURL and path.\nSet automatically when the Loader calls 'load' on this file.",
                    "title": "src",
                    "type": "string"
                },
                "state": {
                    "description": "The current state of the file. One of the FILE_CONST values.",
                    "title": "state",
                    "type": "integer"
                },
                "type": {
                    "description": "The file type string (image, json, etc) for sorting within the Loader.",
                    "title": "type",
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the file, not including baseURL.\nAutomatically has Loader.path prepended to it.",
                    "title": "url",
                    "type": "string"
                },
                "xhrLoader": {
                    "$ref": "#/definitions/XMLHttpRequest",
                    "description": "The XMLHttpRequest instance (as created by XHR Loader) that is loading this File.",
                    "title": "xhrLoader"
                },
                "xhrSettings": {
                    "description": "The merged XHRSettings for this file.",
                    "properties": {
                        "async": {
                            "description": "Should the XHR request use async or not?",
                            "title": "async",
                            "type": "boolean"
                        },
                        "header": {
                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                            "title": "header",
                            "type": "string"
                        },
                        "headerValue": {
                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                            "title": "headerValue",
                            "type": "string"
                        },
                        "overrideMimeType": {
                            "description": "Provide a custom mime-type to use instead of the default.",
                            "title": "overrideMimeType",
                            "type": "string"
                        },
                        "password": {
                            "description": "Optional password for the XHR request.",
                            "title": "password",
                            "type": "string"
                        },
                        "requestedWith": {
                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                            "title": "requestedWith",
                            "type": "string"
                        },
                        "responseType": {
                            "$ref": "#/definitions/XMLHttpRequestResponseType",
                            "description": "The response type of the XHR request, i.e. `blob`, `text`, etc.",
                            "title": "responseType"
                        },
                        "timeout": {
                            "description": "Optional XHR timeout value.",
                            "title": "timeout",
                            "type": "integer"
                        },
                        "user": {
                            "description": "Optional username for the XHR request.",
                            "title": "user",
                            "type": "string"
                        }
                    },
                    "title": "xhrSettings",
                    "type": "object"
                }
            },
            "title": "Phaser.Loader.File",
            "type": "object"
        },
        "Phaser.Loader.LoaderPlugin": {
            "description": "The Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\nYou typically interact with it via `this.load` in your Scene. Scenes can have a `preload` method, which is always\ncalled before the Scenes `create` method, allowing you to preload assets that the Scene may need.\n\nIf you call any `this.load` methods from outside of `Scene.preload` then you need to start the Loader going\nyourself by calling `Loader.start()`. It's only automatically started during the Scene preload.\n\nThe Loader uses a combination of tag loading (eg. Audio elements) and XHR and provides progress and completion events.\nFiles are loaded in parallel by default. The amount of concurrent connections can be controlled in your Game Configuration.\n\nOnce the Loader has started loading you are still able to add files to it. These can be injected as a result of a loader\nevent, the type of file being loaded (such as a pack file) or other external events. As long as the Loader hasn't finished\nsimply adding a new file to it, while running, will ensure it's added into the current queue.\n\nEvery Scene has its own instance of the Loader and they are bound to the Scene in which they are created. However,\nassets loaded by the Loader are placed into global game-level caches. For example, loading an XML file will place that\nfile inside `Game.cache.xml`, which is accessible from every Scene in your game, no matter who was responsible\nfor loading it. The same is true of Textures. A texture loaded in one Scene is instantly available to all other Scenes\nin your game.\n\nThe Loader works by using custom File Types. These are stored in the FileTypesManager, which injects them into the Loader\nwhen it's instantiated. You can create your own custom file types by extending either the File or MultiFile classes.\nSee those files for more details.",
            "properties": {
                "baseURL": {
                    "description": "If you want to append a URL before the path of any asset you can set this here.\n\nUseful if allowing the asset base url to be configured outside of the game code.\n\nIf you set this property directly then it _must_ end with a \"/\". Alternatively, call `setBaseURL()` and it'll do it for you.",
                    "title": "baseURL",
                    "type": "string"
                },
                "cacheManager": {
                    "$ref": "#/definitions/Phaser.Cache.CacheManager",
                    "description": "A reference to the global Cache Manager.",
                    "title": "cacheManager"
                },
                "crossOrigin": {
                    "description": "The crossOrigin value applied to loaded images. Very often this needs to be set to 'anonymous'.",
                    "title": "crossOrigin",
                    "type": "string"
                },
                "inflight": {
                    "$ref": "#/definitions/Phaser.Structs.Set<Phaser.Loader.File>",
                    "description": "Files are stored in this Set while they're in the process of being loaded.\n\nUpon a successful load they are moved to the `queue` Set.\n\nBy the end of the load process this Set will be empty.",
                    "title": "inflight"
                },
                "list": {
                    "$ref": "#/definitions/Phaser.Structs.Set<Phaser.Loader.File>",
                    "description": "Files are placed in this Set when they're added to the Loader via `addFile`.\n\nThey are moved to the `inflight` Set when they start loading, and assuming a successful\nload, to the `queue` Set for further processing.\n\nBy the end of the load process this Set will be empty.",
                    "title": "list"
                },
                "maxParallelDownloads": {
                    "description": "The number of concurrent / parallel resources to try and fetch at once.\n\nOld browsers limit 6 requests per domain; modern ones, especially those with HTTP/2 don't limit it at all.\n\nThe default is 32 but you can change this in your Game Config, or by changing this property before the Loader starts.",
                    "title": "maxParallelDownloads",
                    "type": "integer"
                },
                "path": {
                    "description": "The value of `path`, if set, is placed before any _relative_ file path given. For example:\n\n```javascript\n             * this.load.path = \"images/sprites/\";\n             * this.load.image(\"ball\", \"ball.png\");\n             * this.load.image(\"tree\", \"level1/oaktree.png\");\n             * this.load.image(\"boom\", \"http://server.com/explode.png\");\n             * ```\n\nWould load the `ball` file from `images/sprites/ball.png` and the tree from\n`images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\ngiven as it's an absolute URL.\n\nPlease note that the path is added before the filename but *after* the baseURL (if set.)\n\nIf you set this property directly then it _must_ end with a \"/\". Alternatively, call `setPath()` and it'll do it for you.",
                    "title": "path",
                    "type": "string"
                },
                "prefix": {
                    "description": "An optional prefix that is automatically prepended to the start of every file key.\nIf prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\nYou can set this directly, or call `Loader.setPrefix()`. It will then affect every file added to the Loader\nfrom that point on. It does _not_ change any file already in the load queue.",
                    "title": "prefix",
                    "type": "string"
                },
                "progress": {
                    "description": "The progress of the current load queue, as a float value between 0 and 1.\nThis is updated automatically as files complete loading.\nNote that it is possible for this value to go down again if you add content to the current load queue during a load.",
                    "title": "progress",
                    "type": "number"
                },
                "queue": {
                    "$ref": "#/definitions/Phaser.Structs.Set<Phaser.Loader.File>",
                    "description": "Files are stored in this Set while they're being processed.\n\nIf the process is successful they are moved to their final destination, which could be\na Cache or the Texture Manager.\n\nAt the end of the load process this Set will be empty.",
                    "title": "queue"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene which owns this Loader instance.",
                    "title": "scene"
                },
                "state": {
                    "description": "The current state of the Loader.",
                    "title": "state",
                    "type": "integer"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "A reference to the Scene Systems.",
                    "title": "systems"
                },
                "textureManager": {
                    "$ref": "#/definitions/Phaser.Textures.TextureManager",
                    "description": "A reference to the global Texture Manager.",
                    "title": "textureManager"
                },
                "totalComplete": {
                    "description": "The total number of files that successfully loaded during the most recent load.\nThis value is reset when you call `Loader.start`.",
                    "title": "totalComplete",
                    "type": "integer"
                },
                "totalFailed": {
                    "description": "The total number of files that failed to load during the most recent load.\nThis value is reset when you call `Loader.start`.",
                    "title": "totalFailed",
                    "type": "integer"
                },
                "totalToLoad": {
                    "description": "The total number of files to load. It may not always be accurate because you may add to the Loader during the process\nof loading, especially if you load a Pack File. Therefore this value can change, but in most cases remains static.",
                    "title": "totalToLoad",
                    "type": "integer"
                },
                "xhr": {
                    "description": "xhr specific global settings (can be overridden on a per-file basis)",
                    "properties": {
                        "async": {
                            "description": "Should the XHR request use async or not?",
                            "title": "async",
                            "type": "boolean"
                        },
                        "header": {
                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                            "title": "header",
                            "type": "string"
                        },
                        "headerValue": {
                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                            "title": "headerValue",
                            "type": "string"
                        },
                        "overrideMimeType": {
                            "description": "Provide a custom mime-type to use instead of the default.",
                            "title": "overrideMimeType",
                            "type": "string"
                        },
                        "password": {
                            "description": "Optional password for the XHR request.",
                            "title": "password",
                            "type": "string"
                        },
                        "requestedWith": {
                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                            "title": "requestedWith",
                            "type": "string"
                        },
                        "responseType": {
                            "$ref": "#/definitions/XMLHttpRequestResponseType",
                            "description": "The response type of the XHR request, i.e. `blob`, `text`, etc.",
                            "title": "responseType"
                        },
                        "timeout": {
                            "description": "Optional XHR timeout value.",
                            "title": "timeout",
                            "type": "integer"
                        },
                        "user": {
                            "description": "Optional username for the XHR request.",
                            "title": "user",
                            "type": "string"
                        }
                    },
                    "title": "xhr",
                    "type": "object"
                }
            },
            "title": "Phaser.Loader.LoaderPlugin",
            "type": "object"
        },
        "Phaser.Loader.MultiFile": {
            "description": "A MultiFile is a special kind of parent that contains two, or more, Files as children and looks after\nthe loading and processing of them all. It is commonly extended and used as a base class for file types such as AtlasJSON or BitmapFont.\n\nYou shouldn't create an instance of a MultiFile directly, but should extend it with your own class, setting a custom type and processing methods.",
            "properties": {
                "complete": {
                    "description": "The completion status of this MultiFile.",
                    "title": "complete",
                    "type": "boolean"
                },
                "config": {
                    "description": "A storage container for transient data that the loading files need.",
                    "title": "config"
                },
                "failed": {
                    "description": "The number of files that failed to load.",
                    "title": "failed",
                    "type": "integer"
                },
                "files": {
                    "description": "Array of files that make up this MultiFile.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Loader.File"
                    },
                    "title": "files",
                    "type": "array"
                },
                "key": {
                    "description": "Unique cache key (unique within its file type)",
                    "title": "key",
                    "type": "string"
                },
                "loader": {
                    "$ref": "#/definitions/Phaser.Loader.LoaderPlugin",
                    "description": "A reference to the Loader that is going to load this file.",
                    "title": "loader"
                },
                "pending": {
                    "description": "The number of files to load.",
                    "title": "pending",
                    "type": "integer"
                },
                "type": {
                    "description": "The file type string for sorting within the Loader.",
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "Phaser.Loader.MultiFile",
            "type": "object"
        },
        "Phaser.Math.Vector2": {
            "description": "A representation of a vector in 2D space.\n\nA two-component vector.",
            "properties": {
                "x": {
                    "description": "The x component of this Vector.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y component of this Vector.",
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "Phaser.Math.Vector2",
            "type": "object"
        },
        "Phaser.Physics.Arcade.ArcadePhysics": {
            "description": "The Arcade Physics Plugin belongs to a Scene and sets up and manages the Scene's physics simulation.\nIt also holds some useful methods for moving and rotating Arcade Physics Bodies.\n\nYou can access it from within a Scene using `this.physics`.",
            "properties": {
                "add": {
                    "$ref": "#/definitions/Phaser.Physics.Arcade.Factory",
                    "description": "An object holding the Arcade Physics factory methods.",
                    "title": "add"
                },
                "config": {
                    "additionalProperties": true,
                    "description": "A configuration object. Union of the `physics.arcade.*` properties of the GameConfig and SceneConfig objects.",
                    "properties": {
                    },
                    "title": "config",
                    "type": "object"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene that this Plugin belongs to.",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "The Scene's Systems.",
                    "title": "systems"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Arcade.World",
                    "description": "The physics simulation.",
                    "title": "world"
                }
            },
            "title": "Phaser.Physics.Arcade.ArcadePhysics",
            "type": "object"
        },
        "Phaser.Physics.Arcade.Body": {
            "description": "A Dynamic Arcade Body.\n\nIts static counterpart is {@link Phaser.Physics.Arcade.StaticBody}.",
            "properties": {
                "acceleration": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The Body's change in velocity, in pixels per second squared.",
                    "title": "acceleration"
                },
                "allowDrag": {
                    "description": "Whether this Body's velocity is affected by its `drag`.",
                    "title": "allowDrag",
                    "type": "boolean"
                },
                "allowGravity": {
                    "description": "Whether this Body's position is affected by gravity (local or world).",
                    "title": "allowGravity",
                    "type": "boolean"
                },
                "allowRotation": {
                    "description": "Whether this Body's `rotation` is affected by its angular acceleration and angular velocity.",
                    "title": "allowRotation",
                    "type": "boolean"
                },
                "angle": {
                    "description": "The calculated angle of this Body's velocity vector, in degrees, during the last step.",
                    "title": "angle",
                    "type": "number"
                },
                "angularAcceleration": {
                    "description": "The Body's angular acceleration (change in angular velocity), in degrees per second squared.",
                    "title": "angularAcceleration",
                    "type": "number"
                },
                "angularDrag": {
                    "description": "Loss of angular velocity due to angular movement, in degrees per second.\n\nAngular drag is applied only when angular acceleration is zero.",
                    "title": "angularDrag",
                    "type": "number"
                },
                "angularVelocity": {
                    "description": "The rate of change of this Body's `rotation`, in degrees per second.",
                    "title": "angularVelocity",
                    "type": "number"
                },
                "blocked": {
                    "description": "Whether this Body is colliding with a tile or the world boundary.",
                    "properties": {
                        "down": {
                            "description": "True if the Body is colliding on its lower edge.",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "True if the Body is colliding on its left edge.",
                            "title": "left",
                            "type": "boolean"
                        },
                        "none": {
                            "description": "True if the Body is not colliding.",
                            "title": "none",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "True if the Body is colliding on its right edge.",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "True if the Body is colliding on its upper edge.",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "blocked",
                    "type": "object"
                },
                "bottom": {
                    "description": "The bottom edge of this Body's boundary.",
                    "title": "bottom",
                    "type": "number"
                },
                "bounce": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "Rebound following a collision, relative to 1.",
                    "title": "bounce"
                },
                "center": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The center of the Body's boundary.\nThe midpoint of its `position` (top-left corner) and its bottom-right corner.",
                    "title": "center"
                },
                "checkCollision": {
                    "description": "Whether this Body is checked for collisions and for which directions.\nYou can set `checkCollision.none = false` to disable collision checks.",
                    "properties": {
                        "down": {
                            "description": "True if the Body is colliding on its lower edge.",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "True if the Body is colliding on its left edge.",
                            "title": "left",
                            "type": "boolean"
                        },
                        "none": {
                            "description": "True if the Body is not colliding.",
                            "title": "none",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "True if the Body is colliding on its right edge.",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "True if the Body is colliding on its upper edge.",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "checkCollision",
                    "type": "object"
                },
                "collideWorldBounds": {
                    "description": "Whether this Body interacts with the world boundary.",
                    "title": "collideWorldBounds",
                    "type": "boolean"
                },
                "customSeparateX": {
                    "description": "A flag disabling the default horizontal separation of colliding bodies.\nPass your own `collideCallback` to the collider.",
                    "title": "customSeparateX",
                    "type": "boolean"
                },
                "customSeparateY": {
                    "description": "A flag disabling the default vertical separation of colliding bodies.\nPass your own `collideCallback` to the collider.",
                    "title": "customSeparateY",
                    "type": "boolean"
                },
                "debugBodyColor": {
                    "description": "The color of this Body on the debug display.",
                    "title": "debugBodyColor",
                    "type": "integer"
                },
                "debugShowBody": {
                    "description": "Whether the Body's boundary is drawn to the debug display.",
                    "title": "debugShowBody",
                    "type": "boolean"
                },
                "debugShowVelocity": {
                    "description": "Whether the Body's velocity is drawn to the debug display.",
                    "title": "debugShowVelocity",
                    "type": "boolean"
                },
                "deltaMax": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The Body's absolute maximum change in position, in pixels per step.",
                    "title": "deltaMax"
                },
                "drag": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Math.Vector2"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "description": "Absolute loss of velocity due to movement, in pixels per second squared.\nThe x and y components are applied separately.\n\nWhen `useDamping` is true, this is 1 minus the damping factor.\nA value of 1 means the Body loses no velocity.\nA value of 0.95 means the Body loses 5% of its velocity per step.\nA value of 0.5 means the Body loses 50% of its velocity per step.\n\nDrag is applied only when `acceleration` is zero.",
                    "title": "drag"
                },
                "embedded": {
                    "description": "Whether this Body is overlapped with another and both have zero velocity.",
                    "title": "embedded",
                    "type": "boolean"
                },
                "enable": {
                    "description": "Whether this Body is updated by the physics simulation.",
                    "title": "enable",
                    "type": "boolean"
                },
                "facing": {
                    "description": "The direction of the Body's velocity, as calculated during the last step.\nIf the Body is moving on both axes (diagonally), this describes motion on the vertical axis only.",
                    "title": "facing",
                    "type": "integer"
                },
                "friction": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "If this Body is `immovable` and in motion, `friction` is the proportion of this Body's motion received by the riding Body on each axis, relative to 1.\nThe default value (1, 0) moves the riding Body horizontally in equal proportion to this Body and vertically not at all.\nThe horizontal component (x) is applied only when two colliding Bodies are separated vertically.\nThe vertical component (y) is applied only when two colliding Bodies are separated horizontally.",
                    "title": "friction"
                },
                "gameObject": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "The Game Object this Body belongs to.",
                    "title": "gameObject"
                },
                "gravity": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "Acceleration due to gravity (specific to this Body), in pixels per second squared.\nTotal gravity is the sum of this vector and the simulation's `gravity`.",
                    "title": "gravity"
                },
                "halfHeight": {
                    "description": "Half the Body's height, in pixels.",
                    "title": "halfHeight",
                    "type": "number"
                },
                "halfWidth": {
                    "description": "Half the Body's width, in pixels.",
                    "title": "halfWidth",
                    "type": "number"
                },
                "height": {
                    "description": "The height of the Body's boundary, in pixels.\nIf the Body is circular, this is also the Body's diameter.",
                    "title": "height",
                    "type": "number"
                },
                "immovable": {
                    "description": "Whether this Body can be moved by collisions with another Body.",
                    "title": "immovable",
                    "type": "boolean"
                },
                "isCircle": {
                    "description": "Whether this Body's boundary is circular (true) or rectangular (false).",
                    "title": "isCircle",
                    "type": "boolean"
                },
                "isMoving": {
                    "description": "Whether this Body is being moved by the `moveTo` or `moveFrom` methods.",
                    "title": "isMoving",
                    "type": "boolean"
                },
                "left": {
                    "description": "The left edge of the Body's boundary. Identical to x.",
                    "title": "left",
                    "type": "number"
                },
                "mass": {
                    "description": "The Body's inertia, relative to a default unit (1).\nWith `bounce`, this affects the exchange of momentum (velocities) during collisions.",
                    "title": "mass",
                    "type": "number"
                },
                "maxAngular": {
                    "description": "The Body's maximum angular velocity, in degrees per second.",
                    "title": "maxAngular",
                    "type": "number"
                },
                "maxVelocity": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The Body's absolute maximum velocity, in pixels per second.\nThe horizontal and vertical components are applied separately.",
                    "title": "maxVelocity"
                },
                "moves": {
                    "description": "Whether the Body's position and rotation are affected by its velocity, acceleration, drag, and gravity.",
                    "title": "moves",
                    "type": "boolean"
                },
                "newVelocity": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The Body's calculated velocity, in pixels per second, at the last step.",
                    "title": "newVelocity"
                },
                "offset": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The offset of this Body's position from its Game Object's position, in source pixels.",
                    "title": "offset"
                },
                "onCollide": {
                    "description": "Whether the simulation emits a `collide` event when this Body collides with another.",
                    "title": "onCollide",
                    "type": "boolean"
                },
                "onOverlap": {
                    "description": "Whether the simulation emits an `overlap` event when this Body overlaps with another.",
                    "title": "onOverlap",
                    "type": "boolean"
                },
                "onWorldBounds": {
                    "description": "Whether the simulation emits a `worldbounds` event when this Body collides with the world boundary (and `collideWorldBounds` is also true).",
                    "title": "onWorldBounds",
                    "type": "boolean"
                },
                "overlapR": {
                    "description": "The amount of overlap (before separation), if this Body is circular and colliding with another circular body.",
                    "title": "overlapR",
                    "type": "number"
                },
                "overlapX": {
                    "description": "The amount of horizontal overlap (before separation), if this Body is colliding with another.",
                    "title": "overlapX",
                    "type": "number"
                },
                "overlapY": {
                    "description": "The amount of vertical overlap (before separation), if this Body is colliding with another.",
                    "title": "overlapY",
                    "type": "number"
                },
                "physicsType": {
                    "description": "The Body's physics type (dynamic or static).",
                    "title": "physicsType",
                    "type": "integer"
                },
                "position": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The position of this Body within the simulation.",
                    "title": "position"
                },
                "preRotation": {
                    "description": "The Body's rotation, in degrees, during the previous step.",
                    "title": "preRotation",
                    "type": "number"
                },
                "prev": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The position of this Body during the previous step.",
                    "title": "prev"
                },
                "radius": {
                    "description": "If this Body is circular, this is the unscaled radius of the Body's boundary, as set by setCircle(), in source pixels.\nThe true radius is equal to `halfWidth`.",
                    "title": "radius",
                    "type": "number"
                },
                "right": {
                    "description": "The right edge of the Body's boundary.",
                    "title": "right",
                    "type": "number"
                },
                "rotation": {
                    "description": "This body's rotation, in degrees, based on its angular acceleration and angular velocity.\nThe Body's rotation controls the `angle` of its Game Object.\nIt doesn't rotate the Body's boundary, which is always an axis-aligned rectangle or a circle.",
                    "title": "rotation",
                    "type": "number"
                },
                "sourceHeight": {
                    "description": "The unscaled height of the Body, in source pixels, as set by setSize().\nThe default is the height of the Body's Game Object's texture frame.",
                    "title": "sourceHeight",
                    "type": "number"
                },
                "sourceWidth": {
                    "description": "The unscaled width of the Body, in source pixels, as set by setSize().\nThe default is the width of the Body's Game Object's texture frame.",
                    "title": "sourceWidth",
                    "type": "number"
                },
                "speed": {
                    "description": "The calculated magnitude of the Body's velocity, in pixels per second, during the last step.",
                    "title": "speed",
                    "type": "number"
                },
                "stopVelocityOnCollide": {
                    "description": "Whether this Body's movement by `moveTo` or `moveFrom` will be stopped by collisions with other bodies.",
                    "title": "stopVelocityOnCollide",
                    "type": "boolean"
                },
                "syncBounds": {
                    "description": "Whether to automatically synchronize this Body's dimensions to the dimensions of its Game Object's visual bounds.",
                    "title": "syncBounds",
                    "type": "boolean"
                },
                "top": {
                    "description": "The top edge of the Body's boundary. Identical to y.",
                    "title": "top",
                    "type": "number"
                },
                "touching": {
                    "description": "Whether this Body is colliding with another and in which direction.",
                    "properties": {
                        "down": {
                            "description": "True if the Body is colliding on its lower edge.",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "True if the Body is colliding on its left edge.",
                            "title": "left",
                            "type": "boolean"
                        },
                        "none": {
                            "description": "True if the Body is not colliding.",
                            "title": "none",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "True if the Body is colliding on its right edge.",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "True if the Body is colliding on its upper edge.",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "touching",
                    "type": "object"
                },
                "transform": {
                    "additionalProperties": true,
                    "description": "Transformations applied to this Body.",
                    "properties": {
                    },
                    "title": "transform",
                    "type": "object"
                },
                "useDamping": {
                    "description": "If this Body is using `drag` for deceleration this property controls how the drag is applied.\nIf set to `true` drag will use a damping effect rather than a linear approach. If you are\ncreating a game where the Body moves freely at any angle (i.e. like the way the ship moves in\nthe game Asteroids) then you will get a far smoother and more visually correct deceleration\nby using damping, avoiding the axis-drift that is prone with linear deceleration.\n\nIf you enable this property then you should use far smaller `drag` values than with linear, as\nthey are used as a multiplier on the velocity. Values such as 0.95 will give a nice slow\ndeceleration, where-as smaller values, such as 0.5 will stop an object almost immediately.",
                    "title": "useDamping",
                    "type": "boolean"
                },
                "velocity": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "The Body's velocity, in pixels per second.",
                    "title": "velocity"
                },
                "wasTouching": {
                    "description": "Whether this Body was colliding with another during the last step, and in which direction.",
                    "properties": {
                        "down": {
                            "description": "True if the Body is colliding on its lower edge.",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "True if the Body is colliding on its left edge.",
                            "title": "left",
                            "type": "boolean"
                        },
                        "none": {
                            "description": "True if the Body is not colliding.",
                            "title": "none",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "True if the Body is colliding on its right edge.",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "True if the Body is colliding on its upper edge.",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "wasTouching",
                    "type": "object"
                },
                "width": {
                    "description": "The width of the Body's boundary, in pixels.\nIf the Body is circular, this is also the Body's diameter.",
                    "title": "width",
                    "type": "number"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Arcade.World",
                    "description": "The Arcade Physics simulation this Body belongs to.",
                    "title": "world"
                },
                "worldBounce": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "Rebound following a collision with the world boundary, relative to 1.\nIf null, `bounce` is used instead.",
                    "title": "worldBounce"
                },
                "x": {
                    "description": "The Body's horizontal position (left edge).",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The Body's vertical position (top edge).",
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "Phaser.Physics.Arcade.Body",
            "type": "object"
        },
        "Phaser.Physics.Arcade.Factory": {
            "description": "The Arcade Physics Factory allows you to easily create Arcade Physics enabled Game Objects.\nObjects that are created by this Factory are automatically added to the physics world.",
            "properties": {
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "A reference to the Scene this Arcade Physics instance belongs to.",
                    "title": "scene"
                },
                "sys": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "A reference to the Scene.Systems this Arcade Physics instance belongs to.",
                    "title": "sys"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Arcade.World",
                    "description": "A reference to the Arcade Physics World.",
                    "title": "world"
                }
            },
            "title": "Phaser.Physics.Arcade.Factory",
            "type": "object"
        },
        "Phaser.Physics.Arcade.StaticBody": {
            "description": "A Static Arcade Physics Body.\n\nA Static Body never moves, and isn't automatically synchronized with its parent Game Object.\nThat means if you make any change to the parent's origin, position, or scale after creating or adding the body, you'll need to update the Body manually.\n\nA Static Body can collide with other Bodies, but is never moved by collisions.\n\nIts dynamic counterpart is {@link Phaser.Physics.Arcade.Body}.",
            "properties": {
                "allowGravity": {
                    "description": "[description]",
                    "title": "allowGravity",
                    "type": "boolean"
                },
                "blocked": {
                    "description": "Whether this StaticBody is colliding with a tile or the world boundary.",
                    "properties": {
                        "down": {
                            "description": "True if the Body is colliding on its lower edge.",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "True if the Body is colliding on its left edge.",
                            "title": "left",
                            "type": "boolean"
                        },
                        "none": {
                            "description": "True if the Body is not colliding.",
                            "title": "none",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "True if the Body is colliding on its right edge.",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "True if the Body is colliding on its upper edge.",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "blocked",
                    "type": "object"
                },
                "bottom": {
                    "description": "The lowest y coordinate of the area of the StaticBody. (y + height)",
                    "title": "bottom",
                    "type": "number"
                },
                "bounce": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "Rebound, or restitution, following a collision, relative to 1. Always zero for a Static Body.",
                    "title": "bounce"
                },
                "center": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "[description]",
                    "title": "center"
                },
                "checkCollision": {
                    "description": "Whether this StaticBody is checked for collisions and for which directions. You can set `checkCollision.none = false` to disable collision checks.",
                    "properties": {
                        "down": {
                            "description": "True if the Body is colliding on its lower edge.",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "True if the Body is colliding on its left edge.",
                            "title": "left",
                            "type": "boolean"
                        },
                        "none": {
                            "description": "True if the Body is not colliding.",
                            "title": "none",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "True if the Body is colliding on its right edge.",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "True if the Body is colliding on its upper edge.",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "checkCollision",
                    "type": "object"
                },
                "collideWorldBounds": {
                    "description": "Whether this StaticBody interacts with the world boundary.",
                    "title": "collideWorldBounds",
                    "type": "boolean"
                },
                "customSeparateX": {
                    "description": "A flag disabling the default horizontal separation of colliding bodies. Pass your own `processHandler` to the collider.",
                    "title": "customSeparateX",
                    "type": "boolean"
                },
                "customSeparateY": {
                    "description": "A flag disabling the default vertical separation of colliding bodies. Pass your own `processHandler` to the collider.",
                    "title": "customSeparateY",
                    "type": "boolean"
                },
                "debugBodyColor": {
                    "description": "[description]",
                    "title": "debugBodyColor",
                    "type": "integer"
                },
                "debugShowBody": {
                    "description": "[description]",
                    "title": "debugShowBody",
                    "type": "boolean"
                },
                "embedded": {
                    "description": "Whether this StaticBody is overlapped with another and both have zero velocity.",
                    "title": "embedded",
                    "type": "boolean"
                },
                "enable": {
                    "description": "[description]",
                    "title": "enable",
                    "type": "boolean"
                },
                "gameObject": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "[description]",
                    "title": "gameObject"
                },
                "gravity": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "Gravitational force applied specifically to this Body. Values are in pixels per second squared. Always zero for a Static Body.",
                    "title": "gravity"
                },
                "halfHeight": {
                    "description": "[description]",
                    "title": "halfHeight",
                    "type": "number"
                },
                "halfWidth": {
                    "description": "[description]",
                    "title": "halfWidth",
                    "type": "number"
                },
                "height": {
                    "description": "[description]",
                    "title": "height",
                    "type": "number"
                },
                "immovable": {
                    "description": "Whether this object can be moved by collisions with another body.",
                    "title": "immovable",
                    "type": "boolean"
                },
                "isCircle": {
                    "description": "[description]",
                    "title": "isCircle",
                    "type": "boolean"
                },
                "left": {
                    "description": "Returns the left-most x coordinate of the area of the StaticBody.",
                    "title": "left",
                    "type": "number"
                },
                "mass": {
                    "description": "The StaticBody's inertia, relative to a default unit (1). With `bounce`, this affects the exchange of momentum (velocities) during collisions.",
                    "title": "mass",
                    "type": "number"
                },
                "offset": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "[description]",
                    "title": "offset"
                },
                "onCollide": {
                    "description": "Whether the simulation emits a `collide` event when this StaticBody collides with another.",
                    "title": "onCollide",
                    "type": "boolean"
                },
                "onOverlap": {
                    "description": "Whether the simulation emits an `overlap` event when this StaticBody overlaps with another.",
                    "title": "onOverlap",
                    "type": "boolean"
                },
                "onWorldBounds": {
                    "description": "Whether the simulation emits a `worldbounds` event when this StaticBody collides with the world boundary (and `collideWorldBounds` is also true).",
                    "title": "onWorldBounds",
                    "type": "boolean"
                },
                "overlapR": {
                    "description": "The amount of overlap (before separation), if this StaticBody is circular and colliding with another circular body.",
                    "title": "overlapR",
                    "type": "number"
                },
                "overlapX": {
                    "description": "The amount of horizontal overlap (before separation), if this Body is colliding with another.",
                    "title": "overlapX",
                    "type": "number"
                },
                "overlapY": {
                    "description": "The amount of vertical overlap (before separation), if this Body is colliding with another.",
                    "title": "overlapY",
                    "type": "number"
                },
                "physicsType": {
                    "description": "The StaticBody's physics type (static by default).",
                    "title": "physicsType",
                    "type": "integer"
                },
                "position": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "[description]",
                    "title": "position"
                },
                "radius": {
                    "description": "[description]",
                    "title": "radius",
                    "type": "number"
                },
                "right": {
                    "description": "The right-most x coordinate of the area of the StaticBody.",
                    "title": "right",
                    "type": "number"
                },
                "top": {
                    "description": "The highest y coordinate of the area of the StaticBody.",
                    "title": "top",
                    "type": "number"
                },
                "touching": {
                    "description": "Whether this StaticBody is colliding with another and in which direction.",
                    "properties": {
                        "down": {
                            "description": "True if the Body is colliding on its lower edge.",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "True if the Body is colliding on its left edge.",
                            "title": "left",
                            "type": "boolean"
                        },
                        "none": {
                            "description": "True if the Body is not colliding.",
                            "title": "none",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "True if the Body is colliding on its right edge.",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "True if the Body is colliding on its upper edge.",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "touching",
                    "type": "object"
                },
                "velocity": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "[description]",
                    "title": "velocity"
                },
                "wasTouching": {
                    "description": "Whether this StaticBody was colliding with another during the last step, and in which direction.",
                    "properties": {
                        "down": {
                            "description": "True if the Body is colliding on its lower edge.",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "True if the Body is colliding on its left edge.",
                            "title": "left",
                            "type": "boolean"
                        },
                        "none": {
                            "description": "True if the Body is not colliding.",
                            "title": "none",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "True if the Body is colliding on its right edge.",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "True if the Body is colliding on its upper edge.",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "wasTouching",
                    "type": "object"
                },
                "width": {
                    "description": "[description]",
                    "title": "width",
                    "type": "number"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Arcade.World",
                    "description": "[description]",
                    "title": "world"
                },
                "x": {
                    "description": "The x coordinate of the StaticBody.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y coordinate of the StaticBody.",
                    "title": "y",
                    "type": "number"
                }
            },
            "title": "Phaser.Physics.Arcade.StaticBody",
            "type": "object"
        },
        "Phaser.Physics.Arcade.World": {
            "description": "The Arcade Physics World.\n\nThe World is responsible for creating, managing, colliding and updating all of the bodies within it.\n\nAn instance of the World belongs to a Phaser.Scene and is accessed via the property `physics.world`.",
            "properties": {
                "OVERLAP_BIAS": {
                    "description": "The maximum absolute difference of a Body's per-step velocity and its overlap with another Body that will result in separation on *each axis*.\nLarger values favor separation.\nSmaller values favor no separation.",
                    "title": "OVERLAP_BIAS",
                    "type": "number"
                },
                "TILE_BIAS": {
                    "description": "The maximum absolute value of a Body's overlap with a tile that will result in separation on *each axis*.\nLarger values favor separation.\nSmaller values favor no separation.\nThe optimum value may be similar to the tile size.",
                    "title": "TILE_BIAS",
                    "type": "number"
                },
                "bodies": {
                    "$ref": "#/definitions/Phaser.Structs.Set<Phaser.Physics.Arcade.Body>",
                    "description": "Dynamic Bodies in this simulation.",
                    "title": "bodies"
                },
                "bounds": {
                    "$ref": "#/definitions/Phaser.Geom.Rectangle",
                    "description": "A boundary constraining Bodies.",
                    "title": "bounds"
                },
                "checkCollision": {
                    "description": "The boundary edges that Bodies can collide with.",
                    "properties": {
                        "down": {
                            "description": "[description]",
                            "title": "down",
                            "type": "boolean"
                        },
                        "left": {
                            "description": "[description]",
                            "title": "left",
                            "type": "boolean"
                        },
                        "right": {
                            "description": "[description]",
                            "title": "right",
                            "type": "boolean"
                        },
                        "up": {
                            "description": "[description]",
                            "title": "up",
                            "type": "boolean"
                        }
                    },
                    "title": "checkCollision",
                    "type": "object"
                },
                "colliders": {
                    "$ref": "#/definitions/Phaser.Structs.ProcessQueue<Phaser.Physics.Arcade.Collider>",
                    "description": "This simulation's collision processors.",
                    "title": "colliders"
                },
                "debugGraphic": {
                    "$ref": "#/definitions/Phaser.GameObjects.Graphics",
                    "description": "The graphics object drawing the debug display.",
                    "title": "debugGraphic"
                },
                "defaults": {
                    "description": "Default debug display settings for new Bodies.",
                    "properties": {
                        "bodyDebugColor": {
                            "description": "[description]",
                            "title": "bodyDebugColor",
                            "type": "number"
                        },
                        "debugShowBody": {
                            "description": "[description]",
                            "title": "debugShowBody",
                            "type": "boolean"
                        },
                        "debugShowStaticBody": {
                            "description": "[description]",
                            "title": "debugShowStaticBody",
                            "type": "boolean"
                        },
                        "debugShowVelocity": {
                            "description": "[description]",
                            "title": "debugShowVelocity",
                            "type": "boolean"
                        },
                        "staticBodyDebugColor": {
                            "description": "[description]",
                            "title": "staticBodyDebugColor",
                            "type": "number"
                        },
                        "velocityDebugColor": {
                            "description": "[description]",
                            "title": "velocityDebugColor",
                            "type": "number"
                        }
                    },
                    "title": "defaults",
                    "type": "object"
                },
                "drawDebug": {
                    "description": "Enables the debug display.",
                    "title": "drawDebug",
                    "type": "boolean"
                },
                "forceX": {
                    "description": "Always separate overlapping Bodies horizontally before vertically.\nFalse (the default) means Bodies are first separated on the axis of greater gravity, or the vertical axis if neither is greater.",
                    "title": "forceX",
                    "type": "boolean"
                },
                "fps": {
                    "description": "The number of physics steps to be taken per second.\n\nThis property is read-only. Use the `setFPS` method to modify it at run-time.",
                    "title": "fps",
                    "type": "number"
                },
                "gravity": {
                    "$ref": "#/definitions/Phaser.Math.Vector2",
                    "description": "Acceleration of Bodies due to gravity, in pixels per second.",
                    "title": "gravity"
                },
                "isPaused": {
                    "description": "Whether the simulation advances with the game loop.",
                    "title": "isPaused",
                    "type": "boolean"
                },
                "maxEntries": {
                    "description": "The maximum number of items per node on the RTree.\n\nThis is ignored if `useTree` is `false`. If you have a large number of bodies in\nyour world then you may find search performance improves by increasing this value,\nto allow more items per node and less node division.",
                    "title": "maxEntries",
                    "type": "integer"
                },
                "pendingDestroy": {
                    "$ref": "#/definitions/Phaser.Structs.Set<Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody>",
                    "description": "Static Bodies marked for deletion.",
                    "title": "pendingDestroy"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene this simulation belongs to.",
                    "title": "scene"
                },
                "staticBodies": {
                    "$ref": "#/definitions/Phaser.Structs.Set<Phaser.Physics.Arcade.StaticBody>",
                    "description": "Static Bodies in this simulation.",
                    "title": "staticBodies"
                },
                "staticTree": {
                    "$ref": "#/definitions/Phaser.Structs.RTree",
                    "description": "The spatial index of Static Bodies.",
                    "title": "staticTree"
                },
                "stepsLastFrame": {
                    "description": "The number of steps that took place in the last frame.",
                    "title": "stepsLastFrame",
                    "type": "number"
                },
                "timeScale": {
                    "description": "Scaling factor applied to the frame rate.\n\n- 1.0 = normal speed\n- 2.0 = half speed\n- 0.5 = double speed",
                    "title": "timeScale"
                },
                "tree": {
                    "$ref": "#/definitions/Phaser.Structs.RTree",
                    "description": "The spatial index of Dynamic Bodies.",
                    "title": "tree"
                },
                "treeMinMax": {
                    "description": "Recycled input for tree searches.",
                    "properties": {
                        "maxX": {
                            "description": "[description]",
                            "title": "maxX",
                            "type": "number"
                        },
                        "maxY": {
                            "description": "[description]",
                            "title": "maxY",
                            "type": "number"
                        },
                        "minX": {
                            "description": "[description]",
                            "title": "minX",
                            "type": "number"
                        },
                        "minY": {
                            "description": "[description]",
                            "title": "minY",
                            "type": "number"
                        }
                    },
                    "title": "treeMinMax",
                    "type": "object"
                },
                "useTree": {
                    "description": "Should this Arcade Physics World use an RTree for Dynamic Physics bodies or not?\n\nAn RTree is a fast way of spatially sorting of all the moving bodies in the world.\nHowever, at certain limits, the cost of clearing and inserting the bodies into the\ntree every frame becomes more expensive than the search speed gains it provides.\n\nIf you have a large number of dynamic bodies in your world then it may be best to\ndisable the use of the RTree by setting this property to `true`.\nThe number it can cope with depends on browser and device, but a conservative estimate\nof around 5,000 bodies should be considered the max before disabling it.\n\nNote this only applies to dynamic bodies. Static bodies are always kept in an RTree,\nbecause they don't have to be cleared every frame, so you benefit from the\nmassive search speeds all the time.",
                    "title": "useTree",
                    "type": "boolean"
                }
            },
            "title": "Phaser.Physics.Arcade.World",
            "type": "object"
        },
        "Phaser.Physics.Impact.Body": {
            "description": "An Impact.js compatible physics body.\nThis re-creates the properties you'd get on an Entity and the math needed to update them.",
            "properties": {
                "accel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "accel"
                },
                "accelAir": {
                    "description": "[description]",
                    "title": "accelAir",
                    "type": "number"
                },
                "accelGround": {
                    "description": "[description]",
                    "title": "accelGround",
                    "type": "number"
                },
                "bounciness": {
                    "description": "[description]",
                    "title": "bounciness",
                    "type": "number"
                },
                "checkAgainst": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.TYPE",
                    "description": "[description]",
                    "title": "checkAgainst"
                },
                "collides": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.COLLIDES",
                    "description": "[description]",
                    "title": "collides"
                },
                "debugBodyColor": {
                    "description": "[description]",
                    "title": "debugBodyColor",
                    "type": "integer"
                },
                "debugShowBody": {
                    "description": "[description]",
                    "title": "debugShowBody",
                    "type": "boolean"
                },
                "debugShowVelocity": {
                    "description": "[description]",
                    "title": "debugShowVelocity",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "[description]",
                    "title": "enabled",
                    "type": "boolean"
                },
                "friction": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "friction"
                },
                "gameObject": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                    "description": "[description]",
                    "title": "gameObject"
                },
                "gravityFactor": {
                    "description": "[description]",
                    "title": "gravityFactor",
                    "type": "number"
                },
                "id": {
                    "description": "[description]",
                    "title": "id",
                    "type": "integer"
                },
                "jumpSpeed": {
                    "description": "[description]",
                    "title": "jumpSpeed",
                    "type": "number"
                },
                "last": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "last"
                },
                "maxVel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "maxVel"
                },
                "minBounceVelocity": {
                    "description": "[description]",
                    "title": "minBounceVelocity",
                    "type": "number"
                },
                "name": {
                    "description": "[description]",
                    "title": "name",
                    "type": "string"
                },
                "offset": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "offset"
                },
                "parent": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Physics.Impact.ImpactBody"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Impact.ImpactImage"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Physics.Impact.ImpactSprite"
                        }
                    ],
                    "description": "The ImpactBody, ImpactSprite or ImpactImage object that owns this Body, if any.",
                    "title": "parent"
                },
                "pos": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "pos"
                },
                "size": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "size"
                },
                "slopeStanding": {
                    "$ref": "#/definitions/Object",
                    "description": "min 44 deg, max 136 deg",
                    "title": "slopeStanding"
                },
                "standing": {
                    "description": "[description]",
                    "title": "standing",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.TYPE",
                    "description": "[description]",
                    "title": "type"
                },
                "updateCallback": {
                    "description": "[description]",
                    "title": "updateCallback",
                    "type": "object"
                },
                "vel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "vel"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.World",
                    "description": "[description]",
                    "title": "world"
                }
            },
            "title": "Phaser.Physics.Impact.Body",
            "type": "object"
        },
        "Phaser.Physics.Impact.COLLIDES": {
            "description": "Collision Types - Determine if and how entities collide with each other.\n\nIn ACTIVE vs. LITE or FIXED vs. ANY collisions, only the \"weak\" entity moves,\nwhile the other one stays fixed. In ACTIVE vs. ACTIVE and ACTIVE vs. PASSIVE\ncollisions, both entities are moved. LITE or PASSIVE entities don't collide\nwith other LITE or PASSIVE entities at all. The behavior for FIXED vs.\nFIXED collisions is undefined.",
            "title": "Phaser.Physics.Impact.COLLIDES"
        },
        "Phaser.Physics.Impact.CollisionMap": {
            "description": "[description]",
            "properties": {
                "data": {
                    "description": "[description]",
                    "items": {
                    },
                    "title": "data",
                    "type": "array"
                },
                "height": {
                    "description": "[description]",
                    "title": "height",
                    "type": "number"
                },
                "lastSlope": {
                    "description": "[description]",
                    "title": "lastSlope",
                    "type": "integer"
                },
                "tiledef": {
                    "additionalProperties": true,
                    "description": "[description]",
                    "properties": {
                    },
                    "title": "tiledef",
                    "type": "object"
                },
                "tilesize": {
                    "description": "[description]",
                    "title": "tilesize",
                    "type": "integer"
                },
                "width": {
                    "description": "[description]",
                    "title": "width",
                    "type": "number"
                }
            },
            "title": "Phaser.Physics.Impact.CollisionMap",
            "type": "object"
        },
        "Phaser.Physics.Impact.Factory": {
            "description": "The Impact Physics Factory allows you to easily create Impact Physics enabled Game Objects.\nObjects that are created by this Factory are automatically added to the physics world.",
            "properties": {
                "sys": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "A reference to the Scene.Systems this Impact Physics instance belongs to.",
                    "title": "sys"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.World",
                    "description": "A reference to the Impact Physics world.",
                    "title": "world"
                }
            },
            "title": "Phaser.Physics.Impact.Factory",
            "type": "object"
        },
        "Phaser.Physics.Impact.ImpactBody": {
            "description": "[description]",
            "properties": {
                "accel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "accel"
                },
                "body": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.Body",
                    "description": "[description]",
                    "title": "body"
                },
                "bounce": {
                    "description": "The bounce, or restitution, value of this body.\nA value between 0 (no rebound) and 1 (full rebound)",
                    "title": "bounce",
                    "type": "number"
                },
                "checkAgainst": {
                    "description": "[description]",
                    "title": "checkAgainst",
                    "type": "number"
                },
                "collides": {
                    "description": "[description]",
                    "title": "collides",
                    "type": "number"
                },
                "debugBodyColor": {
                    "description": "[description]",
                    "title": "debugBodyColor",
                    "type": "number"
                },
                "debugShowBody": {
                    "description": "[description]",
                    "title": "debugShowBody",
                    "type": "boolean"
                },
                "debugShowVelocity": {
                    "description": "[description]",
                    "title": "debugShowVelocity",
                    "type": "boolean"
                },
                "friction": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "friction"
                },
                "gravity": {
                    "description": "[description]",
                    "title": "gravity",
                    "type": "number"
                },
                "maxVel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "maxVel"
                },
                "offset": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "offset"
                },
                "size": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "size"
                },
                "vel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "vel"
                }
            },
            "title": "Phaser.Physics.Impact.ImpactBody",
            "type": "object"
        },
        "Phaser.Physics.Impact.ImpactImage": {
            "description": "An Impact Physics Image Game Object.\n\nAn Image is a light-weight Game Object useful for the display of static images in your game,\nsuch as logos, backgrounds, scenery or other non-animated elements. Images can have input\nevents and physics bodies, or be tweened, tinted or scrolled. The main difference between an\nImage and a Sprite is that you cannot animate an Image as they do not have the Animation component.",
            "properties": {
                "accel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "accel"
                },
                "active": {
                    "description": "The active state of this Game Object.\nA Game Object with an active state of `true` is processed by the Scenes UpdateList, if added to it.\nAn active object is one which is having its logic and internal systems updated.",
                    "title": "active",
                    "type": "boolean"
                },
                "alpha": {
                    "description": "The alpha value of the Game Object.\n\nThis is a global value, impacting the entire Game Object, not just a region of it.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaBottomLeft": {
                    "description": "The alpha value starting from the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomLeft",
                    "type": "number"
                },
                "alphaBottomRight": {
                    "description": "The alpha value starting from the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomRight",
                    "type": "number"
                },
                "alphaTopLeft": {
                    "description": "The alpha value starting from the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopLeft",
                    "type": "number"
                },
                "alphaTopRight": {
                    "description": "The alpha value starting from the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopRight",
                    "type": "number"
                },
                "angle": {
                    "description": "The angle of this Game Object as expressed in degrees.\n\nWhere 0 is to the right, 90 is down, 180 is left.\n\nIf you prefer to work in radians, see the `rotation` property instead.",
                    "title": "angle",
                    "type": "integer"
                },
                "blendMode": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.BlendModes"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Sets the Blend Mode being used by this Game Object.\n\nThis can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n\nUnder WebGL only the following Blend Modes are available:\n\n* ADD\n* MULTIPLY\n* SCREEN\n\nCanvas has more available depending on browser support.\n\nYou can also create your own custom Blend Modes in WebGL.\n\nBlend modes have different effects under Canvas and WebGL, and from browser to browser, depending\non support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\nreasons try to be careful about the construction of your Scene and the frequency of which blend modes\nare used.",
                    "title": "blendMode"
                },
                "body": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.Body",
                    "description": "[description]",
                    "title": "body"
                },
                "bounce": {
                    "description": "The bounce, or restitution, value of this body.\nA value between 0 (no rebound) and 1 (full rebound)",
                    "title": "bounce",
                    "type": "number"
                },
                "cameraFilter": {
                    "description": "A bitmask that controls if this Game Object is drawn by a Camera or not.\nNot usually set directly, instead call `Camera.ignore`, however you can\nset this property directly using the Camera.id property:",
                    "title": "cameraFilter",
                    "type": "number"
                },
                "checkAgainst": {
                    "description": "[description]",
                    "title": "checkAgainst",
                    "type": "number"
                },
                "collides": {
                    "description": "[description]",
                    "title": "collides",
                    "type": "number"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A Data Manager.\nIt allows you to store, query and get key/value paired information specific to this Game Object.\n`null` by default. Automatically created if you use `getData` or `setData` or `setDataEnabled`.",
                    "title": "data"
                },
                "debugBodyColor": {
                    "description": "[description]",
                    "title": "debugBodyColor",
                    "type": "number"
                },
                "debugShowBody": {
                    "description": "[description]",
                    "title": "debugShowBody",
                    "type": "boolean"
                },
                "debugShowVelocity": {
                    "description": "[description]",
                    "title": "debugShowVelocity",
                    "type": "boolean"
                },
                "defaultPipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The initial WebGL pipeline of this Game Object.",
                    "title": "defaultPipeline"
                },
                "depth": {
                    "description": "The depth of this Game Object within the Scene.\n\nThe depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\nof Game Objects, without actually moving their position in the display list.\n\nThe depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\nvalue will always render in front of one with a lower value.\n\nSetting the depth will queue a depth sort event within the Scene.",
                    "title": "depth",
                    "type": "number"
                },
                "displayHeight": {
                    "description": "The displayed height of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayHeight",
                    "type": "number"
                },
                "displayOriginX": {
                    "description": "The horizontal display origin of this Game Object.\nThe origin is a normalized value between 0 and 1.\nThe displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
                    "title": "displayOriginX",
                    "type": "number"
                },
                "displayOriginY": {
                    "description": "The vertical display origin of this Game Object.\nThe origin is a normalized value between 0 and 1.\nThe displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
                    "title": "displayOriginY",
                    "type": "number"
                },
                "displayWidth": {
                    "description": "The displayed width of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayWidth",
                    "type": "number"
                },
                "flipX": {
                    "description": "The horizontally flipped state of the Game Object.\nA Game Object that is flipped horizontally will render inversed on the horizontal axis.\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipX",
                    "type": "boolean"
                },
                "flipY": {
                    "description": "The vertically flipped state of the Game Object.\nA Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipY",
                    "type": "boolean"
                },
                "frame": {
                    "$ref": "#/definitions/Phaser.Textures.Frame",
                    "description": "The Texture Frame this Game Object is using to render with.",
                    "title": "frame"
                },
                "friction": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "friction"
                },
                "gravity": {
                    "description": "[description]",
                    "title": "gravity",
                    "type": "number"
                },
                "height": {
                    "description": "The native (un-scaled) height of this Game Object.\n\nChanging this value will not change the size that the Game Object is rendered in-game.\nFor that you need to either set the scale of the Game Object (`setScale`) or use\nthe `displayHeight` property.",
                    "title": "height",
                    "type": "number"
                },
                "ignoreDestroy": {
                    "description": "This Game Object will ignore all calls made to its destroy method if this flag is set to `true`.\nThis includes calls that may come from a Group, Container or the Scene itself.\nWhile it allows you to persist a Game Object across Scenes, please understand you are entirely\nresponsible for managing references to and from this Game Object.",
                    "title": "ignoreDestroy",
                    "type": "boolean"
                },
                "input": {
                    "description": "If this Game Object is enabled for input then this property will contain an InteractiveObject instance.\nNot usually set directly. Instead call `GameObject.setInteractive()`.",
                    "properties": {
                        "camera": {
                            "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                            "description": "The most recent Camera to be tested against this Interactive Object.",
                            "title": "camera"
                        },
                        "cursor": {
                            "description": "Should this Interactive Object change the cursor (via css) when over? (desktop only)",
                            "title": "cursor",
                            "type": [
                                "string",
                                "boolean"
                            ]
                        },
                        "dragStartX": {
                            "description": "The x coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartX",
                            "type": "number"
                        },
                        "dragStartY": {
                            "description": "The y coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartY",
                            "type": "number"
                        },
                        "dragState": {
                            "description": "The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "title": "dragState",
                            "type": "number"
                        },
                        "dragX": {
                            "description": "The x coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragX",
                            "type": "number"
                        },
                        "dragY": {
                            "description": "The y coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragY",
                            "type": "number"
                        },
                        "draggable": {
                            "description": "Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.",
                            "title": "draggable",
                            "type": "boolean"
                        },
                        "dropZone": {
                            "description": "Is this Interactive Object a drag-targets drop zone? Set when the object is created.",
                            "title": "dropZone",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "Is this Interactive Object currently enabled for input events?",
                            "title": "enabled",
                            "type": "boolean"
                        },
                        "gameObject": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "The Game Object to which this Interactive Object is bound.",
                            "title": "gameObject"
                        },
                        "hitArea": {
                            "description": "The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.",
                            "title": "hitArea"
                        },
                        "hitAreaCallback": {
                            "description": "The 'contains' check callback that the hit area shape will use for all hit tests.",
                            "title": "hitAreaCallback",
                            "type": "object"
                        },
                        "localX": {
                            "description": "The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localX",
                            "type": "number"
                        },
                        "localY": {
                            "description": "The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localY",
                            "type": "number"
                        },
                        "target": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "An optional drop target for a draggable Interactive Object.",
                            "title": "target"
                        }
                    },
                    "title": "input",
                    "type": "object"
                },
                "isCropped": {
                    "description": "A boolean flag indicating if this Game Object is being cropped or not.\nYou can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\nEqually, calling `setCrop` with no arguments will reset the crop and disable it.",
                    "title": "isCropped",
                    "type": "boolean"
                },
                "isTinted": {
                    "description": "Does this Game Object have a tint applied to it or not?",
                    "title": "isTinted",
                    "type": "boolean"
                },
                "mask": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.BitmapMask"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.GeometryMask"
                        }
                    ],
                    "description": "The Mask this Game Object is using during render.",
                    "title": "mask"
                },
                "maxVel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "maxVel"
                },
                "name": {
                    "description": "The name of this Game Object.\nEmpty by default and never populated by Phaser, this is left for developers to use.",
                    "title": "name",
                    "type": "string"
                },
                "offset": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "offset"
                },
                "originX": {
                    "description": "The horizontal origin of this Game Object.\nThe origin maps the relationship between the size and position of the Game Object.\nThe default value is 0.5, meaning all Game Objects are positioned based on their center.\nSetting the value to 0 means the position now relates to the left of the Game Object.",
                    "title": "originX",
                    "type": "number"
                },
                "originY": {
                    "description": "The vertical origin of this Game Object.\nThe origin maps the relationship between the size and position of the Game Object.\nThe default value is 0.5, meaning all Game Objects are positioned based on their center.\nSetting the value to 0 means the position now relates to the top of the Game Object.",
                    "title": "originY",
                    "type": "number"
                },
                "parentContainer": {
                    "$ref": "#/definitions/Phaser.GameObjects.Container",
                    "description": "The parent Container of this Game Object, if it has one.",
                    "title": "parentContainer"
                },
                "pipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The current WebGL pipeline of this Game Object.",
                    "title": "pipeline"
                },
                "renderFlags": {
                    "description": "The flags that are compared against `RENDER_MASK` to determine if this Game Object will render or not.\nThe bits are 0001 | 0010 | 0100 | 1000 set by the components Visible, Alpha, Transform and Texture respectively.\nIf those components are not used by your custom class then you can use this bitmask as you wish.",
                    "title": "renderFlags",
                    "type": "integer"
                },
                "rotation": {
                    "description": "The angle of this Game Object in radians.\n\nIf you prefer to work in degrees, see the `angle` property instead.",
                    "title": "rotation",
                    "type": "number"
                },
                "scaleMode": {
                    "$ref": "#/definitions/Phaser.ScaleModes",
                    "description": "The Scale Mode being used by this Game Object.\nCan be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
                    "title": "scaleMode"
                },
                "scaleX": {
                    "description": "The horizontal scale of this Game Object.",
                    "title": "scaleX",
                    "type": "number"
                },
                "scaleY": {
                    "description": "The vertical scale of this Game Object.",
                    "title": "scaleY",
                    "type": "number"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object belongs.\nGame Objects can only belong to one Scene.",
                    "title": "scene"
                },
                "scrollFactorX": {
                    "description": "The horizontal scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorX",
                    "type": "number"
                },
                "scrollFactorY": {
                    "description": "The vertical scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorY",
                    "type": "number"
                },
                "size": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "size"
                },
                "tabIndex": {
                    "description": "The Tab Index of the Game Object.\nReserved for future use by plugins and the Input Manager.",
                    "title": "tabIndex",
                    "type": "integer"
                },
                "texture": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Textures.CanvasTexture"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Textures.Texture"
                        }
                    ],
                    "description": "The Texture this Game Object is using to render with.",
                    "title": "texture"
                },
                "tint": {
                    "description": "The tint value being applied to the whole of the Game Object.",
                    "title": "tint",
                    "type": "integer"
                },
                "tintBottomLeft": {
                    "description": "The tint value being applied to the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomLeft",
                    "type": "integer"
                },
                "tintBottomRight": {
                    "description": "The tint value being applied to the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomRight",
                    "type": "integer"
                },
                "tintFill": {
                    "description": "Fill or additive?",
                    "title": "tintFill",
                    "type": "boolean"
                },
                "tintTopLeft": {
                    "description": "The tint value being applied to the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopLeft",
                    "type": "integer"
                },
                "tintTopRight": {
                    "description": "The tint value being applied to the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopRight",
                    "type": "integer"
                },
                "type": {
                    "description": "A textual representation of this Game Object, i.e. `sprite`.\nUsed internally by Phaser but is available for your own custom classes to populate.",
                    "title": "type",
                    "type": "string"
                },
                "vel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "vel"
                },
                "visible": {
                    "description": "The visible state of the Game Object.\n\nAn invisible Game Object will skip rendering, but will still process update logic.",
                    "title": "visible",
                    "type": "boolean"
                },
                "w": {
                    "description": "The w position of this Game Object.",
                    "title": "w",
                    "type": "number"
                },
                "width": {
                    "description": "The native (un-scaled) width of this Game Object.\n\nChanging this value will not change the size that the Game Object is rendered in-game.\nFor that you need to either set the scale of the Game Object (`setScale`) or use\nthe `displayWidth` property.",
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "description": "The x position of this Game Object.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of this Game Object.",
                    "title": "y",
                    "type": "number"
                },
                "z": {
                    "description": "The z position of this Game Object.\nNote: Do not use this value to set the z-index, instead see the `depth` property.",
                    "title": "z",
                    "type": "number"
                }
            },
            "title": "Phaser.Physics.Impact.ImpactImage",
            "type": "object"
        },
        "Phaser.Physics.Impact.ImpactPhysics": {
            "description": "[description]",
            "properties": {
                "add": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.Factory",
                    "description": "[description]",
                    "title": "add"
                },
                "config": {
                    "additionalProperties": true,
                    "description": "[description]",
                    "properties": {
                    },
                    "title": "config",
                    "type": "object"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "[description]",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "[description]",
                    "title": "systems"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.World",
                    "description": "[description]",
                    "title": "world"
                }
            },
            "title": "Phaser.Physics.Impact.ImpactPhysics",
            "type": "object"
        },
        "Phaser.Physics.Impact.ImpactSprite": {
            "description": "An Impact Physics Sprite Game Object.\n\nA Sprite Game Object is used for the display of both static and animated images in your game.\nSprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\nand animated.\n\nThe main difference between a Sprite and an Image Game Object is that you cannot animate Images.\nAs such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\nComponent. If you do not require animation then you can safely use Images to replace Sprites in all cases.",
            "properties": {
                "accel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "accel"
                },
                "active": {
                    "description": "The active state of this Game Object.\nA Game Object with an active state of `true` is processed by the Scenes UpdateList, if added to it.\nAn active object is one which is having its logic and internal systems updated.",
                    "title": "active",
                    "type": "boolean"
                },
                "alpha": {
                    "description": "The alpha value of the Game Object.\n\nThis is a global value, impacting the entire Game Object, not just a region of it.",
                    "title": "alpha",
                    "type": "number"
                },
                "alphaBottomLeft": {
                    "description": "The alpha value starting from the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomLeft",
                    "type": "number"
                },
                "alphaBottomRight": {
                    "description": "The alpha value starting from the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaBottomRight",
                    "type": "number"
                },
                "alphaTopLeft": {
                    "description": "The alpha value starting from the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopLeft",
                    "type": "number"
                },
                "alphaTopRight": {
                    "description": "The alpha value starting from the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "alphaTopRight",
                    "type": "number"
                },
                "angle": {
                    "description": "The angle of this Game Object as expressed in degrees.\n\nWhere 0 is to the right, 90 is down, 180 is left.\n\nIf you prefer to work in radians, see the `rotation` property instead.",
                    "title": "angle",
                    "type": "integer"
                },
                "anims": {
                    "$ref": "#/definitions/Phaser.GameObjects.Components.Animation",
                    "description": "The Animation Controller of this Sprite.",
                    "title": "anims"
                },
                "blendMode": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.BlendModes"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Sets the Blend Mode being used by this Game Object.\n\nThis can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\n\nUnder WebGL only the following Blend Modes are available:\n\n* ADD\n* MULTIPLY\n* SCREEN\n\nCanvas has more available depending on browser support.\n\nYou can also create your own custom Blend Modes in WebGL.\n\nBlend modes have different effects under Canvas and WebGL, and from browser to browser, depending\non support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\nreasons try to be careful about the construction of your Scene and the frequency of which blend modes\nare used.",
                    "title": "blendMode"
                },
                "body": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.Body",
                    "description": "[description]",
                    "title": "body"
                },
                "bounce": {
                    "description": "The bounce, or restitution, value of this body.\nA value between 0 (no rebound) and 1 (full rebound)",
                    "title": "bounce",
                    "type": "number"
                },
                "cameraFilter": {
                    "description": "A bitmask that controls if this Game Object is drawn by a Camera or not.\nNot usually set directly, instead call `Camera.ignore`, however you can\nset this property directly using the Camera.id property:",
                    "title": "cameraFilter",
                    "type": "number"
                },
                "checkAgainst": {
                    "description": "[description]",
                    "title": "checkAgainst",
                    "type": "number"
                },
                "collides": {
                    "description": "[description]",
                    "title": "collides",
                    "type": "number"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A Data Manager.\nIt allows you to store, query and get key/value paired information specific to this Game Object.\n`null` by default. Automatically created if you use `getData` or `setData` or `setDataEnabled`.",
                    "title": "data"
                },
                "debugBodyColor": {
                    "description": "[description]",
                    "title": "debugBodyColor",
                    "type": "number"
                },
                "debugShowBody": {
                    "description": "[description]",
                    "title": "debugShowBody",
                    "type": "boolean"
                },
                "debugShowVelocity": {
                    "description": "[description]",
                    "title": "debugShowVelocity",
                    "type": "boolean"
                },
                "defaultPipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The initial WebGL pipeline of this Game Object.",
                    "title": "defaultPipeline"
                },
                "depth": {
                    "description": "The depth of this Game Object within the Scene.\n\nThe depth is also known as the 'z-index' in some environments, and allows you to change the rendering order\nof Game Objects, without actually moving their position in the display list.\n\nThe depth starts from zero (the default value) and increases from that point. A Game Object with a higher depth\nvalue will always render in front of one with a lower value.\n\nSetting the depth will queue a depth sort event within the Scene.",
                    "title": "depth",
                    "type": "number"
                },
                "displayHeight": {
                    "description": "The displayed height of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayHeight",
                    "type": "number"
                },
                "displayOriginX": {
                    "description": "The horizontal display origin of this Game Object.\nThe origin is a normalized value between 0 and 1.\nThe displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
                    "title": "displayOriginX",
                    "type": "number"
                },
                "displayOriginY": {
                    "description": "The vertical display origin of this Game Object.\nThe origin is a normalized value between 0 and 1.\nThe displayOrigin is a pixel value, based on the size of the Game Object combined with the origin.",
                    "title": "displayOriginY",
                    "type": "number"
                },
                "displayWidth": {
                    "description": "The displayed width of this Game Object.\n\nThis value takes into account the scale factor.\n\nSetting this value will adjust the Game Object's scale property.",
                    "title": "displayWidth",
                    "type": "number"
                },
                "flipX": {
                    "description": "The horizontally flipped state of the Game Object.\nA Game Object that is flipped horizontally will render inversed on the horizontal axis.\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipX",
                    "type": "boolean"
                },
                "flipY": {
                    "description": "The vertically flipped state of the Game Object.\nA Game Object that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\nFlipping always takes place from the middle of the texture and does not impact the scale value.",
                    "title": "flipY",
                    "type": "boolean"
                },
                "frame": {
                    "$ref": "#/definitions/Phaser.Textures.Frame",
                    "description": "The Texture Frame this Game Object is using to render with.",
                    "title": "frame"
                },
                "friction": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "friction"
                },
                "gravity": {
                    "description": "[description]",
                    "title": "gravity",
                    "type": "number"
                },
                "height": {
                    "description": "The native (un-scaled) height of this Game Object.\n\nChanging this value will not change the size that the Game Object is rendered in-game.\nFor that you need to either set the scale of the Game Object (`setScale`) or use\nthe `displayHeight` property.",
                    "title": "height",
                    "type": "number"
                },
                "ignoreDestroy": {
                    "description": "This Game Object will ignore all calls made to its destroy method if this flag is set to `true`.\nThis includes calls that may come from a Group, Container or the Scene itself.\nWhile it allows you to persist a Game Object across Scenes, please understand you are entirely\nresponsible for managing references to and from this Game Object.",
                    "title": "ignoreDestroy",
                    "type": "boolean"
                },
                "input": {
                    "description": "If this Game Object is enabled for input then this property will contain an InteractiveObject instance.\nNot usually set directly. Instead call `GameObject.setInteractive()`.",
                    "properties": {
                        "camera": {
                            "$ref": "#/definitions/Phaser.Cameras.Scene2D.Camera",
                            "description": "The most recent Camera to be tested against this Interactive Object.",
                            "title": "camera"
                        },
                        "cursor": {
                            "description": "Should this Interactive Object change the cursor (via css) when over? (desktop only)",
                            "title": "cursor",
                            "type": [
                                "string",
                                "boolean"
                            ]
                        },
                        "dragStartX": {
                            "description": "The x coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartX",
                            "type": "number"
                        },
                        "dragStartY": {
                            "description": "The y coordinate that the Pointer started dragging this Interactive Object from.",
                            "title": "dragStartY",
                            "type": "number"
                        },
                        "dragState": {
                            "description": "The current drag state of this Interactive Object. 0 = Not being dragged, 1 = being checked for drag, or 2 = being actively dragged.",
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "title": "dragState",
                            "type": "number"
                        },
                        "dragX": {
                            "description": "The x coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragX",
                            "type": "number"
                        },
                        "dragY": {
                            "description": "The y coordinate that this Interactive Object is currently being dragged to.",
                            "title": "dragY",
                            "type": "number"
                        },
                        "draggable": {
                            "description": "Is this Interactive Object draggable? Enable with `InputPlugin.setDraggable`.",
                            "title": "draggable",
                            "type": "boolean"
                        },
                        "dropZone": {
                            "description": "Is this Interactive Object a drag-targets drop zone? Set when the object is created.",
                            "title": "dropZone",
                            "type": "boolean"
                        },
                        "enabled": {
                            "description": "Is this Interactive Object currently enabled for input events?",
                            "title": "enabled",
                            "type": "boolean"
                        },
                        "gameObject": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "The Game Object to which this Interactive Object is bound.",
                            "title": "gameObject"
                        },
                        "hitArea": {
                            "description": "The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.",
                            "title": "hitArea"
                        },
                        "hitAreaCallback": {
                            "description": "The 'contains' check callback that the hit area shape will use for all hit tests.",
                            "title": "hitAreaCallback",
                            "type": "object"
                        },
                        "localX": {
                            "description": "The x coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localX",
                            "type": "number"
                        },
                        "localY": {
                            "description": "The y coordinate that the Pointer interacted with this object on, relative to the Game Object's top-left position.",
                            "title": "localY",
                            "type": "number"
                        },
                        "target": {
                            "$ref": "#/definitions/Phaser.GameObjects.GameObject",
                            "description": "An optional drop target for a draggable Interactive Object.",
                            "title": "target"
                        }
                    },
                    "title": "input",
                    "type": "object"
                },
                "isCropped": {
                    "description": "A boolean flag indicating if this Game Object is being cropped or not.\nYou can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\nEqually, calling `setCrop` with no arguments will reset the crop and disable it.",
                    "title": "isCropped",
                    "type": "boolean"
                },
                "isTinted": {
                    "description": "Does this Game Object have a tint applied to it or not?",
                    "title": "isTinted",
                    "type": "boolean"
                },
                "mask": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.BitmapMask"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Display.Masks.GeometryMask"
                        }
                    ],
                    "description": "The Mask this Game Object is using during render.",
                    "title": "mask"
                },
                "maxVel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "maxVel"
                },
                "name": {
                    "description": "The name of this Game Object.\nEmpty by default and never populated by Phaser, this is left for developers to use.",
                    "title": "name",
                    "type": "string"
                },
                "offset": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "offset"
                },
                "originX": {
                    "description": "The horizontal origin of this Game Object.\nThe origin maps the relationship between the size and position of the Game Object.\nThe default value is 0.5, meaning all Game Objects are positioned based on their center.\nSetting the value to 0 means the position now relates to the left of the Game Object.",
                    "title": "originX",
                    "type": "number"
                },
                "originY": {
                    "description": "The vertical origin of this Game Object.\nThe origin maps the relationship between the size and position of the Game Object.\nThe default value is 0.5, meaning all Game Objects are positioned based on their center.\nSetting the value to 0 means the position now relates to the top of the Game Object.",
                    "title": "originY",
                    "type": "number"
                },
                "parentContainer": {
                    "$ref": "#/definitions/Phaser.GameObjects.Container",
                    "description": "The parent Container of this Game Object, if it has one.",
                    "title": "parentContainer"
                },
                "pipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "The current WebGL pipeline of this Game Object.",
                    "title": "pipeline"
                },
                "renderFlags": {
                    "description": "The flags that are compared against `RENDER_MASK` to determine if this Game Object will render or not.\nThe bits are 0001 | 0010 | 0100 | 1000 set by the components Visible, Alpha, Transform and Texture respectively.\nIf those components are not used by your custom class then you can use this bitmask as you wish.",
                    "title": "renderFlags",
                    "type": "integer"
                },
                "rotation": {
                    "description": "The angle of this Game Object in radians.\n\nIf you prefer to work in degrees, see the `angle` property instead.",
                    "title": "rotation",
                    "type": "number"
                },
                "scaleMode": {
                    "$ref": "#/definitions/Phaser.ScaleModes",
                    "description": "The Scale Mode being used by this Game Object.\nCan be either `ScaleModes.LINEAR` or `ScaleModes.NEAREST`.",
                    "title": "scaleMode"
                },
                "scaleX": {
                    "description": "The horizontal scale of this Game Object.",
                    "title": "scaleX",
                    "type": "number"
                },
                "scaleY": {
                    "description": "The vertical scale of this Game Object.",
                    "title": "scaleY",
                    "type": "number"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Game Object belongs.\nGame Objects can only belong to one Scene.",
                    "title": "scene"
                },
                "scrollFactorX": {
                    "description": "The horizontal scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorX",
                    "type": "number"
                },
                "scrollFactorY": {
                    "description": "The vertical scroll factor of this Game Object.\n\nThe scroll factor controls the influence of the movement of a Camera upon this Game Object.\n\nWhen a camera scrolls it will change the location at which this Game Object is rendered on-screen.\nIt does not change the Game Objects actual position values.\n\nA value of 1 means it will move exactly in sync with a camera.\nA value of 0 means it will not move at all, even if the camera moves.\nOther values control the degree to which the camera movement is mapped to this Game Object.\n\nPlease be aware that scroll factor values other than 1 are not taken in to consideration when\ncalculating physics collisions. Bodies always collide based on their world position, but changing\nthe scroll factor is a visual adjustment to where the textures are rendered, which can offset\nthem from physics bodies if not accounted for in your code.",
                    "title": "scrollFactorY",
                    "type": "number"
                },
                "size": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "size"
                },
                "tabIndex": {
                    "description": "The Tab Index of the Game Object.\nReserved for future use by plugins and the Input Manager.",
                    "title": "tabIndex",
                    "type": "integer"
                },
                "texture": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Textures.CanvasTexture"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Textures.Texture"
                        }
                    ],
                    "description": "The Texture this Game Object is using to render with.",
                    "title": "texture"
                },
                "tint": {
                    "description": "The tint value being applied to the whole of the Game Object.",
                    "title": "tint",
                    "type": "integer"
                },
                "tintBottomLeft": {
                    "description": "The tint value being applied to the bottom-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomLeft",
                    "type": "integer"
                },
                "tintBottomRight": {
                    "description": "The tint value being applied to the bottom-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintBottomRight",
                    "type": "integer"
                },
                "tintFill": {
                    "description": "Fill or additive?",
                    "title": "tintFill",
                    "type": "boolean"
                },
                "tintTopLeft": {
                    "description": "The tint value being applied to the top-left of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopLeft",
                    "type": "integer"
                },
                "tintTopRight": {
                    "description": "The tint value being applied to the top-right of the Game Object.\nThis value is interpolated from the corner to the center of the Game Object.",
                    "title": "tintTopRight",
                    "type": "integer"
                },
                "type": {
                    "description": "A textual representation of this Game Object, i.e. `sprite`.\nUsed internally by Phaser but is available for your own custom classes to populate.",
                    "title": "type",
                    "type": "string"
                },
                "vel": {
                    "$ref": "#/definitions/Object",
                    "description": "[description]",
                    "title": "vel"
                },
                "visible": {
                    "description": "The visible state of the Game Object.\n\nAn invisible Game Object will skip rendering, but will still process update logic.",
                    "title": "visible",
                    "type": "boolean"
                },
                "w": {
                    "description": "The w position of this Game Object.",
                    "title": "w",
                    "type": "number"
                },
                "width": {
                    "description": "The native (un-scaled) width of this Game Object.\n\nChanging this value will not change the size that the Game Object is rendered in-game.\nFor that you need to either set the scale of the Game Object (`setScale`) or use\nthe `displayWidth` property.",
                    "title": "width",
                    "type": "number"
                },
                "x": {
                    "description": "The x position of this Game Object.",
                    "title": "x",
                    "type": "number"
                },
                "y": {
                    "description": "The y position of this Game Object.",
                    "title": "y",
                    "type": "number"
                },
                "z": {
                    "description": "The z position of this Game Object.\nNote: Do not use this value to set the z-index, instead see the `depth` property.",
                    "title": "z",
                    "type": "number"
                }
            },
            "title": "Phaser.Physics.Impact.ImpactSprite",
            "type": "object"
        },
        "Phaser.Physics.Impact.TYPE": {
            "description": "Collision Types - Determine if and how entities collide with each other.\n\nIn ACTIVE vs. LITE or FIXED vs. ANY collisions, only the \"weak\" entity moves,\nwhile the other one stays fixed. In ACTIVE vs. ACTIVE and ACTIVE vs. PASSIVE\ncollisions, both entities are moved. LITE or PASSIVE entities don't collide\nwith other LITE or PASSIVE entities at all. The behavior for FIXED vs.\nFIXED collisions is undefined.",
            "title": "Phaser.Physics.Impact.TYPE"
        },
        "Phaser.Physics.Impact.World": {
            "description": "[description]",
            "properties": {
                "bodies": {
                    "$ref": "#/definitions/Phaser.Structs.Set<Phaser.Physics.Impact.Body>",
                    "description": "[description]",
                    "title": "bodies"
                },
                "cellSize": {
                    "description": "Spatial hash cell dimensions",
                    "title": "cellSize",
                    "type": "integer"
                },
                "collisionMap": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.CollisionMap",
                    "description": "[description]",
                    "title": "collisionMap"
                },
                "debugGraphic": {
                    "$ref": "#/definitions/Phaser.GameObjects.Graphics",
                    "description": "[description]",
                    "title": "debugGraphic"
                },
                "defaults": {
                    "description": "[description]",
                    "properties": {
                        "bodyDebugColor": {
                            "description": "The color of this Body on the debug display.",
                            "title": "bodyDebugColor",
                            "type": "number"
                        },
                        "bounciness": {
                            "description": "The default bounce, or restitution, of bodies in the world.",
                            "title": "bounciness",
                            "type": "number"
                        },
                        "debugShowBody": {
                            "description": "Whether the Body's boundary is drawn to the debug display.",
                            "title": "debugShowBody",
                            "type": "boolean"
                        },
                        "debugShowVelocity": {
                            "description": "Whether the Body's velocity is drawn to the debug display.",
                            "title": "debugShowVelocity",
                            "type": "boolean"
                        },
                        "gravityFactor": {
                            "description": "Gravity multiplier. Set to 0 for no gravity.",
                            "title": "gravityFactor",
                            "type": "number"
                        },
                        "maxVelocityX": {
                            "description": "Maximum X velocity objects can move.",
                            "title": "maxVelocityX",
                            "type": "number"
                        },
                        "maxVelocityY": {
                            "description": "Maximum Y velocity objects can move.",
                            "title": "maxVelocityY",
                            "type": "number"
                        },
                        "minBounceVelocity": {
                            "description": "The minimum velocity an object can be moving at to be considered for bounce.",
                            "title": "minBounceVelocity",
                            "type": "number"
                        },
                        "velocityDebugColor": {
                            "description": "The color of the Body's velocity on the debug display.",
                            "title": "velocityDebugColor",
                            "type": "number"
                        }
                    },
                    "title": "defaults",
                    "type": "object"
                },
                "delta": {
                    "description": "[description]",
                    "title": "delta",
                    "type": "number"
                },
                "drawDebug": {
                    "description": "[description]",
                    "title": "drawDebug",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "[description]",
                    "title": "enabled",
                    "type": "boolean"
                },
                "gravity": {
                    "description": "[description]",
                    "title": "gravity",
                    "type": "number"
                },
                "maxStep": {
                    "description": "Impacts maximum time step is 20 fps.",
                    "title": "maxStep",
                    "type": "number"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "[description]",
                    "title": "scene"
                },
                "timeScale": {
                    "description": "[description]",
                    "title": "timeScale",
                    "type": "number"
                },
                "walls": {
                    "description": "An object containing the 4 wall bodies that bound the physics world.",
                    "properties": {
                        "bottom": {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body",
                            "description": "The bottom wall of the world bounds.",
                            "title": "bottom"
                        },
                        "left": {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body",
                            "description": "The left-side wall of the world bounds.",
                            "title": "left"
                        },
                        "right": {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body",
                            "description": "The right-side wall of the world bounds.",
                            "title": "right"
                        },
                        "top": {
                            "$ref": "#/definitions/Phaser.Physics.Impact.Body",
                            "description": "The top wall of the world bounds.",
                            "title": "top"
                        }
                    },
                    "title": "walls",
                    "type": "object"
                }
            },
            "title": "Phaser.Physics.Impact.World",
            "type": "object"
        },
        "Phaser.Physics.Matter.Factory": {
            "description": "[description]",
            "properties": {
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "[description]",
                    "title": "scene"
                },
                "sys": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "A reference to the Scene.Systems this Matter Physics instance belongs to.",
                    "title": "sys"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Matter.World",
                    "description": "[description]",
                    "title": "world"
                }
            },
            "title": "Phaser.Physics.Matter.Factory",
            "type": "object"
        },
        "Phaser.Physics.Matter.MatterPhysics": {
            "description": "[description]",
            "properties": {
                "add": {
                    "$ref": "#/definitions/Phaser.Physics.Matter.Factory",
                    "description": "[description]",
                    "title": "add"
                },
                "config": {
                    "additionalProperties": true,
                    "description": "[description]",
                    "properties": {
                    },
                    "title": "config",
                    "type": "object"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "[description]",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "[description]",
                    "title": "systems"
                },
                "verts": {
                    "$ref": "#/definitions/MatterJS.Vertices",
                    "description": "A reference to the `Matter.Vertices` module which contains methods for creating and manipulating sets of vertices.\nA set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\nA `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).",
                    "title": "verts"
                },
                "world": {
                    "$ref": "#/definitions/Phaser.Physics.Matter.World",
                    "description": "[description]",
                    "title": "world"
                }
            },
            "title": "Phaser.Physics.Matter.MatterPhysics",
            "type": "object"
        },
        "Phaser.Physics.Matter.World": {
            "description": "[description]",
            "properties": {
                "autoUpdate": {
                    "description": "Automatically call Engine.update every time the game steps.\nIf you disable this then you are responsible for calling `World.step` directly from your game.\nIf you call `set60Hz` or `set30Hz` then `autoUpdate` is reset to `true`.",
                    "title": "autoUpdate",
                    "type": "boolean"
                },
                "correction": {
                    "description": "The correction argument is an optional Number that specifies the time correction factor to apply to the update.\nThis can help improve the accuracy of the simulation in cases where delta is changing between updates.\nThe value of correction is defined as delta / lastDelta, i.e. the percentage change of delta over the last step.\nTherefore the value is always 1 (no correction) when delta constant (or when no correction is desired, which is the default).\nSee the paper on Time Corrected Verlet for more information.",
                    "title": "correction",
                    "type": "number"
                },
                "debugGraphic": {
                    "$ref": "#/definitions/Phaser.GameObjects.Graphics",
                    "description": "An instance of the Graphics object the debug bodies are drawn to, if enabled.",
                    "title": "debugGraphic"
                },
                "defaults": {
                    "additionalProperties": true,
                    "description": "The default configuration values.",
                    "properties": {
                    },
                    "title": "defaults",
                    "type": "object"
                },
                "drawDebug": {
                    "description": "A flag that controls if the debug graphics will be drawn to or not.",
                    "title": "drawDebug",
                    "type": "boolean"
                },
                "enabled": {
                    "description": "A flag that toggles if the world is enabled or not.",
                    "title": "enabled",
                    "type": "boolean"
                },
                "engine": {
                    "$ref": "#/definitions/MatterJS.Engine",
                    "description": "An instance of the MatterJS Engine.",
                    "title": "engine"
                },
                "getDelta": {
                    "$ref": "#/definitions/Function",
                    "description": "This function is called every time the core game loop steps, which is bound to the\nRequest Animation Frame frequency unless otherwise modified.\n\nThe function is passed two values: `time` and `delta`, both of which come from the game step values.\n\nIt must return a number. This number is used as the delta value passed to Matter.Engine.update.\n\nYou can override this function with your own to define your own timestep.\n\nIf you need to update the Engine multiple times in a single game step then call\n`World.update` as many times as required. Each call will trigger the `getDelta` function.\nIf you wish to have full control over when the Engine updates then see the property `autoUpdate`.\n\nYou can also adjust the number of iterations that Engine.update performs.\nUse the Scene Matter Physics config object to set the following properties:\n\npositionIterations (defaults to 6)\nvelocityIterations (defaults to 4)\nconstraintIterations (defaults to 2)\n\nAdjusting these values can help performance in certain situations, depending on the physics requirements\nof your game.",
                    "title": "getDelta"
                },
                "localWorld": {
                    "$ref": "#/definitions/MatterJS.World",
                    "description": "A `World` composite object that will contain all simulated bodies and constraints.",
                    "title": "localWorld"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene to which this Matter World instance belongs.",
                    "title": "scene"
                },
                "walls": {
                    "additionalProperties": true,
                    "description": "An object containing the 4 wall bodies that bound the physics world.",
                    "properties": {
                    },
                    "title": "walls",
                    "type": "object"
                }
            },
            "title": "Phaser.Physics.Matter.World",
            "type": "object"
        },
        "Phaser.Plugins.PluginManager": {
            "description": "The PluginManager is responsible for installing and adding plugins to Phaser.\n\nIt is a global system and therefore belongs to the Game instance, not a specific Scene.\n\nIt works in conjunction with the PluginCache. Core internal plugins automatically register themselves \nwith the Cache, but it's the Plugin Manager that is responsible for injecting them into the Scenes.\n\nThere are two types of plugin:\n\n1) A Global Plugin\n2) A Scene Plugin\n\nA Global Plugin is a plugin that lives within the Plugin Manager rather than a Scene. You can get\naccess to it by calling `PluginManager.get` and providing a key. Any Scene that requests a plugin in\nthis way will all get access to the same plugin instance, allowing you to use a single plugin across\nmultiple Scenes.\n\nA Scene Plugin is a plugin dedicated to running within a Scene. These are different to Global Plugins\nin that their instances do not live within the Plugin Manager, but within the Scene Systems class instead.\nAnd that every Scene created is given its own unique instance of a Scene Plugin. Examples of core Scene\nPlugins include the Input Plugin, the Tween Plugin and the physics Plugins.\n\nYou can add a plugin to Phaser in three different ways:\n\n1) Preload it\n2) Include it in your source code and install it via the Game Config\n3) Include it in your source code and install it within a Scene\n\nFor examples of all of these approaches please see the Phaser 3 Examples Repo `plugins` folder.\n\nFor information on creating your own plugin please see the Phaser 3 Plugin Template.",
            "properties": {
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "The game instance that owns this Plugin Manager.",
                    "title": "game"
                },
                "plugins": {
                    "description": "The global plugins currently running and managed by this Plugin Manager.\nA plugin must have been started at least once in order to appear in this list.",
                    "items": {
                        "properties": {
                            "active": {
                                "description": "Is the plugin active or not?",
                                "title": "active",
                                "type": "boolean"
                            },
                            "key": {
                                "description": "The unique name of this plugin within the plugin cache.",
                                "title": "key",
                                "type": "string"
                            },
                            "mapping": {
                                "description": "If this plugin is to be injected into the Scene Systems, this is the property key map used.",
                                "title": "mapping",
                                "type": "string"
                            },
                            "plugin": {
                                "$ref": "#/definitions/Function",
                                "description": "An instance of the plugin.",
                                "title": "plugin"
                            }
                        },
                        "type": "object"
                    },
                    "title": "plugins",
                    "type": "array"
                },
                "scenePlugins": {
                    "description": "A list of plugin keys that should be installed into Scenes as well as the Core Plugins.",
                    "items": {
                        "type": "string"
                    },
                    "title": "scenePlugins",
                    "type": "array"
                }
            },
            "title": "Phaser.Plugins.PluginManager",
            "type": "object"
        },
        "Phaser.Renderer.Canvas.CanvasRenderer": {
            "description": "[description]",
            "properties": {
                "blendModes": {
                    "description": "[description]",
                    "items": {
                    },
                    "title": "blendModes",
                    "type": "array"
                },
                "config": {
                    "description": "[description]",
                    "properties": {
                        "antialias": {
                            "description": "[description]",
                            "title": "antialias",
                            "type": "boolean"
                        },
                        "autoResize": {
                            "description": "[description]",
                            "title": "autoResize",
                            "type": "boolean"
                        },
                        "backgroundColor": {
                            "$ref": "#/definitions/Phaser.Display.Color",
                            "description": "[description]",
                            "title": "backgroundColor"
                        },
                        "clearBeforeRender": {
                            "description": "[description]",
                            "title": "clearBeforeRender",
                            "type": "boolean"
                        },
                        "resolution": {
                            "description": "[description]",
                            "title": "resolution",
                            "type": "number"
                        },
                        "roundPixels": {
                            "description": "[description]",
                            "title": "roundPixels",
                            "type": "boolean"
                        }
                    },
                    "title": "config",
                    "type": "object"
                },
                "currentContext": {
                    "$ref": "#/definitions/CanvasRenderingContext2D",
                    "description": "[description]",
                    "title": "currentContext"
                },
                "currentScaleMode": {
                    "description": "[description]",
                    "title": "currentScaleMode",
                    "type": "number"
                },
                "drawCount": {
                    "description": "[description]",
                    "title": "drawCount",
                    "type": "number"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "The Phaser Game instance that owns this renderer.",
                    "title": "game"
                },
                "gameCanvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "[description]",
                    "title": "gameCanvas"
                },
                "gameContext": {
                    "$ref": "#/definitions/CanvasRenderingContext2D",
                    "description": "[description]",
                    "title": "gameContext"
                },
                "height": {
                    "description": "[description]",
                    "title": "height",
                    "type": "number"
                },
                "scaleMode": {
                    "description": "[description]",
                    "title": "scaleMode",
                    "type": "integer"
                },
                "snapshotCallback": {
                    "description": "[description]",
                    "title": "snapshotCallback",
                    "type": "object"
                },
                "snapshotEncoder": {
                    "description": "[description]",
                    "title": "snapshotEncoder",
                    "type": "number"
                },
                "snapshotType": {
                    "description": "[description]",
                    "title": "snapshotType",
                    "type": "string"
                },
                "type": {
                    "description": "[description]",
                    "title": "type",
                    "type": "integer"
                },
                "width": {
                    "description": "[description]",
                    "title": "width",
                    "type": "number"
                }
            },
            "title": "Phaser.Renderer.Canvas.CanvasRenderer",
            "type": "object"
        },
        "Phaser.Renderer.WebGL.WebGLPipeline": {
            "description": "WebGLPipeline is a class that describes the way elements will be rendererd\nin WebGL, specially focused on batching vertices (batching is not provided).\nPipelines are mostly used for describing 2D rendering passes but it's\nflexible enough to be used for any type of rendering including 3D.\nInternally WebGLPipeline will handle things like compiling shaders,\ncreating vertex buffers, assigning primitive topology and binding\nvertex attributes.\n\nThe config properties are:\n- game: Current game instance.\n- renderer: Current WebGL renderer.\n- gl: Current WebGL context.\n- topology: This indicates how the primitives are rendered. The default value is GL_TRIANGLES.\n              Here is the full list of rendering primitives (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants).\n- vertShader: Source for vertex shader as a string.\n- fragShader: Source for fragment shader as a string.\n- vertexCapacity: The amount of vertices that shall be allocated\n- vertexSize: The size of a single vertex in bytes.\n- vertices: An optional buffer of vertices\n- attributes: An array describing the vertex attributes\n\nThe vertex attributes properties are:\n- name : String - Name of the attribute in the vertex shader\n- size : integer - How many components describe the attribute. For ex: vec3 = size of 3, float = size of 1\n- type : GLenum - WebGL type (gl.BYTE, gl.SHORT, gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, gl.FLOAT)\n- normalized : boolean - Is the attribute normalized\n- offset : integer - The offset in bytes to the current attribute in the vertex. Equivalent to offsetof(vertex, attrib) in C\nHere you can find more information of how to describe an attribute:\n- https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer",
            "properties": {
                "active": {
                    "description": "Indicates if the current pipeline is active or not for this frame only.\nReset in the onRender method.",
                    "title": "active",
                    "type": "boolean"
                },
                "attributes": {
                    "additionalProperties": true,
                    "description": "Array of objects that describe the vertex attributes",
                    "properties": {
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "bytes": {
                    "additionalProperties": false,
                    "description": "A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\nrequested number of bytes could not be allocated an exception is raised.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "title": "bytes",
                    "type": "object"
                },
                "flushLocked": {
                    "description": "Indicates if the current pipeline is flushing the contents to the GPU.\nWhen the variable is set the flush function will be locked.",
                    "title": "flushLocked",
                    "type": "boolean"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "[description]",
                    "title": "game"
                },
                "gl": {
                    "$ref": "#/definitions/WebGLRenderingContext",
                    "description": "[description]",
                    "title": "gl"
                },
                "height": {
                    "description": "Height of the current viewport",
                    "title": "height",
                    "type": "number"
                },
                "name": {
                    "description": "Name of the Pipeline. Used for identifying",
                    "title": "name",
                    "type": "string"
                },
                "program": {
                    "$ref": "#/definitions/WebGLProgram",
                    "description": "The handle to a WebGL program",
                    "title": "program"
                },
                "renderer": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLRenderer",
                    "description": "[description]",
                    "title": "renderer"
                },
                "resolution": {
                    "description": "Used to store the current game resolution",
                    "title": "resolution",
                    "type": "number"
                },
                "topology": {
                    "description": "The primitive topology which the pipeline will use to submit draw calls",
                    "title": "topology",
                    "type": "integer"
                },
                "vertexBuffer": {
                    "$ref": "#/definitions/WebGLBuffer",
                    "description": "The handle to a WebGL vertex buffer object.",
                    "title": "vertexBuffer"
                },
                "vertexCapacity": {
                    "description": "The limit of vertices that the pipeline can hold",
                    "title": "vertexCapacity",
                    "type": "integer"
                },
                "vertexComponentCount": {
                    "description": "This will store the amount of components of 32 bit length",
                    "title": "vertexComponentCount",
                    "type": "integer"
                },
                "vertexCount": {
                    "description": "How many vertices have been fed to the current pipeline.",
                    "title": "vertexCount",
                    "type": "number"
                },
                "vertexData": {
                    "$ref": "#/definitions/ArrayBuffer",
                    "description": "Raw byte buffer of vertices.",
                    "title": "vertexData"
                },
                "vertexSize": {
                    "description": "The size in bytes of the vertex",
                    "title": "vertexSize",
                    "type": "integer"
                },
                "view": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "[description]",
                    "title": "view"
                },
                "width": {
                    "description": "Width of the current viewport",
                    "title": "width",
                    "type": "number"
                }
            },
            "title": "Phaser.Renderer.WebGL.WebGLPipeline",
            "type": "object"
        },
        "Phaser.Renderer.WebGL.WebGLRenderer": {
            "description": "WebGLRenderer is a class that contains the needed functionality to keep the\nWebGLRenderingContext state clean. The main idea of the WebGLRenderer is to keep track of\nany context change that happens for WebGL rendering inside of Phaser. This means\nif raw webgl functions are called outside the WebGLRenderer of the Phaser WebGL\nrendering ecosystem they might pollute the current WebGLRenderingContext state producing\nunexpected behavior. It's recommended that WebGL interaction is done through\nWebGLRenderer and/or WebGLPipeline.",
            "properties": {
                "blankTexture": {
                    "$ref": "#/definitions/WebGLTexture",
                    "description": "A blank 32x32 transparent texture, as used by the Graphics system where needed.\nThis is set in the `boot` method.",
                    "title": "blankTexture"
                },
                "blendModes": {
                    "description": "An array of blend modes supported by the WebGL Renderer.\n\nThis array includes the default blend modes as well as any custom blend modes added through {@link #addBlendMode}.",
                    "items": {
                    },
                    "title": "blendModes",
                    "type": "array"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "The canvas which this WebGL Renderer draws to.",
                    "title": "canvas"
                },
                "compression": {
                    "description": "Stores the supported WebGL texture compression formats.",
                    "items": {
                    },
                    "title": "compression",
                    "type": "array"
                },
                "config": {
                    "description": "The local configuration settings of this WebGL Renderer.",
                    "properties": {
                        "antialias": {
                            "description": "[description]",
                            "title": "antialias",
                            "type": "boolean"
                        },
                        "autoResize": {
                            "description": "[description]",
                            "title": "autoResize",
                            "type": "boolean"
                        },
                        "backgroundColor": {
                            "$ref": "#/definitions/Phaser.Display.Color",
                            "description": "[description]",
                            "title": "backgroundColor"
                        },
                        "clearBeforeRender": {
                            "description": "[description]",
                            "title": "clearBeforeRender",
                            "type": "boolean"
                        },
                        "resolution": {
                            "description": "[description]",
                            "title": "resolution",
                            "type": "number"
                        },
                        "roundPixels": {
                            "description": "[description]",
                            "title": "roundPixels",
                            "type": "boolean"
                        }
                    },
                    "title": "config",
                    "type": "object"
                },
                "contextLost": {
                    "description": "Set to `true` if the WebGL context of the renderer is lost.",
                    "title": "contextLost",
                    "type": "boolean"
                },
                "currentActiveTextureUnit": {
                    "description": "Cached value for the last texture unit that was used",
                    "title": "currentActiveTextureUnit",
                    "type": "integer"
                },
                "currentBlendMode": {
                    "description": "Current blend mode in use",
                    "title": "currentBlendMode",
                    "type": "integer"
                },
                "currentFramebuffer": {
                    "$ref": "#/definitions/WebGLFramebuffer",
                    "description": "Current framebuffer in use",
                    "title": "currentFramebuffer"
                },
                "currentIndexBuffer": {
                    "$ref": "#/definitions/WebGLBuffer",
                    "description": "Current WebGLBuffer (Index buffer) in use",
                    "title": "currentIndexBuffer"
                },
                "currentPipeline": {
                    "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLPipeline",
                    "description": "Current WebGLPipeline in use",
                    "title": "currentPipeline"
                },
                "currentProgram": {
                    "$ref": "#/definitions/WebGLProgram",
                    "description": "Current WebGLProgram in use",
                    "title": "currentProgram"
                },
                "currentScissor": {
                    "additionalProperties": false,
                    "description": "A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\nrequested number of bytes could not be allocated an exception is raised.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "title": "currentScissor",
                    "type": "object"
                },
                "currentScissorEnabled": {
                    "description": "Indicates if the the scissor state is enabled in WebGLRenderingContext",
                    "title": "currentScissorEnabled",
                    "type": "boolean"
                },
                "currentTextures": {
                    "description": "An array of the last texture handles that were bound to the WebGLRenderingContext",
                    "items": {
                    },
                    "title": "currentTextures",
                    "type": "array"
                },
                "currentVertexBuffer": {
                    "$ref": "#/definitions/WebGLBuffer",
                    "description": "Current WebGLBuffer (Vertex buffer) in use",
                    "title": "currentVertexBuffer"
                },
                "drawingBufferHeight": {
                    "description": "Cached drawing buffer height to reduce gl calls.",
                    "title": "drawingBufferHeight",
                    "type": "number"
                },
                "extensions": {
                    "additionalProperties": true,
                    "description": "Extensions loaded into the current context",
                    "properties": {
                    },
                    "title": "extensions",
                    "type": "object"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "The Game instance which owns this WebGL Renderer.",
                    "title": "game"
                },
                "gl": {
                    "$ref": "#/definitions/WebGLRenderingContext",
                    "description": "The underlying WebGL context of the renderer.",
                    "title": "gl"
                },
                "glFormats": {
                    "description": "Stores the current WebGL component formats for further use",
                    "items": {
                    },
                    "title": "glFormats",
                    "type": "array"
                },
                "height": {
                    "description": "The height of the canvas being rendered to.",
                    "title": "height",
                    "type": "integer"
                },
                "lostContextCallbacks": {
                    "description": "An array of functions to invoke if the WebGL context is lost.",
                    "items": {
                        "type": "object"
                    },
                    "title": "lostContextCallbacks",
                    "type": "array"
                },
                "nativeTextures": {
                    "description": "Keeps track of any WebGLTexture created with the current WebGLRenderingContext",
                    "items": {
                    },
                    "title": "nativeTextures",
                    "type": "array"
                },
                "pipelines": {
                    "additionalProperties": true,
                    "description": "This object will store all pipelines created through addPipeline",
                    "properties": {
                    },
                    "title": "pipelines",
                    "type": "object"
                },
                "restoredContextCallbacks": {
                    "description": "An array of functions to invoke if the WebGL context is restored.",
                    "items": {
                        "type": "object"
                    },
                    "title": "restoredContextCallbacks",
                    "type": "array"
                },
                "scissorStack": {
                    "additionalProperties": false,
                    "description": "A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\nrequested number of bytes could not be allocated an exception is raised.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "title": "scissorStack",
                    "type": "object"
                },
                "snapshotState": {
                    "description": "Details about the currently scheduled snapshot.\n\nIf a non-null `callback` is set in this object, a snapshot of the canvas will be taken after the current frame is fully rendered.",
                    "properties": {
                        "callback": {
                            "description": "The function to call after the snapshot is taken.",
                            "title": "callback",
                            "type": "object"
                        },
                        "encoder": {
                            "description": "The image quality, between 0 and 1, for image formats which use lossy compression (such as `image/jpeg`).",
                            "title": "encoder",
                            "type": "number"
                        },
                        "type": {
                            "description": "The type of the image to create.",
                            "title": "type",
                            "type": "string"
                        }
                    },
                    "title": "snapshotState",
                    "type": "object"
                },
                "supportedExtensions": {
                    "additionalProperties": true,
                    "description": "Array of strings that indicate which WebGL extensions are supported by the browser",
                    "properties": {
                    },
                    "title": "supportedExtensions",
                    "type": "object"
                },
                "type": {
                    "description": "A constant which allows the renderer to be easily identified as a WebGL Renderer.",
                    "title": "type",
                    "type": "integer"
                },
                "width": {
                    "description": "The width of the canvas being rendered to.",
                    "title": "width",
                    "type": "integer"
                }
            },
            "title": "Phaser.Renderer.WebGL.WebGLRenderer",
            "type": "object"
        },
        "Phaser.ScaleModes": {
            "description": "Phaser Scale Modes.",
            "title": "Phaser.ScaleModes"
        },
        "Phaser.Scene": {
            "description": "[description]",
            "properties": {
                "add": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObjectFactory",
                    "description": "A scene level Game Object Factory.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "add"
                },
                "anims": {
                    "$ref": "#/definitions/Phaser.Animations.AnimationManager",
                    "description": "A reference to the global Animation Manager.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "anims"
                },
                "cache": {
                    "$ref": "#/definitions/Phaser.Cache.CacheManager",
                    "description": "A reference to the global Cache.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "cache"
                },
                "cameras": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.CameraManager",
                    "description": "A scene level Camera System.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "cameras"
                },
                "children": {
                    "$ref": "#/definitions/Phaser.GameObjects.DisplayList",
                    "description": "A scene level Game Object Display List.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "children"
                },
                "data": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A scene level Data Manager Plugin.\nThis property will only be available if defined in the Scene Injection Map and the plugin is installed.",
                    "title": "data"
                },
                "events": {
                    "$ref": "#/definitions/Phaser.Events.EventEmitter",
                    "description": "A scene level Event Emitter.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "events"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "A reference to the Phaser.Game instance.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "game"
                },
                "impact": {
                    "$ref": "#/definitions/Phaser.Physics.Impact.ImpactPhysics",
                    "description": "A scene level Impact Physics Plugin.\nThis property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.",
                    "title": "impact"
                },
                "input": {
                    "$ref": "#/definitions/Phaser.Input.InputPlugin",
                    "description": "A scene level Input Manager Plugin.\nThis property will only be available if defined in the Scene Injection Map and the plugin is installed.",
                    "title": "input"
                },
                "lights": {
                    "$ref": "#/definitions/Phaser.GameObjects.LightsManager",
                    "description": "A scene level Lights Manager Plugin.\nThis property will only be available if defined in the Scene Injection Map and the plugin is installed.",
                    "title": "lights"
                },
                "load": {
                    "$ref": "#/definitions/Phaser.Loader.LoaderPlugin",
                    "description": "A scene level Loader Plugin.\nThis property will only be available if defined in the Scene Injection Map and the plugin is installed.",
                    "title": "load"
                },
                "make": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObjectCreator",
                    "description": "A scene level Game Object Creator.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "make"
                },
                "matter": {
                    "$ref": "#/definitions/Phaser.Physics.Matter.MatterPhysics",
                    "description": "A scene level Matter Physics Plugin.\nThis property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.",
                    "title": "matter"
                },
                "physics": {
                    "$ref": "#/definitions/Phaser.Physics.Arcade.ArcadePhysics",
                    "description": "A scene level Arcade Physics Plugin.\nThis property will only be available if defined in the Scene Injection Map, the plugin is installed and configured.",
                    "title": "physics"
                },
                "registry": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A reference to the game level Data Manager.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "registry"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scenes.ScenePlugin",
                    "description": "A reference to the Scene Manager Plugin.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "scene"
                },
                "sound": {
                    "$ref": "#/definitions/Phaser.Sound.BaseSoundManager",
                    "description": "A reference to the Sound Manager.\nThis property will only be available if defined in the Scene Injection Map and the plugin is installed.",
                    "title": "sound"
                },
                "sys": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "The Scene Systems. You must never overwrite this property, or all hell will break lose.",
                    "title": "sys"
                },
                "textures": {
                    "$ref": "#/definitions/Phaser.Textures.TextureManager",
                    "description": "A reference to the Texture Manager.\nThis property will only be available if defined in the Scene Injection Map.",
                    "title": "textures"
                },
                "time": {
                    "$ref": "#/definitions/Phaser.Time.Clock",
                    "description": "A scene level Time and Clock Plugin.\nThis property will only be available if defined in the Scene Injection Map and the plugin is installed.",
                    "title": "time"
                },
                "tweens": {
                    "$ref": "#/definitions/Phaser.Tweens.TweenManager",
                    "description": "A scene level Tween Manager Plugin.\nThis property will only be available if defined in the Scene Injection Map and the plugin is installed.",
                    "title": "tweens"
                }
            },
            "title": "Phaser.Scene",
            "type": "object"
        },
        "Phaser.Scenes.SceneManager": {
            "description": "The Scene Manager.\n\nThe Scene Manager is a Game level system, responsible for creating, processing and updating all of the\nScenes in a Game instance.",
            "properties": {
                "customViewports": {
                    "description": "Do any of the Cameras in any of the Scenes require a custom viewport?\nIf not we can skip scissor tests.",
                    "title": "customViewports",
                    "type": "number"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "The Game that this SceneManager belongs to.",
                    "title": "game"
                },
                "isBooted": {
                    "description": "Has the Scene Manager properly started?",
                    "title": "isBooted",
                    "type": "boolean"
                },
                "isProcessing": {
                    "description": "Is the Scene Manager actively processing the Scenes list?",
                    "title": "isProcessing",
                    "type": "boolean"
                },
                "keys": {
                    "additionalProperties": true,
                    "description": "An object that maps the keys to the scene so we can quickly get a scene from a key without iteration.",
                    "properties": {
                    },
                    "title": "keys",
                    "type": "object"
                },
                "scenes": {
                    "description": "The array in which all of the scenes are kept.",
                    "items": {
                    },
                    "title": "scenes",
                    "type": "array"
                }
            },
            "title": "Phaser.Scenes.SceneManager",
            "type": "object"
        },
        "Phaser.Scenes.ScenePlugin": {
            "description": "A proxy class to the Global Scene Manager.",
            "properties": {
                "key": {
                    "description": "The key of the Scene this ScenePlugin belongs to.",
                    "title": "key",
                    "type": "string"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Scenes.SceneManager",
                    "description": "The Game's SceneManager.",
                    "title": "manager"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "The Scene that this ScenePlugin belongs to.",
                    "title": "scene"
                },
                "settings": {
                    "description": "The settings of the Scene this ScenePlugin belongs to.",
                    "properties": {
                        "active": {
                            "description": "[description]",
                            "title": "active",
                            "type": "boolean"
                        },
                        "cameras": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "backgroundColor": {
                                            "anyOf": [
                                                {
                                                    "enum": [
                                                        false
                                                    ],
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "description": "A CSS color string controlling the Camera background color.",
                                            "title": "backgroundColor"
                                        },
                                        "bounds": {
                                            "additionalProperties": true,
                                            "description": "Defines the Camera bounds.",
                                            "properties": {
                                            },
                                            "title": "bounds",
                                            "type": "object"
                                        },
                                        "bounds.height": {
                                            "description": "The height of the Camera bounds.",
                                            "title": "bounds.height",
                                            "type": "number"
                                        },
                                        "bounds.width": {
                                            "description": "The width of the Camera bounds.",
                                            "title": "bounds.width",
                                            "type": "number"
                                        },
                                        "bounds.x": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.x",
                                            "type": "number"
                                        },
                                        "bounds.y": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.y",
                                            "type": "number"
                                        },
                                        "height": {
                                            "description": "The height of the Camera viewport.",
                                            "title": "height",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of the Camera.",
                                            "title": "name",
                                            "type": "string"
                                        },
                                        "rotation": {
                                            "description": "The rotation of the Camera, in radians.",
                                            "title": "rotation",
                                            "type": "number"
                                        },
                                        "roundPixels": {
                                            "description": "Should the Camera round pixels before rendering?",
                                            "title": "roundPixels",
                                            "type": "boolean"
                                        },
                                        "scrollX": {
                                            "description": "The horizontal scroll position of the Camera.",
                                            "title": "scrollX",
                                            "type": "number"
                                        },
                                        "scrollY": {
                                            "description": "The vertical scroll position of the Camera.",
                                            "title": "scrollY",
                                            "type": "number"
                                        },
                                        "width": {
                                            "description": "The width of the Camera viewport.",
                                            "title": "width",
                                            "type": "integer"
                                        },
                                        "x": {
                                            "description": "The horizontal position of the Camera viewport.",
                                            "title": "x",
                                            "type": "integer"
                                        },
                                        "y": {
                                            "description": "The vertical position of the Camera viewport.",
                                            "title": "y",
                                            "type": "integer"
                                        },
                                        "zoom": {
                                            "description": "The default zoom level of the Camera.",
                                            "title": "zoom",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "items": {
                                        "properties": {
                                            "backgroundColor": {
                                                "anyOf": [
                                                    {
                                                        "enum": [
                                                            false
                                                        ],
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "A CSS color string controlling the Camera background color.",
                                                "title": "backgroundColor"
                                            },
                                            "bounds": {
                                                "additionalProperties": true,
                                                "description": "Defines the Camera bounds.",
                                                "properties": {
                                                },
                                                "title": "bounds",
                                                "type": "object"
                                            },
                                            "bounds.height": {
                                                "description": "The height of the Camera bounds.",
                                                "title": "bounds.height",
                                                "type": "number"
                                            },
                                            "bounds.width": {
                                                "description": "The width of the Camera bounds.",
                                                "title": "bounds.width",
                                                "type": "number"
                                            },
                                            "bounds.x": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.x",
                                                "type": "number"
                                            },
                                            "bounds.y": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.y",
                                                "type": "number"
                                            },
                                            "height": {
                                                "description": "The height of the Camera viewport.",
                                                "title": "height",
                                                "type": "integer"
                                            },
                                            "name": {
                                                "description": "The name of the Camera.",
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "rotation": {
                                                "description": "The rotation of the Camera, in radians.",
                                                "title": "rotation",
                                                "type": "number"
                                            },
                                            "roundPixels": {
                                                "description": "Should the Camera round pixels before rendering?",
                                                "title": "roundPixels",
                                                "type": "boolean"
                                            },
                                            "scrollX": {
                                                "description": "The horizontal scroll position of the Camera.",
                                                "title": "scrollX",
                                                "type": "number"
                                            },
                                            "scrollY": {
                                                "description": "The vertical scroll position of the Camera.",
                                                "title": "scrollY",
                                                "type": "number"
                                            },
                                            "width": {
                                                "description": "The width of the Camera viewport.",
                                                "title": "width",
                                                "type": "integer"
                                            },
                                            "x": {
                                                "description": "The horizontal position of the Camera viewport.",
                                                "title": "x",
                                                "type": "integer"
                                            },
                                            "y": {
                                                "description": "The vertical position of the Camera viewport.",
                                                "title": "y",
                                                "type": "integer"
                                            },
                                            "zoom": {
                                                "description": "The default zoom level of the Camera.",
                                                "title": "zoom",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            ],
                            "description": "[description]",
                            "title": "cameras"
                        },
                        "data": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "data",
                            "type": "object"
                        },
                        "isBooted": {
                            "description": "[description]",
                            "title": "isBooted",
                            "type": "boolean"
                        },
                        "isTransition": {
                            "description": "[description]",
                            "title": "isTransition",
                            "type": "boolean"
                        },
                        "key": {
                            "description": "[description]",
                            "title": "key",
                            "type": "string"
                        },
                        "loader": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "loader",
                            "type": "object"
                        },
                        "map": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "[description]",
                            "title": "map",
                            "type": "object"
                        },
                        "pack": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "dataKey": {
                                            "description": "If specified instead of the whole JSON file being parsed, only the section corresponding to this property key will be added. If the property you want to extract is nested, use periods to divide it.",
                                            "title": "dataKey",
                                            "type": "string"
                                        },
                                        "extension": {
                                            "description": "The default file extension to use if no url is provided.",
                                            "title": "extension",
                                            "type": "string"
                                        },
                                        "key": {
                                            "description": "The key of the file. Must be unique within both the Loader and the JSON Cache.",
                                            "title": "key",
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The absolute or relative URL to load the file from. Or can be a ready formed JSON object, in which case it will be directly processed.",
                                            "title": "url"
                                        },
                                        "xhrSettings": {
                                            "description": "Extra XHR Settings specifically for this file.",
                                            "properties": {
                                                "async": {
                                                    "description": "Should the XHR request use async or not?",
                                                    "title": "async",
                                                    "type": "boolean"
                                                },
                                                "header": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "header",
                                                    "type": "string"
                                                },
                                                "headerValue": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "headerValue",
                                                    "type": "string"
                                                },
                                                "overrideMimeType": {
                                                    "description": "Provide a custom mime-type to use instead of the default.",
                                                    "title": "overrideMimeType",
                                                    "type": "string"
                                                },
                                                "password": {
                                                    "description": "Optional password for the XHR request.",
                                                    "title": "password",
                                                    "type": "string"
                                                },
                                                "requestedWith": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "requestedWith",
                                                    "type": "string"
                                                },
                                                "responseType": {
                                                    "$ref": "#/definitions/XMLHttpRequestResponseType",
                                                    "description": "The response type of the XHR request, i.e. `blob`, `text`, etc.",
                                                    "title": "responseType"
                                                },
                                                "timeout": {
                                                    "description": "Optional XHR timeout value.",
                                                    "title": "timeout",
                                                    "type": "integer"
                                                },
                                                "user": {
                                                    "description": "Optional username for the XHR request.",
                                                    "title": "user",
                                                    "type": "string"
                                                }
                                            },
                                            "title": "xhrSettings",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        false
                                    ],
                                    "type": "boolean"
                                }
                            ],
                            "description": "[description]",
                            "title": "pack"
                        },
                        "physics": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "physics",
                            "type": "object"
                        },
                        "plugins": {
                            "description": "[description]",
                            "title": "plugins"
                        },
                        "status": {
                            "description": "[description]",
                            "title": "status",
                            "type": "number"
                        },
                        "transitionAllowInput": {
                            "description": "[description]",
                            "title": "transitionAllowInput",
                            "type": "boolean"
                        },
                        "transitionDuration": {
                            "description": "[description]",
                            "title": "transitionDuration",
                            "type": "integer"
                        },
                        "transitionFrom": {
                            "$ref": "#/definitions/Phaser.Scene",
                            "description": "[description]",
                            "title": "transitionFrom"
                        },
                        "visible": {
                            "description": "[description]",
                            "title": "visible",
                            "type": "boolean"
                        }
                    },
                    "title": "settings",
                    "type": "object"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "The Scene Systems instance of the Scene that this ScenePlugin belongs to.",
                    "title": "systems"
                },
                "transitionProgress": {
                    "description": "If this Scene is currently transitioning to another, this holds\nthe current percentage of the transition progress, between 0 and 1.",
                    "title": "transitionProgress",
                    "type": "number"
                }
            },
            "title": "Phaser.Scenes.ScenePlugin",
            "type": "object"
        },
        "Phaser.Scenes.Systems": {
            "description": "The Scene Systems class.\n\nThis class is available from within a Scene under the property `sys`.\nIt is responsible for managing all of the plugins a Scene has running, including the display list, and\nhandling the update step and renderer. It also contains references to global systems belonging to Game.",
            "properties": {
                "add": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObjectFactory",
                    "description": "A reference to the Scene's Game Object Factory.\n\nUse this to quickly and easily create new Game Object's.\n\nIn the default set-up you can access this from within a Scene via the `this.add` property.",
                    "title": "add"
                },
                "anims": {
                    "$ref": "#/definitions/Phaser.Animations.AnimationManager",
                    "description": "A reference to the global Animations Manager.\n\nIn the default set-up you can access this from within a Scene via the `this.anims` property.",
                    "title": "anims"
                },
                "cache": {
                    "$ref": "#/definitions/Phaser.Cache.CacheManager",
                    "description": "A reference to the global Cache. The Cache stores all files bought in to Phaser via\nthe Loader, with the exception of images. Images are stored in the Texture Manager.\n\nIn the default set-up you can access this from within a Scene via the `this.cache` property.",
                    "title": "cache"
                },
                "cameras": {
                    "$ref": "#/definitions/Phaser.Cameras.Scene2D.CameraManager",
                    "description": "A reference to the Scene's Camera Manager.\n\nUse this to manipulate and create Cameras for this specific Scene.\n\nIn the default set-up you can access this from within a Scene via the `this.cameras` property.",
                    "title": "cameras"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "A handy reference to the Scene canvas / context.",
                    "title": "canvas"
                },
                "config": {
                    "anyOf": [
                        {
                            "properties": {
                                "active": {
                                    "description": "[description]",
                                    "title": "active",
                                    "type": "boolean"
                                },
                                "cameras": {
                                    "anyOf": [
                                        {
                                            "properties": {
                                                "backgroundColor": {
                                                    "anyOf": [
                                                        {
                                                            "enum": [
                                                                false
                                                            ],
                                                            "type": "boolean"
                                                        },
                                                        {
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "description": "A CSS color string controlling the Camera background color.",
                                                    "title": "backgroundColor"
                                                },
                                                "bounds": {
                                                    "additionalProperties": true,
                                                    "description": "Defines the Camera bounds.",
                                                    "properties": {
                                                    },
                                                    "title": "bounds",
                                                    "type": "object"
                                                },
                                                "bounds.height": {
                                                    "description": "The height of the Camera bounds.",
                                                    "title": "bounds.height",
                                                    "type": "number"
                                                },
                                                "bounds.width": {
                                                    "description": "The width of the Camera bounds.",
                                                    "title": "bounds.width",
                                                    "type": "number"
                                                },
                                                "bounds.x": {
                                                    "description": "The top-left extent of the Camera bounds.",
                                                    "title": "bounds.x",
                                                    "type": "number"
                                                },
                                                "bounds.y": {
                                                    "description": "The top-left extent of the Camera bounds.",
                                                    "title": "bounds.y",
                                                    "type": "number"
                                                },
                                                "height": {
                                                    "description": "The height of the Camera viewport.",
                                                    "title": "height",
                                                    "type": "integer"
                                                },
                                                "name": {
                                                    "description": "The name of the Camera.",
                                                    "title": "name",
                                                    "type": "string"
                                                },
                                                "rotation": {
                                                    "description": "The rotation of the Camera, in radians.",
                                                    "title": "rotation",
                                                    "type": "number"
                                                },
                                                "roundPixels": {
                                                    "description": "Should the Camera round pixels before rendering?",
                                                    "title": "roundPixels",
                                                    "type": "boolean"
                                                },
                                                "scrollX": {
                                                    "description": "The horizontal scroll position of the Camera.",
                                                    "title": "scrollX",
                                                    "type": "number"
                                                },
                                                "scrollY": {
                                                    "description": "The vertical scroll position of the Camera.",
                                                    "title": "scrollY",
                                                    "type": "number"
                                                },
                                                "width": {
                                                    "description": "The width of the Camera viewport.",
                                                    "title": "width",
                                                    "type": "integer"
                                                },
                                                "x": {
                                                    "description": "The horizontal position of the Camera viewport.",
                                                    "title": "x",
                                                    "type": "integer"
                                                },
                                                "y": {
                                                    "description": "The vertical position of the Camera viewport.",
                                                    "title": "y",
                                                    "type": "integer"
                                                },
                                                "zoom": {
                                                    "description": "The default zoom level of the Camera.",
                                                    "title": "zoom",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "items": {
                                                "properties": {
                                                    "backgroundColor": {
                                                        "anyOf": [
                                                            {
                                                                "enum": [
                                                                    false
                                                                ],
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "type": "string"
                                                            }
                                                        ],
                                                        "description": "A CSS color string controlling the Camera background color.",
                                                        "title": "backgroundColor"
                                                    },
                                                    "bounds": {
                                                        "additionalProperties": true,
                                                        "description": "Defines the Camera bounds.",
                                                        "properties": {
                                                        },
                                                        "title": "bounds",
                                                        "type": "object"
                                                    },
                                                    "bounds.height": {
                                                        "description": "The height of the Camera bounds.",
                                                        "title": "bounds.height",
                                                        "type": "number"
                                                    },
                                                    "bounds.width": {
                                                        "description": "The width of the Camera bounds.",
                                                        "title": "bounds.width",
                                                        "type": "number"
                                                    },
                                                    "bounds.x": {
                                                        "description": "The top-left extent of the Camera bounds.",
                                                        "title": "bounds.x",
                                                        "type": "number"
                                                    },
                                                    "bounds.y": {
                                                        "description": "The top-left extent of the Camera bounds.",
                                                        "title": "bounds.y",
                                                        "type": "number"
                                                    },
                                                    "height": {
                                                        "description": "The height of the Camera viewport.",
                                                        "title": "height",
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "description": "The name of the Camera.",
                                                        "title": "name",
                                                        "type": "string"
                                                    },
                                                    "rotation": {
                                                        "description": "The rotation of the Camera, in radians.",
                                                        "title": "rotation",
                                                        "type": "number"
                                                    },
                                                    "roundPixels": {
                                                        "description": "Should the Camera round pixels before rendering?",
                                                        "title": "roundPixels",
                                                        "type": "boolean"
                                                    },
                                                    "scrollX": {
                                                        "description": "The horizontal scroll position of the Camera.",
                                                        "title": "scrollX",
                                                        "type": "number"
                                                    },
                                                    "scrollY": {
                                                        "description": "The vertical scroll position of the Camera.",
                                                        "title": "scrollY",
                                                        "type": "number"
                                                    },
                                                    "width": {
                                                        "description": "The width of the Camera viewport.",
                                                        "title": "width",
                                                        "type": "integer"
                                                    },
                                                    "x": {
                                                        "description": "The horizontal position of the Camera viewport.",
                                                        "title": "x",
                                                        "type": "integer"
                                                    },
                                                    "y": {
                                                        "description": "The vertical position of the Camera viewport.",
                                                        "title": "y",
                                                        "type": "integer"
                                                    },
                                                    "zoom": {
                                                        "description": "The default zoom level of the Camera.",
                                                        "title": "zoom",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    ],
                                    "description": "[description]",
                                    "title": "cameras"
                                },
                                "key": {
                                    "description": "[description]",
                                    "title": "key",
                                    "type": "string"
                                },
                                "loader": {
                                    "additionalProperties": true,
                                    "description": "[description]",
                                    "properties": {
                                    },
                                    "title": "loader",
                                    "type": "object"
                                },
                                "map": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Overwrites the default injection map for a scene.",
                                    "title": "map",
                                    "type": "object"
                                },
                                "mapAdd": {
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Extends the injection map for a scene.",
                                    "title": "mapAdd",
                                    "type": "object"
                                },
                                "pack": {
                                    "anyOf": [
                                        {
                                            "properties": {
                                                "dataKey": {
                                                    "description": "If specified instead of the whole JSON file being parsed, only the section corresponding to this property key will be added. If the property you want to extract is nested, use periods to divide it.",
                                                    "title": "dataKey",
                                                    "type": "string"
                                                },
                                                "extension": {
                                                    "description": "The default file extension to use if no url is provided.",
                                                    "title": "extension",
                                                    "type": "string"
                                                },
                                                "key": {
                                                    "description": "The key of the file. Must be unique within both the Loader and the JSON Cache.",
                                                    "title": "key",
                                                    "type": "string"
                                                },
                                                "url": {
                                                    "description": "The absolute or relative URL to load the file from. Or can be a ready formed JSON object, in which case it will be directly processed.",
                                                    "title": "url"
                                                },
                                                "xhrSettings": {
                                                    "description": "Extra XHR Settings specifically for this file.",
                                                    "properties": {
                                                        "async": {
                                                            "description": "Should the XHR request use async or not?",
                                                            "title": "async",
                                                            "type": "boolean"
                                                        },
                                                        "header": {
                                                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                            "title": "header",
                                                            "type": "string"
                                                        },
                                                        "headerValue": {
                                                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                            "title": "headerValue",
                                                            "type": "string"
                                                        },
                                                        "overrideMimeType": {
                                                            "description": "Provide a custom mime-type to use instead of the default.",
                                                            "title": "overrideMimeType",
                                                            "type": "string"
                                                        },
                                                        "password": {
                                                            "description": "Optional password for the XHR request.",
                                                            "title": "password",
                                                            "type": "string"
                                                        },
                                                        "requestedWith": {
                                                            "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                            "title": "requestedWith",
                                                            "type": "string"
                                                        },
                                                        "responseType": {
                                                            "$ref": "#/definitions/XMLHttpRequestResponseType",
                                                            "description": "The response type of the XHR request, i.e. `blob`, `text`, etc.",
                                                            "title": "responseType"
                                                        },
                                                        "timeout": {
                                                            "description": "Optional XHR timeout value.",
                                                            "title": "timeout",
                                                            "type": "integer"
                                                        },
                                                        "user": {
                                                            "description": "Optional username for the XHR request.",
                                                            "title": "user",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "title": "xhrSettings",
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "enum": [
                                                false
                                            ],
                                            "type": "boolean"
                                        }
                                    ],
                                    "description": "[description]",
                                    "title": "pack"
                                },
                                "physics": {
                                    "additionalProperties": true,
                                    "description": "[description]",
                                    "properties": {
                                    },
                                    "title": "physics",
                                    "type": "object"
                                },
                                "plugins": {
                                    "description": "[description]",
                                    "title": "plugins"
                                },
                                "visible": {
                                    "description": "[description]",
                                    "title": "visible",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The Scene Configuration object, as passed in when creating the Scene.",
                    "title": "config"
                },
                "context": {
                    "$ref": "#/definitions/CanvasRenderingContext2D",
                    "description": "A reference to the Canvas Rendering Context being used by the renderer.",
                    "title": "context"
                },
                "displayList": {
                    "$ref": "#/definitions/Phaser.GameObjects.DisplayList",
                    "description": "A reference to the Scene's Display List.\n\nUse this to organize the children contained in the display list.\n\nIn the default set-up you can access this from within a Scene via the `this.children` property.",
                    "title": "displayList"
                },
                "events": {
                    "$ref": "#/definitions/Phaser.Events.EventEmitter",
                    "description": "A reference to the Scene's Event Manager.\n\nUse this to listen for Scene specific events, such as `pause` and `shutdown`.\n\nIn the default set-up you can access this from within a Scene via the `this.events` property.",
                    "title": "events"
                },
                "facebook": {
                    "description": "The Facebook Instant Games Plugin.",
                    "title": "facebook"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "A reference to the Phaser Game instance.",
                    "title": "game"
                },
                "make": {
                    "$ref": "#/definitions/Phaser.GameObjects.GameObjectCreator",
                    "description": "A reference to the Scene's Game Object Creator.\n\nUse this to quickly and easily create new Game Object's. The difference between this and the\nGame Object Factory, is that the Creator just creates and returns Game Object instances, it\ndoesn't then add them to the Display List or Update List.\n\nIn the default set-up you can access this from within a Scene via the `this.make` property.",
                    "title": "make"
                },
                "plugins": {
                    "$ref": "#/definitions/Phaser.Plugins.PluginManager",
                    "description": "A reference to the global Plugins Manager.\n\nIn the default set-up you can access this from within a Scene via the `this.plugins` property.",
                    "title": "plugins"
                },
                "registry": {
                    "$ref": "#/definitions/Phaser.Data.DataManager",
                    "description": "A reference to the global registry. This is a game-wide instance of the Data Manager, allowing\nyou to exchange data between Scenes via a universal and shared point.\n\nIn the default set-up you can access this from within a Scene via the `this.registry` property.",
                    "title": "registry"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "A reference to the Scene that these Systems belong to.",
                    "title": "scene"
                },
                "scenePlugin": {
                    "$ref": "#/definitions/Phaser.Scenes.ScenePlugin",
                    "description": "A reference to the Scene Manager Plugin.\n\nUse this to manipulate both this and other Scene's in your game, for example to launch a parallel Scene,\nor pause or resume a Scene, or switch from this Scene to another.\n\nIn the default set-up you can access this from within a Scene via the `this.scene` property.",
                    "title": "scenePlugin"
                },
                "settings": {
                    "description": "The Scene Settings. This is the parsed output based on the Scene configuration.",
                    "properties": {
                        "active": {
                            "description": "[description]",
                            "title": "active",
                            "type": "boolean"
                        },
                        "cameras": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "backgroundColor": {
                                            "anyOf": [
                                                {
                                                    "enum": [
                                                        false
                                                    ],
                                                    "type": "boolean"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "description": "A CSS color string controlling the Camera background color.",
                                            "title": "backgroundColor"
                                        },
                                        "bounds": {
                                            "additionalProperties": true,
                                            "description": "Defines the Camera bounds.",
                                            "properties": {
                                            },
                                            "title": "bounds",
                                            "type": "object"
                                        },
                                        "bounds.height": {
                                            "description": "The height of the Camera bounds.",
                                            "title": "bounds.height",
                                            "type": "number"
                                        },
                                        "bounds.width": {
                                            "description": "The width of the Camera bounds.",
                                            "title": "bounds.width",
                                            "type": "number"
                                        },
                                        "bounds.x": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.x",
                                            "type": "number"
                                        },
                                        "bounds.y": {
                                            "description": "The top-left extent of the Camera bounds.",
                                            "title": "bounds.y",
                                            "type": "number"
                                        },
                                        "height": {
                                            "description": "The height of the Camera viewport.",
                                            "title": "height",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of the Camera.",
                                            "title": "name",
                                            "type": "string"
                                        },
                                        "rotation": {
                                            "description": "The rotation of the Camera, in radians.",
                                            "title": "rotation",
                                            "type": "number"
                                        },
                                        "roundPixels": {
                                            "description": "Should the Camera round pixels before rendering?",
                                            "title": "roundPixels",
                                            "type": "boolean"
                                        },
                                        "scrollX": {
                                            "description": "The horizontal scroll position of the Camera.",
                                            "title": "scrollX",
                                            "type": "number"
                                        },
                                        "scrollY": {
                                            "description": "The vertical scroll position of the Camera.",
                                            "title": "scrollY",
                                            "type": "number"
                                        },
                                        "width": {
                                            "description": "The width of the Camera viewport.",
                                            "title": "width",
                                            "type": "integer"
                                        },
                                        "x": {
                                            "description": "The horizontal position of the Camera viewport.",
                                            "title": "x",
                                            "type": "integer"
                                        },
                                        "y": {
                                            "description": "The vertical position of the Camera viewport.",
                                            "title": "y",
                                            "type": "integer"
                                        },
                                        "zoom": {
                                            "description": "The default zoom level of the Camera.",
                                            "title": "zoom",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "items": {
                                        "properties": {
                                            "backgroundColor": {
                                                "anyOf": [
                                                    {
                                                        "enum": [
                                                            false
                                                        ],
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "A CSS color string controlling the Camera background color.",
                                                "title": "backgroundColor"
                                            },
                                            "bounds": {
                                                "additionalProperties": true,
                                                "description": "Defines the Camera bounds.",
                                                "properties": {
                                                },
                                                "title": "bounds",
                                                "type": "object"
                                            },
                                            "bounds.height": {
                                                "description": "The height of the Camera bounds.",
                                                "title": "bounds.height",
                                                "type": "number"
                                            },
                                            "bounds.width": {
                                                "description": "The width of the Camera bounds.",
                                                "title": "bounds.width",
                                                "type": "number"
                                            },
                                            "bounds.x": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.x",
                                                "type": "number"
                                            },
                                            "bounds.y": {
                                                "description": "The top-left extent of the Camera bounds.",
                                                "title": "bounds.y",
                                                "type": "number"
                                            },
                                            "height": {
                                                "description": "The height of the Camera viewport.",
                                                "title": "height",
                                                "type": "integer"
                                            },
                                            "name": {
                                                "description": "The name of the Camera.",
                                                "title": "name",
                                                "type": "string"
                                            },
                                            "rotation": {
                                                "description": "The rotation of the Camera, in radians.",
                                                "title": "rotation",
                                                "type": "number"
                                            },
                                            "roundPixels": {
                                                "description": "Should the Camera round pixels before rendering?",
                                                "title": "roundPixels",
                                                "type": "boolean"
                                            },
                                            "scrollX": {
                                                "description": "The horizontal scroll position of the Camera.",
                                                "title": "scrollX",
                                                "type": "number"
                                            },
                                            "scrollY": {
                                                "description": "The vertical scroll position of the Camera.",
                                                "title": "scrollY",
                                                "type": "number"
                                            },
                                            "width": {
                                                "description": "The width of the Camera viewport.",
                                                "title": "width",
                                                "type": "integer"
                                            },
                                            "x": {
                                                "description": "The horizontal position of the Camera viewport.",
                                                "title": "x",
                                                "type": "integer"
                                            },
                                            "y": {
                                                "description": "The vertical position of the Camera viewport.",
                                                "title": "y",
                                                "type": "integer"
                                            },
                                            "zoom": {
                                                "description": "The default zoom level of the Camera.",
                                                "title": "zoom",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            ],
                            "description": "[description]",
                            "title": "cameras"
                        },
                        "data": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "data",
                            "type": "object"
                        },
                        "isBooted": {
                            "description": "[description]",
                            "title": "isBooted",
                            "type": "boolean"
                        },
                        "isTransition": {
                            "description": "[description]",
                            "title": "isTransition",
                            "type": "boolean"
                        },
                        "key": {
                            "description": "[description]",
                            "title": "key",
                            "type": "string"
                        },
                        "loader": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "loader",
                            "type": "object"
                        },
                        "map": {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "description": "[description]",
                            "title": "map",
                            "type": "object"
                        },
                        "pack": {
                            "anyOf": [
                                {
                                    "properties": {
                                        "dataKey": {
                                            "description": "If specified instead of the whole JSON file being parsed, only the section corresponding to this property key will be added. If the property you want to extract is nested, use periods to divide it.",
                                            "title": "dataKey",
                                            "type": "string"
                                        },
                                        "extension": {
                                            "description": "The default file extension to use if no url is provided.",
                                            "title": "extension",
                                            "type": "string"
                                        },
                                        "key": {
                                            "description": "The key of the file. Must be unique within both the Loader and the JSON Cache.",
                                            "title": "key",
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The absolute or relative URL to load the file from. Or can be a ready formed JSON object, in which case it will be directly processed.",
                                            "title": "url"
                                        },
                                        "xhrSettings": {
                                            "description": "Extra XHR Settings specifically for this file.",
                                            "properties": {
                                                "async": {
                                                    "description": "Should the XHR request use async or not?",
                                                    "title": "async",
                                                    "type": "boolean"
                                                },
                                                "header": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "header",
                                                    "type": "string"
                                                },
                                                "headerValue": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "headerValue",
                                                    "type": "string"
                                                },
                                                "overrideMimeType": {
                                                    "description": "Provide a custom mime-type to use instead of the default.",
                                                    "title": "overrideMimeType",
                                                    "type": "string"
                                                },
                                                "password": {
                                                    "description": "Optional password for the XHR request.",
                                                    "title": "password",
                                                    "type": "string"
                                                },
                                                "requestedWith": {
                                                    "description": "This value is used to populate the XHR `setRequestHeader` and is undefined by default.",
                                                    "title": "requestedWith",
                                                    "type": "string"
                                                },
                                                "responseType": {
                                                    "$ref": "#/definitions/XMLHttpRequestResponseType",
                                                    "description": "The response type of the XHR request, i.e. `blob`, `text`, etc.",
                                                    "title": "responseType"
                                                },
                                                "timeout": {
                                                    "description": "Optional XHR timeout value.",
                                                    "title": "timeout",
                                                    "type": "integer"
                                                },
                                                "user": {
                                                    "description": "Optional username for the XHR request.",
                                                    "title": "user",
                                                    "type": "string"
                                                }
                                            },
                                            "title": "xhrSettings",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "enum": [
                                        false
                                    ],
                                    "type": "boolean"
                                }
                            ],
                            "description": "[description]",
                            "title": "pack"
                        },
                        "physics": {
                            "additionalProperties": true,
                            "description": "[description]",
                            "properties": {
                            },
                            "title": "physics",
                            "type": "object"
                        },
                        "plugins": {
                            "description": "[description]",
                            "title": "plugins"
                        },
                        "status": {
                            "description": "[description]",
                            "title": "status",
                            "type": "number"
                        },
                        "transitionAllowInput": {
                            "description": "[description]",
                            "title": "transitionAllowInput",
                            "type": "boolean"
                        },
                        "transitionDuration": {
                            "description": "[description]",
                            "title": "transitionDuration",
                            "type": "integer"
                        },
                        "transitionFrom": {
                            "$ref": "#/definitions/Phaser.Scene",
                            "description": "[description]",
                            "title": "transitionFrom"
                        },
                        "visible": {
                            "description": "[description]",
                            "title": "visible",
                            "type": "boolean"
                        }
                    },
                    "title": "settings",
                    "type": "object"
                },
                "sound": {
                    "$ref": "#/definitions/Phaser.Sound.BaseSoundManager",
                    "description": "A reference to the global Sound Manager.\n\nIn the default set-up you can access this from within a Scene via the `this.sound` property.",
                    "title": "sound"
                },
                "textures": {
                    "$ref": "#/definitions/Phaser.Textures.TextureManager",
                    "description": "A reference to the global Texture Manager.\n\nIn the default set-up you can access this from within a Scene via the `this.textures` property.",
                    "title": "textures"
                },
                "updateList": {
                    "$ref": "#/definitions/Phaser.GameObjects.UpdateList",
                    "description": "A reference to the Scene's Update List.\n\nUse this to organize the children contained in the update list.\n\nThe Update List is responsible for managing children that need their `preUpdate` methods called,\nin order to process so internal components, such as Sprites with Animations.\n\nIn the default set-up there is no reference to this from within the Scene itself.",
                    "title": "updateList"
                }
            },
            "title": "Phaser.Scenes.Systems",
            "type": "object"
        },
        "Phaser.Sound.BaseSoundManager": {
            "description": "The sound manager is responsible for playing back audio via Web Audio API or HTML Audio tag as fallback.\nThe audio file type and the encoding of those files are extremely important.\n\nNot all browsers can play all audio formats.\n\nThere is a good guide to what's supported [here](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).",
            "properties": {
                "detune": {
                    "description": "Global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\nThe range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).",
                    "title": "detune",
                    "type": "number"
                },
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "Local reference to game.",
                    "title": "game"
                },
                "jsonCache": {
                    "$ref": "#/definitions/Phaser.Cache.BaseCache",
                    "description": "Local reference to the JSON Cache, as used by Audio Sprites.",
                    "title": "jsonCache"
                },
                "locked": {
                    "description": "Mobile devices require sounds to be triggered from an explicit user action,\nsuch as a tap, before any sound can be loaded/played on a web page.\nSet to true if the audio system is currently locked awaiting user interaction.",
                    "title": "locked",
                    "type": "boolean"
                },
                "mute": {
                    "description": "Global mute setting.",
                    "title": "mute",
                    "type": "boolean"
                },
                "pauseOnBlur": {
                    "description": "Flag indicating if sounds should be paused when game looses focus,\nfor instance when user switches to another tab/program/app.",
                    "title": "pauseOnBlur",
                    "type": "boolean"
                },
                "rate": {
                    "description": "Global playback rate at which all the sounds will be played.\nValue of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\nand 2.0 doubles the audio's playback speed.",
                    "title": "rate",
                    "type": "number"
                },
                "volume": {
                    "description": "Global volume setting.",
                    "title": "volume",
                    "type": "number"
                }
            },
            "title": "Phaser.Sound.BaseSoundManager",
            "type": "object"
        },
        "Phaser.Structs.Map<String,any>": {
            "description": "The keys of a Map can be arbitrary values.\n\n```javascript\n         * var map = new Map([\n         *    [ 1, 'one' ],\n         *    [ 2, 'two' ],\n         *    [ 3, 'three' ]\n         * ]);\n         * ```",
            "properties": {
                "entries": {
                    "additionalProperties": {
                        "$ref": "#/definitions/V"
                    },
                    "description": "The entries in this Map.",
                    "title": "entries",
                    "type": "object"
                },
                "size": {
                    "description": "The number of key / value pairs in this Map.",
                    "title": "size",
                    "type": "number"
                }
            },
            "title": "Phaser.Structs.Map<String,any>",
            "type": "object"
        },
        "Phaser.Structs.Map<string,Phaser.Animations.Animation>": {
            "description": "The keys of a Map can be arbitrary values.\n\n```javascript\n         * var map = new Map([\n         *    [ 1, 'one' ],\n         *    [ 2, 'two' ],\n         *    [ 3, 'three' ]\n         * ]);\n         * ```",
            "properties": {
                "entries": {
                    "additionalProperties": {
                        "$ref": "#/definitions/V"
                    },
                    "description": "The entries in this Map.",
                    "title": "entries",
                    "type": "object"
                },
                "size": {
                    "description": "The number of key / value pairs in this Map.",
                    "title": "size",
                    "type": "number"
                }
            },
            "title": "Phaser.Structs.Map<string,Phaser.Animations.Animation>",
            "type": "object"
        },
        "Phaser.Structs.ProcessQueue<Phaser.Physics.Arcade.Collider>": {
            "description": "[description]",
            "title": "Phaser.Structs.ProcessQueue<Phaser.Physics.Arcade.Collider>",
            "type": "object"
        },
        "Phaser.Structs.RTree": {
            "description": "RBush is a high-performance JavaScript library for 2D spatial indexing of points and rectangles.\nIt's based on an optimized R-tree data structure with bulk insertion support.\n\nSpatial index is a special data structure for points and rectangles that allows you to perform queries like\n\"all items within this bounding box\" very efficiently (e.g. hundreds of times faster than looping over all items).\n\nThis version of RBush uses a fixed min/max accessor structure of `[ '.left', '.top', '.right', '.bottom' ]`.\nThis is to avoid the eval like function creation that the original library used, which caused CSP policy violations.",
            "title": "Phaser.Structs.RTree",
            "type": "object"
        },
        "Phaser.Structs.Set<Phaser.Loader.File>": {
            "description": "A Set is a collection of unique elements.",
            "properties": {
                "entries": {
                    "description": "The entries of this Set. Stored internally as an array.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Loader.File"
                    },
                    "title": "entries",
                    "type": "array"
                },
                "size": {
                    "description": "The size of this Set. This is the number of entries within it.\nChanging the size will truncate the Set if the given value is smaller than the current size.\nIncreasing the size larger than the current size has no effect.",
                    "title": "size",
                    "type": "integer"
                }
            },
            "title": "Phaser.Structs.Set<Phaser.Loader.File>",
            "type": "object"
        },
        "Phaser.Structs.Set<Phaser.Physics.Arcade.Body>": {
            "description": "A Set is a collection of unique elements.",
            "properties": {
                "entries": {
                    "description": "The entries of this Set. Stored internally as an array.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Physics.Arcade.Body"
                    },
                    "title": "entries",
                    "type": "array"
                },
                "size": {
                    "description": "The size of this Set. This is the number of entries within it.\nChanging the size will truncate the Set if the given value is smaller than the current size.\nIncreasing the size larger than the current size has no effect.",
                    "title": "size",
                    "type": "integer"
                }
            },
            "title": "Phaser.Structs.Set<Phaser.Physics.Arcade.Body>",
            "type": "object"
        },
        "Phaser.Structs.Set<Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody>": {
            "description": "A Set is a collection of unique elements.",
            "properties": {
                "entries": {
                    "description": "The entries of this Set. Stored internally as an array.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Phaser.Physics.Arcade.Body"
                            },
                            {
                                "$ref": "#/definitions/Phaser.Physics.Arcade.StaticBody"
                            }
                        ]
                    },
                    "title": "entries",
                    "type": "array"
                },
                "size": {
                    "description": "The size of this Set. This is the number of entries within it.\nChanging the size will truncate the Set if the given value is smaller than the current size.\nIncreasing the size larger than the current size has no effect.",
                    "title": "size",
                    "type": "integer"
                }
            },
            "title": "Phaser.Structs.Set<Phaser.Physics.Arcade.Body|Phaser.Physics.Arcade.StaticBody>",
            "type": "object"
        },
        "Phaser.Structs.Set<Phaser.Physics.Arcade.StaticBody>": {
            "description": "A Set is a collection of unique elements.",
            "properties": {
                "entries": {
                    "description": "The entries of this Set. Stored internally as an array.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Physics.Arcade.StaticBody"
                    },
                    "title": "entries",
                    "type": "array"
                },
                "size": {
                    "description": "The size of this Set. This is the number of entries within it.\nChanging the size will truncate the Set if the given value is smaller than the current size.\nIncreasing the size larger than the current size has no effect.",
                    "title": "size",
                    "type": "integer"
                }
            },
            "title": "Phaser.Structs.Set<Phaser.Physics.Arcade.StaticBody>",
            "type": "object"
        },
        "Phaser.Structs.Set<Phaser.Physics.Impact.Body>": {
            "description": "A Set is a collection of unique elements.",
            "properties": {
                "entries": {
                    "description": "The entries of this Set. Stored internally as an array.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Physics.Impact.Body"
                    },
                    "title": "entries",
                    "type": "array"
                },
                "size": {
                    "description": "The size of this Set. This is the number of entries within it.\nChanging the size will truncate the Set if the given value is smaller than the current size.\nIncreasing the size larger than the current size has no effect.",
                    "title": "size",
                    "type": "integer"
                }
            },
            "title": "Phaser.Structs.Set<Phaser.Physics.Impact.Body>",
            "type": "object"
        },
        "Phaser.Textures.CanvasTexture": {
            "description": "A Canvas Texture is a special kind of Texture that is backed by an HTML Canvas Element as its source.\n\nYou can use the properties of this texture to draw to the canvas element directly, using all of the standard\ncanvas operations available in the browser. Any Game Object can be given this texture and will render with it.\n\nNote: When running under WebGL the Canvas Texture needs to re-generate its base WebGLTexture and reupload it to\nthe GPU every time you modify it, otherwise the changes you make to this texture will not be visible. To do this\nyou should call `CanvasTexture.refresh()` once you are finished with your changes to the canvas. Try and keep\nthis to a minimum, especially on large canvas sizes, or you may inadvertently thrash the GPU by constantly uploading\ntexture data to it. This restriction does not apply if using the Canvas Renderer.\n\nIt starts with only one frame that covers the whole of the canvas. You can add further frames, that specify\nsections of the canvas using the `add` method.\n\nShould you need to resize the canvas use the `setSize` method so that it accurately updates all of the underlying\ntexture data as well. Forgetting to do this (i.e. by changing the canvas size directly from your code) could cause\ngraphical errors.",
            "properties": {
                "buffer": {
                    "$ref": "#/definitions/ArrayBuffer",
                    "description": "An ArrayBuffer the same size as the context ImageData.",
                    "title": "buffer"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "description": "The source Canvas Element.",
                    "title": "canvas"
                },
                "context": {
                    "$ref": "#/definitions/CanvasRenderingContext2D",
                    "description": "The 2D Canvas Rendering Context.",
                    "title": "context"
                },
                "customData": {
                    "additionalProperties": true,
                    "description": "Any additional data that was set in the source JSON (if any),\nor any extra data you'd like to store relating to this texture",
                    "properties": {
                    },
                    "title": "customData",
                    "type": "object"
                },
                "data": {
                    "additionalProperties": false,
                    "description": "A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\nIf the requested number of bytes could not be allocated an exception is raised.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "title": "data",
                    "type": "object"
                },
                "dataSource": {
                    "description": "An array of TextureSource data instances.\nUsed to store additional data images, such as normal maps or specular maps.",
                    "items": {
                    },
                    "title": "dataSource",
                    "type": "array"
                },
                "firstFrame": {
                    "description": "The name of the first frame of the Texture.",
                    "title": "firstFrame",
                    "type": "string"
                },
                "frameTotal": {
                    "description": "The total number of Frames in this Texture.",
                    "title": "frameTotal",
                    "type": "integer"
                },
                "frames": {
                    "additionalProperties": true,
                    "description": "A key-value object pair associating the unique Frame keys with the Frames objects.",
                    "properties": {
                    },
                    "title": "frames",
                    "type": "object"
                },
                "height": {
                    "description": "The height of the Canvas.\nThis property is read-only, if you wish to change it use the `setSize` method.",
                    "title": "height",
                    "type": "integer"
                },
                "imageData": {
                    "$ref": "#/definitions/ImageData",
                    "description": "The context image data.\nUse the `update` method to populate this when the canvas changes.",
                    "title": "imageData"
                },
                "key": {
                    "description": "The unique string-based key of this Texture.",
                    "title": "key",
                    "type": "string"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Textures.TextureManager",
                    "description": "A reference to the Texture Manager this Texture belongs to.",
                    "title": "manager"
                },
                "pixels": {
                    "additionalProperties": false,
                    "description": "A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\nrequested number of bytes could not be allocated an exception is raised.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "title": "pixels",
                    "type": "object"
                },
                "source": {
                    "description": "An array of TextureSource instances.\nThese are unique to this Texture and contain the actual Image (or Canvas) data.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Textures.TextureSource"
                    },
                    "title": "source",
                    "type": "array"
                },
                "width": {
                    "description": "The width of the Canvas.\nThis property is read-only, if you wish to change it use the `setSize` method.",
                    "title": "width",
                    "type": "integer"
                }
            },
            "title": "Phaser.Textures.CanvasTexture",
            "type": "object"
        },
        "Phaser.Textures.Frame": {
            "description": "A Frame is a section of a Texture.",
            "properties": {
                "autoRound": {
                    "description": "Over-rides the Renderer setting.\n-1 = use Renderer Setting\n0 = No rounding\n1 = Round",
                    "title": "autoRound",
                    "type": "integer"
                },
                "canvasData": {
                    "additionalProperties": true,
                    "description": "The Canvas drawImage data object.",
                    "properties": {
                    },
                    "title": "canvasData",
                    "type": "object"
                },
                "centerX": {
                    "description": "The x center of this frame, floored.",
                    "title": "centerX",
                    "type": "integer"
                },
                "centerY": {
                    "description": "The y center of this frame, floored.",
                    "title": "centerY",
                    "type": "integer"
                },
                "customData": {
                    "additionalProperties": true,
                    "description": "Any Frame specific custom data can be stored here.",
                    "properties": {
                    },
                    "title": "customData",
                    "type": "object"
                },
                "customPivot": {
                    "description": "Does this Frame have a custom pivot point?",
                    "title": "customPivot",
                    "type": "boolean"
                },
                "cutHeight": {
                    "description": "The height of the area in the source image to cut.",
                    "title": "cutHeight",
                    "type": "integer"
                },
                "cutWidth": {
                    "description": "The width of the area in the source image to cut.",
                    "title": "cutWidth",
                    "type": "integer"
                },
                "cutX": {
                    "description": "X position within the source image to cut from.",
                    "title": "cutX",
                    "type": "integer"
                },
                "cutY": {
                    "description": "Y position within the source image to cut from.",
                    "title": "cutY",
                    "type": "integer"
                },
                "glTexture": {
                    "$ref": "#/definitions/WebGLTexture",
                    "description": "A reference to the Texture Source WebGL Texture that this Frame is using.",
                    "title": "glTexture"
                },
                "halfHeight": {
                    "description": "Half the height, floored.\nPrecalculated for the renderer.",
                    "title": "halfHeight",
                    "type": "integer"
                },
                "halfWidth": {
                    "description": "Half the width, floored.\nPrecalculated for the renderer.",
                    "title": "halfWidth",
                    "type": "integer"
                },
                "height": {
                    "description": "The rendering height of this Frame, taking trim into account.",
                    "title": "height",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of this Frame.\nThe name is unique within the Texture.",
                    "title": "name",
                    "type": "string"
                },
                "pivotX": {
                    "description": "The horizontal pivot point of this Frame.",
                    "title": "pivotX",
                    "type": "number"
                },
                "pivotY": {
                    "description": "The vertical pivot point of this Frame.",
                    "title": "pivotY",
                    "type": "number"
                },
                "radius": {
                    "description": "The radius of the Frame (derived from sqrt(w * w + h * h) / 2)",
                    "title": "radius",
                    "type": "number"
                },
                "realHeight": {
                    "description": "The height of the Frame in its un-trimmed, un-padded state, as prepared in the art package,\nbefore being packed.",
                    "title": "realHeight",
                    "type": "number"
                },
                "realWidth": {
                    "description": "The width of the Frame in its un-trimmed, un-padded state, as prepared in the art package,\nbefore being packed.",
                    "title": "realWidth",
                    "type": "number"
                },
                "rotated": {
                    "description": "**CURRENTLY UNSUPPORTED**\n\nIs this frame is rotated or not in the Texture?\nRotation allows you to use rotated frames in texture atlas packing.\nIt has nothing to do with Sprite rotation.",
                    "title": "rotated",
                    "type": "boolean"
                },
                "source": {
                    "$ref": "#/definitions/Phaser.Textures.TextureSource",
                    "description": "The TextureSource this Frame is part of.",
                    "title": "source"
                },
                "sourceIndex": {
                    "description": "The index of the TextureSource in the Texture sources array.",
                    "title": "sourceIndex",
                    "type": "integer"
                },
                "texture": {
                    "$ref": "#/definitions/Phaser.Textures.Texture",
                    "description": "The Texture this Frame is a part of.",
                    "title": "texture"
                },
                "trimmed": {
                    "description": "Is the Frame trimmed or not?",
                    "title": "trimmed",
                    "type": "boolean"
                },
                "u0": {
                    "description": "WebGL UV u0 value.",
                    "title": "u0",
                    "type": "number"
                },
                "u1": {
                    "description": "WebGL UV u1 value.",
                    "title": "u1",
                    "type": "number"
                },
                "v0": {
                    "description": "WebGL UV v0 value.",
                    "title": "v0",
                    "type": "number"
                },
                "v1": {
                    "description": "WebGL UV v1 value.",
                    "title": "v1",
                    "type": "number"
                },
                "width": {
                    "description": "The rendering width of this Frame, taking trim into account.",
                    "title": "width",
                    "type": "integer"
                },
                "x": {
                    "description": "The X rendering offset of this Frame, taking trim into account.",
                    "title": "x",
                    "type": "integer"
                },
                "y": {
                    "description": "The Y rendering offset of this Frame, taking trim into account.",
                    "title": "y",
                    "type": "integer"
                }
            },
            "title": "Phaser.Textures.Frame",
            "type": "object"
        },
        "Phaser.Textures.Texture": {
            "description": "A Texture consists of a source, usually an Image from the Cache, and a collection of Frames.\nThe Frames represent the different areas of the Texture. For example a texture atlas\nmay have many Frames, one for each element within the atlas. Where-as a single image would have\njust one frame, that encompasses the whole image.\n\nTextures are managed by the global TextureManager. This is a singleton class that is\nresponsible for creating and delivering Textures and their corresponding Frames to Game Objects.\n\nSprites and other Game Objects get the texture data they need from the TextureManager.",
            "properties": {
                "customData": {
                    "additionalProperties": true,
                    "description": "Any additional data that was set in the source JSON (if any),\nor any extra data you'd like to store relating to this texture",
                    "properties": {
                    },
                    "title": "customData",
                    "type": "object"
                },
                "dataSource": {
                    "description": "An array of TextureSource data instances.\nUsed to store additional data images, such as normal maps or specular maps.",
                    "items": {
                    },
                    "title": "dataSource",
                    "type": "array"
                },
                "firstFrame": {
                    "description": "The name of the first frame of the Texture.",
                    "title": "firstFrame",
                    "type": "string"
                },
                "frameTotal": {
                    "description": "The total number of Frames in this Texture.",
                    "title": "frameTotal",
                    "type": "integer"
                },
                "frames": {
                    "additionalProperties": true,
                    "description": "A key-value object pair associating the unique Frame keys with the Frames objects.",
                    "properties": {
                    },
                    "title": "frames",
                    "type": "object"
                },
                "key": {
                    "description": "The unique string-based key of this Texture.",
                    "title": "key",
                    "type": "string"
                },
                "manager": {
                    "$ref": "#/definitions/Phaser.Textures.TextureManager",
                    "description": "A reference to the Texture Manager this Texture belongs to.",
                    "title": "manager"
                },
                "source": {
                    "description": "An array of TextureSource instances.\nThese are unique to this Texture and contain the actual Image (or Canvas) data.",
                    "items": {
                        "$ref": "#/definitions/Phaser.Textures.TextureSource"
                    },
                    "title": "source",
                    "type": "array"
                }
            },
            "title": "Phaser.Textures.Texture",
            "type": "object"
        },
        "Phaser.Textures.TextureManager": {
            "description": "Textures are managed by the global TextureManager. This is a singleton class that is\nresponsible for creating and delivering Textures and their corresponding Frames to Game Objects.\n\nSprites and other Game Objects get the texture data they need from the TextureManager.\n\nAccess it via `scene.textures`.",
            "properties": {
                "game": {
                    "$ref": "#/definitions/Phaser.Game",
                    "description": "The Game that this TextureManager belongs to.",
                    "title": "game"
                },
                "list": {
                    "additionalProperties": true,
                    "description": "An object that has all of textures that Texture Manager creates.\nTextures are assigned to keys so we can access to any texture that this object has directly by key value without iteration.",
                    "properties": {
                    },
                    "title": "list",
                    "type": "object"
                },
                "name": {
                    "description": "The name of this manager.",
                    "title": "name",
                    "type": "string"
                }
            },
            "title": "Phaser.Textures.TextureManager",
            "type": "object"
        },
        "Phaser.Textures.TextureSource": {
            "description": "A Texture Source is the encapsulation of the actual source data for a Texture.\nThis is typically an Image Element, loaded from the file system or network, or a Canvas Element.\n\nA Texture can contain multiple Texture Sources, which only happens when a multi-atlas is loaded.",
            "properties": {
                "compressionAlgorithm": {
                    "description": "Currently un-used.",
                    "title": "compressionAlgorithm",
                    "type": "integer"
                },
                "glTexture": {
                    "$ref": "#/definitions/WebGLTexture",
                    "description": "The WebGL Texture of the source image.",
                    "title": "glTexture"
                },
                "height": {
                    "description": "The height of the source image. If not specified in the constructor it will check\nthe `naturalHeight` and then `height` properties of the source image.",
                    "title": "height",
                    "type": "integer"
                },
                "image": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/HTMLCanvasElement"
                        },
                        {
                            "$ref": "#/definitions/HTMLImageElement"
                        }
                    ],
                    "description": "The image data.\nThis is either an Image element or a Canvas element.",
                    "title": "image"
                },
                "isCanvas": {
                    "description": "Is the source image a Canvas Element?",
                    "title": "isCanvas",
                    "type": "boolean"
                },
                "isPowerOf2": {
                    "description": "Are the source image dimensions a power of two?",
                    "title": "isPowerOf2",
                    "type": "boolean"
                },
                "isRenderTexture": {
                    "description": "Is the source image a Render Texture?",
                    "title": "isRenderTexture",
                    "type": "boolean"
                },
                "renderer": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Phaser.Renderer.Canvas.CanvasRenderer"
                        },
                        {
                            "$ref": "#/definitions/Phaser.Renderer.WebGL.WebGLRenderer"
                        }
                    ],
                    "description": "The Texture this TextureSource belongs to.",
                    "title": "renderer"
                },
                "resolution": {
                    "description": "The resolution of the source image.",
                    "title": "resolution",
                    "type": "number"
                },
                "scaleMode": {
                    "description": "The Scale Mode the image will use when rendering.\nEither Linear or Nearest.",
                    "title": "scaleMode",
                    "type": "number"
                },
                "source": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/HTMLCanvasElement"
                        },
                        {
                            "$ref": "#/definitions/HTMLImageElement"
                        },
                        {
                            "$ref": "#/definitions/Phaser.GameObjects.RenderTexture"
                        }
                    ],
                    "description": "The source of the image data.\nThis is either an Image Element, a Canvas Element or a RenderTexture.",
                    "title": "source"
                },
                "texture": {
                    "$ref": "#/definitions/Phaser.Textures.Texture",
                    "description": "The Texture this TextureSource belongs to.",
                    "title": "texture"
                },
                "width": {
                    "description": "The width of the source image. If not specified in the constructor it will check\nthe `naturalWidth` and then `width` properties of the source image.",
                    "title": "width",
                    "type": "integer"
                }
            },
            "title": "Phaser.Textures.TextureSource",
            "type": "object"
        },
        "Phaser.Time.Clock": {
            "description": "[description]",
            "properties": {
                "now": {
                    "description": "[description]",
                    "title": "now",
                    "type": "number"
                },
                "paused": {
                    "description": "[description]",
                    "title": "paused",
                    "type": "boolean"
                },
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "[description]",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "[description]",
                    "title": "systems"
                },
                "timeScale": {
                    "description": "[description]",
                    "title": "timeScale",
                    "type": "number"
                }
            },
            "title": "Phaser.Time.Clock",
            "type": "object"
        },
        "Phaser.Tweens.TweenManager": {
            "description": "[description]",
            "properties": {
                "scene": {
                    "$ref": "#/definitions/Phaser.Scene",
                    "description": "[description]",
                    "title": "scene"
                },
                "systems": {
                    "$ref": "#/definitions/Phaser.Scenes.Systems",
                    "description": "[description]",
                    "title": "systems"
                },
                "timeScale": {
                    "description": "[description]",
                    "title": "timeScale",
                    "type": "number"
                }
            },
            "title": "Phaser.Tweens.TweenManager",
            "type": "object"
        },
        "Promise<ServiceWorkerRegistration>": {
            "description": "Represents the completion of an asynchronous operation",
            "properties": {
                "__@toStringTag": {
                    "title": "__@toStringTag",
                    "type": "string"
                }
            },
            "title": "Promise<ServiceWorkerRegistration>",
            "type": "object"
        },
        "SVGAnimatedLength": {
            "properties": {
                "animVal": {
                    "$ref": "#/definitions/SVGLength",
                    "title": "animVal"
                },
                "baseVal": {
                    "$ref": "#/definitions/SVGLength",
                    "title": "baseVal"
                }
            },
            "title": "SVGAnimatedLength",
            "type": "object"
        },
        "SVGAnimatedPreserveAspectRatio": {
            "properties": {
                "animVal": {
                    "$ref": "#/definitions/SVGPreserveAspectRatio",
                    "title": "animVal"
                },
                "baseVal": {
                    "$ref": "#/definitions/SVGPreserveAspectRatio",
                    "title": "baseVal"
                }
            },
            "title": "SVGAnimatedPreserveAspectRatio",
            "type": "object"
        },
        "SVGAnimatedRect": {
            "properties": {
                "animVal": {
                    "$ref": "#/definitions/DOMRectReadOnly",
                    "title": "animVal"
                },
                "baseVal": {
                    "$ref": "#/definitions/DOMRect",
                    "title": "baseVal"
                }
            },
            "title": "SVGAnimatedRect",
            "type": "object"
        },
        "SVGAnimatedString": {
            "properties": {
                "animVal": {
                    "title": "animVal",
                    "type": "string"
                },
                "baseVal": {
                    "title": "baseVal",
                    "type": "string"
                }
            },
            "title": "SVGAnimatedString",
            "type": "object"
        },
        "SVGAnimatedTransformList": {
            "properties": {
                "animVal": {
                    "$ref": "#/definitions/SVGTransformList",
                    "title": "animVal"
                },
                "baseVal": {
                    "$ref": "#/definitions/SVGTransformList",
                    "title": "baseVal"
                }
            },
            "title": "SVGAnimatedTransformList",
            "type": "object"
        },
        "SVGElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "correspondingElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "correspondingElement"
                },
                "correspondingUseElement": {
                    "$ref": "#/definitions/SVGUseElement",
                    "title": "correspondingUseElement"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "ownerSVGElement": {
                    "$ref": "#/definitions/SVGSVGElement",
                    "title": "ownerSVGElement"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "viewportElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "viewportElement"
                }
            },
            "title": "SVGElement",
            "type": "object"
        },
        "SVGElementInstance": {
            "properties": {
                "correspondingElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "correspondingElement"
                },
                "correspondingUseElement": {
                    "$ref": "#/definitions/SVGUseElement",
                    "title": "correspondingUseElement"
                }
            },
            "title": "SVGElementInstance",
            "type": "object"
        },
        "SVGLength": {
            "properties": {
                "SVG_LENGTHTYPE_CM": {
                    "title": "SVG_LENGTHTYPE_CM",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_EMS": {
                    "title": "SVG_LENGTHTYPE_EMS",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_EXS": {
                    "title": "SVG_LENGTHTYPE_EXS",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_IN": {
                    "title": "SVG_LENGTHTYPE_IN",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_MM": {
                    "title": "SVG_LENGTHTYPE_MM",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_NUMBER": {
                    "title": "SVG_LENGTHTYPE_NUMBER",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_PC": {
                    "title": "SVG_LENGTHTYPE_PC",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_PERCENTAGE": {
                    "title": "SVG_LENGTHTYPE_PERCENTAGE",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_PT": {
                    "title": "SVG_LENGTHTYPE_PT",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_PX": {
                    "title": "SVG_LENGTHTYPE_PX",
                    "type": "number"
                },
                "SVG_LENGTHTYPE_UNKNOWN": {
                    "title": "SVG_LENGTHTYPE_UNKNOWN",
                    "type": "number"
                },
                "unitType": {
                    "title": "unitType",
                    "type": "number"
                },
                "value": {
                    "title": "value",
                    "type": "number"
                },
                "valueAsString": {
                    "title": "valueAsString",
                    "type": "string"
                },
                "valueInSpecifiedUnits": {
                    "title": "valueInSpecifiedUnits",
                    "type": "number"
                }
            },
            "title": "SVGLength",
            "type": "object"
        },
        "SVGPreserveAspectRatio": {
            "properties": {
                "SVG_MEETORSLICE_MEET": {
                    "title": "SVG_MEETORSLICE_MEET",
                    "type": "number"
                },
                "SVG_MEETORSLICE_SLICE": {
                    "title": "SVG_MEETORSLICE_SLICE",
                    "type": "number"
                },
                "SVG_MEETORSLICE_UNKNOWN": {
                    "title": "SVG_MEETORSLICE_UNKNOWN",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_NONE": {
                    "title": "SVG_PRESERVEASPECTRATIO_NONE",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_UNKNOWN": {
                    "title": "SVG_PRESERVEASPECTRATIO_UNKNOWN",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMAXYMAX": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMAXYMAX",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMAXYMID": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMAXYMID",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMAXYMIN": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMAXYMIN",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMIDYMAX": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMIDYMAX",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMIDYMID": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMIDYMID",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMIDYMIN": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMIDYMIN",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMINYMAX": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMINYMAX",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMINYMID": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMINYMID",
                    "type": "number"
                },
                "SVG_PRESERVEASPECTRATIO_XMINYMIN": {
                    "title": "SVG_PRESERVEASPECTRATIO_XMINYMIN",
                    "type": "number"
                },
                "align": {
                    "title": "align",
                    "type": "number"
                },
                "meetOrSlice": {
                    "title": "meetOrSlice",
                    "type": "number"
                }
            },
            "title": "SVGPreserveAspectRatio",
            "type": "object"
        },
        "SVGSVGElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "contentScriptType": {
                    "title": "contentScriptType",
                    "type": "string"
                },
                "contentStyleType": {
                    "title": "contentStyleType",
                    "type": "string"
                },
                "correspondingElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "correspondingElement"
                },
                "correspondingUseElement": {
                    "$ref": "#/definitions/SVGUseElement",
                    "title": "correspondingUseElement"
                },
                "currentScale": {
                    "title": "currentScale",
                    "type": "number"
                },
                "currentTranslate": {
                    "$ref": "#/definitions/DOMPoint",
                    "title": "currentTranslate"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "height": {
                    "$ref": "#/definitions/SVGAnimatedLength",
                    "title": "height"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onunload": {
                    "title": "onunload",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "onzoom": {
                    "title": "onzoom",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "ownerSVGElement": {
                    "$ref": "#/definitions/SVGSVGElement",
                    "title": "ownerSVGElement"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "pixelUnitToMillimeterX": {
                    "title": "pixelUnitToMillimeterX",
                    "type": "number"
                },
                "pixelUnitToMillimeterY": {
                    "title": "pixelUnitToMillimeterY",
                    "type": "number"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "preserveAspectRatio": {
                    "$ref": "#/definitions/SVGAnimatedPreserveAspectRatio",
                    "title": "preserveAspectRatio"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "requiredExtensions": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "requiredExtensions",
                    "type": "object"
                },
                "screenPixelToMillimeterX": {
                    "title": "screenPixelToMillimeterX",
                    "type": "number"
                },
                "screenPixelToMillimeterY": {
                    "title": "screenPixelToMillimeterY",
                    "type": "number"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "systemLanguage": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "systemLanguage",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "transform": {
                    "$ref": "#/definitions/SVGAnimatedTransformList",
                    "title": "transform"
                },
                "viewBox": {
                    "$ref": "#/definitions/SVGAnimatedRect",
                    "title": "viewBox"
                },
                "viewport": {
                    "$ref": "#/definitions/DOMRect",
                    "title": "viewport"
                },
                "viewportElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "viewportElement"
                },
                "width": {
                    "$ref": "#/definitions/SVGAnimatedLength",
                    "title": "width"
                },
                "x": {
                    "$ref": "#/definitions/SVGAnimatedLength",
                    "title": "x"
                },
                "y": {
                    "$ref": "#/definitions/SVGAnimatedLength",
                    "title": "y"
                },
                "zoomAndPan": {
                    "title": "zoomAndPan",
                    "type": "number"
                }
            },
            "title": "SVGSVGElement",
            "type": "object"
        },
        "SVGScriptElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "correspondingElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "correspondingElement"
                },
                "correspondingUseElement": {
                    "$ref": "#/definitions/SVGUseElement",
                    "title": "correspondingUseElement"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "href": {
                    "$ref": "#/definitions/SVGAnimatedString",
                    "title": "href"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "ownerSVGElement": {
                    "$ref": "#/definitions/SVGSVGElement",
                    "title": "ownerSVGElement"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                },
                "viewportElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "viewportElement"
                }
            },
            "title": "SVGScriptElement",
            "type": "object"
        },
        "SVGTransformList": {
            "properties": {
                "numberOfItems": {
                    "title": "numberOfItems",
                    "type": "number"
                }
            },
            "title": "SVGTransformList",
            "type": "object"
        },
        "SVGUseElement": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "animatedInstanceRoot": {
                    "$ref": "#/definitions/SVGElementInstance",
                    "title": "animatedInstanceRoot"
                },
                "assignedSlot": {
                    "$ref": "#/definitions/HTMLSlotElement",
                    "title": "assignedSlot"
                },
                "attributes": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Attr"
                        }
                    },
                    "title": "attributes",
                    "type": "object"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "classList": {
                    "additionalProperties": false,
                    "description": "Allows for manipulation of element's class content attribute as a\nset of whitespace-separated tokens through a DOMTokenList object.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "classList",
                    "type": "object"
                },
                "className": {
                    "description": "Returns the value of element's class content attribute. Can be set\nto change it.",
                    "title": "className"
                },
                "clientHeight": {
                    "title": "clientHeight",
                    "type": "number"
                },
                "clientLeft": {
                    "title": "clientLeft",
                    "type": "number"
                },
                "clientTop": {
                    "title": "clientTop",
                    "type": "number"
                },
                "clientWidth": {
                    "title": "clientWidth",
                    "type": "number"
                },
                "correspondingElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "correspondingElement"
                },
                "correspondingUseElement": {
                    "$ref": "#/definitions/SVGUseElement",
                    "title": "correspondingUseElement"
                },
                "dataset": {
                    "$ref": "#/definitions/DOMStringMap",
                    "title": "dataset"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "height": {
                    "$ref": "#/definitions/SVGAnimatedLength",
                    "title": "height"
                },
                "href": {
                    "$ref": "#/definitions/SVGAnimatedString",
                    "title": "href"
                },
                "id": {
                    "description": "Returns the value of element's id content attribute. Can be set to\nchange it.",
                    "title": "id",
                    "type": "string"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "instanceRoot": {
                    "$ref": "#/definitions/SVGElementInstance",
                    "title": "instanceRoot"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "localName": {
                    "description": "Returns the local name.",
                    "title": "localName",
                    "type": "string"
                },
                "namespaceURI": {
                    "description": "Returns the namespace.",
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first following sibling that\nis an element, and null otherwise.",
                    "title": "nextElementSibling"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "nonce": {
                    "title": "nonce",
                    "type": "string"
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncopy": {
                    "title": "oncopy",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "oncut": {
                    "title": "oncut",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "onfullscreenchange": {
                    "title": "onfullscreenchange",
                    "type": "object"
                },
                "onfullscreenerror": {
                    "title": "onfullscreenerror",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onpaste": {
                    "title": "onpaste",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "outerHTML": {
                    "title": "outerHTML",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "ownerSVGElement": {
                    "$ref": "#/definitions/SVGSVGElement",
                    "title": "ownerSVGElement"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "prefix": {
                    "description": "Returns the namespace prefix.",
                    "title": "prefix",
                    "type": "string"
                },
                "previousElementSibling": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first preceding sibling that\nis an element, and null otherwise.",
                    "title": "previousElementSibling"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "requiredExtensions": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "requiredExtensions",
                    "type": "object"
                },
                "scrollHeight": {
                    "title": "scrollHeight",
                    "type": "number"
                },
                "scrollLeft": {
                    "title": "scrollLeft",
                    "type": "number"
                },
                "scrollTop": {
                    "title": "scrollTop",
                    "type": "number"
                },
                "scrollWidth": {
                    "title": "scrollWidth",
                    "type": "number"
                },
                "shadowRoot": {
                    "$ref": "#/definitions/ShadowRoot",
                    "description": "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
                    "title": "shadowRoot"
                },
                "slot": {
                    "description": "Returns the value of element's slot content attribute. Can be set to\nchange it.",
                    "title": "slot",
                    "type": "string"
                },
                "style": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "style",
                    "type": "object"
                },
                "systemLanguage": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "systemLanguage",
                    "type": "object"
                },
                "tabIndex": {
                    "title": "tabIndex",
                    "type": "number"
                },
                "tagName": {
                    "description": "Returns the HTML-uppercased qualified name.",
                    "title": "tagName",
                    "type": "string"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                },
                "transform": {
                    "$ref": "#/definitions/SVGAnimatedTransformList",
                    "title": "transform"
                },
                "viewportElement": {
                    "$ref": "#/definitions/SVGElement",
                    "title": "viewportElement"
                },
                "width": {
                    "$ref": "#/definitions/SVGAnimatedLength",
                    "title": "width"
                },
                "x": {
                    "$ref": "#/definitions/SVGAnimatedLength",
                    "title": "x"
                },
                "y": {
                    "$ref": "#/definitions/SVGAnimatedLength",
                    "title": "y"
                }
            },
            "title": "SVGUseElement",
            "type": "object"
        },
        "ScalingModel": {
            "properties": {
                "expandToParent": {
                    "default": true,
                    "title": "expandToParent",
                    "type": "boolean"
                },
                "maxHeight": {
                    "title": "maxHeight",
                    "type": "number"
                },
                "maxWidth": {
                    "title": "maxWidth",
                    "type": "number"
                },
                "resizeToParent": {
                    "default": true,
                    "title": "resizeToParent",
                    "type": "boolean"
                },
                "shouldForceLandscaprOnMobile": {
                    "default": true,
                    "title": "shouldForceLandscaprOnMobile",
                    "type": "boolean"
                },
                "shouldForceOrientationOnMobile": {
                    "default": true,
                    "title": "shouldForceOrientationOnMobile",
                    "type": "boolean"
                }
            },
            "title": "ScalingModel",
            "type": "object"
        },
        "Scorm": {
            "description": "the main pipwerks code, mostly converted to typescript.  hopefully\nany usefuly code this class can supply us with is now avalible via HyperScorm,\nso direct access to this class should not be required. (I'm also not gonna export this.)",
            "properties": {
                "apiHandle": {
                    "default": null,
                    "title": "apiHandle"
                },
                "completionStatus": {
                    "title": "completionStatus"
                },
                "exitStatus": {
                    "title": "exitStatus"
                },
                "handleCompletionStatus": {
                    "default": true,
                    "title": "handleCompletionStatus",
                    "type": "boolean"
                },
                "handleExitMode": {
                    "default": true,
                    "title": "handleExitMode",
                    "type": "boolean"
                },
                "isAPIFound": {
                    "default": false,
                    "title": "isAPIFound",
                    "type": "boolean"
                },
                "isActive": {
                    "default": false,
                    "title": "isActive",
                    "type": "boolean"
                },
                "isDebugActive": {
                    "default": true,
                    "title": "isDebugActive",
                    "type": "boolean"
                },
                "version": {
                    "default": "none",
                    "title": "version",
                    "type": "string"
                }
            },
            "title": "Scorm",
            "type": "object"
        },
        "ScormVersion": {
            "description": "Scorm version type",
            "enum": [
                "1.2",
                "2004",
                "none"
            ],
            "title": "ScormVersion",
            "type": "string"
        },
        "Screen": {
            "properties": {
                "availHeight": {
                    "title": "availHeight",
                    "type": "number"
                },
                "availWidth": {
                    "title": "availWidth",
                    "type": "number"
                },
                "colorDepth": {
                    "title": "colorDepth",
                    "type": "number"
                },
                "height": {
                    "title": "height",
                    "type": "number"
                },
                "orientation": {
                    "$ref": "#/definitions/ScreenOrientation",
                    "title": "orientation"
                },
                "pixelDepth": {
                    "title": "pixelDepth",
                    "type": "number"
                },
                "width": {
                    "title": "width",
                    "type": "number"
                }
            },
            "title": "Screen",
            "type": "object"
        },
        "ScreenOrientation": {
            "properties": {
                "angle": {
                    "title": "angle",
                    "type": "number"
                },
                "onchange": {
                    "title": "onchange",
                    "type": "object"
                },
                "type": {
                    "$ref": "#/definitions/OrientationType",
                    "title": "type"
                }
            },
            "title": "ScreenOrientation",
            "type": "object"
        },
        "ScrollRestoration": {
            "enum": [
                "auto",
                "manual"
            ],
            "title": "ScrollRestoration",
            "type": "string"
        },
        "ServiceWorker": {
            "properties": {
                "onerror": {
                    "title": "onerror",
                    "type": "object"
                },
                "onstatechange": {
                    "title": "onstatechange",
                    "type": "object"
                },
                "scriptURL": {
                    "title": "scriptURL",
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/ServiceWorkerState",
                    "title": "state"
                }
            },
            "title": "ServiceWorker",
            "type": "object"
        },
        "ServiceWorkerContainer": {
            "properties": {
                "controller": {
                    "$ref": "#/definitions/ServiceWorker",
                    "title": "controller"
                },
                "oncontrollerchange": {
                    "title": "oncontrollerchange",
                    "type": "object"
                },
                "onmessage": {
                    "title": "onmessage",
                    "type": "object"
                },
                "onmessageerror": {
                    "title": "onmessageerror",
                    "type": "object"
                },
                "ready": {
                    "$ref": "#/definitions/Promise<ServiceWorkerRegistration>",
                    "title": "ready"
                }
            },
            "title": "ServiceWorkerContainer",
            "type": "object"
        },
        "ServiceWorkerState": {
            "enum": [
                "activated",
                "activating",
                "installed",
                "installing",
                "redundant"
            ],
            "title": "ServiceWorkerState",
            "type": "string"
        },
        "ShadowRoot": {
            "properties": {
                "ATTRIBUTE_NODE": {
                    "title": "ATTRIBUTE_NODE",
                    "type": "number"
                },
                "CDATA_SECTION_NODE": {
                    "title": "CDATA_SECTION_NODE",
                    "type": "number"
                },
                "COMMENT_NODE": {
                    "title": "COMMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_FRAGMENT_NODE": {
                    "title": "DOCUMENT_FRAGMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_NODE": {
                    "title": "DOCUMENT_NODE",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINED_BY": {
                    "title": "DOCUMENT_POSITION_CONTAINED_BY",
                    "type": "number"
                },
                "DOCUMENT_POSITION_CONTAINS": {
                    "title": "DOCUMENT_POSITION_CONTAINS",
                    "type": "number"
                },
                "DOCUMENT_POSITION_DISCONNECTED": {
                    "title": "DOCUMENT_POSITION_DISCONNECTED",
                    "type": "number"
                },
                "DOCUMENT_POSITION_FOLLOWING": {
                    "title": "DOCUMENT_POSITION_FOLLOWING",
                    "type": "number"
                },
                "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {
                    "title": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
                    "type": "number"
                },
                "DOCUMENT_POSITION_PRECEDING": {
                    "title": "DOCUMENT_POSITION_PRECEDING",
                    "type": "number"
                },
                "DOCUMENT_TYPE_NODE": {
                    "title": "DOCUMENT_TYPE_NODE",
                    "type": "number"
                },
                "ELEMENT_NODE": {
                    "title": "ELEMENT_NODE",
                    "type": "number"
                },
                "ENTITY_NODE": {
                    "title": "ENTITY_NODE",
                    "type": "number"
                },
                "ENTITY_REFERENCE_NODE": {
                    "title": "ENTITY_REFERENCE_NODE",
                    "type": "number"
                },
                "NOTATION_NODE": {
                    "title": "NOTATION_NODE",
                    "type": "number"
                },
                "PROCESSING_INSTRUCTION_NODE": {
                    "title": "PROCESSING_INSTRUCTION_NODE",
                    "type": "number"
                },
                "TEXT_NODE": {
                    "title": "TEXT_NODE",
                    "type": "number"
                },
                "activeElement": {
                    "$ref": "#/definitions/Element",
                    "title": "activeElement"
                },
                "baseURI": {
                    "description": "Returns node's node document's document base URL.",
                    "title": "baseURI",
                    "type": "string"
                },
                "childElementCount": {
                    "title": "childElementCount",
                    "type": "number"
                },
                "childNodes": {
                    "description": "Returns the children.",
                    "items": {
                        "$ref": "#/definitions/ChildNode"
                    },
                    "title": "childNodes",
                    "type": "array"
                },
                "children": {
                    "additionalProperties": false,
                    "description": "Returns the child elements.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Element"
                        }
                    },
                    "title": "children",
                    "type": "object"
                },
                "firstChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the first child.",
                    "title": "firstChild"
                },
                "firstElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the first child that is an element, and null otherwise.",
                    "title": "firstElementChild"
                },
                "host": {
                    "$ref": "#/definitions/Element",
                    "title": "host"
                },
                "innerHTML": {
                    "title": "innerHTML",
                    "type": "string"
                },
                "isConnected": {
                    "description": "Returns true if node is connected and false otherwise.",
                    "title": "isConnected",
                    "type": "boolean"
                },
                "lastChild": {
                    "$ref": "#/definitions/ChildNode",
                    "description": "Returns the last child.",
                    "title": "lastChild"
                },
                "lastElementChild": {
                    "$ref": "#/definitions/Element",
                    "description": "Returns the last child that is an element, and null otherwise.",
                    "title": "lastElementChild"
                },
                "mode": {
                    "$ref": "#/definitions/ShadowRootMode",
                    "title": "mode"
                },
                "namespaceURI": {
                    "title": "namespaceURI",
                    "type": "string"
                },
                "nextSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the next sibling.",
                    "title": "nextSibling"
                },
                "nodeName": {
                    "description": "Returns a string appropriate for the type of node, as\nfollows:\nElement\nIts HTML-uppercased qualified name.\nAttr\nIts qualified name.\nText\n\"#text\".\nCDATASection\n\"#cdata-section\".\nProcessingInstruction\nIts target.\nComment\n\"#comment\".\nDocument\n\"#document\".\nDocumentType\nIts name.\nDocumentFragment\n\"#document-fragment\".",
                    "title": "nodeName",
                    "type": "string"
                },
                "nodeType": {
                    "title": "nodeType",
                    "type": "number"
                },
                "nodeValue": {
                    "title": "nodeValue",
                    "type": "string"
                },
                "ownerDocument": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the node document.\nReturns null for documents.",
                    "title": "ownerDocument"
                },
                "parentElement": {
                    "$ref": "#/definitions/HTMLElement",
                    "description": "Returns the parent element.",
                    "title": "parentElement"
                },
                "parentNode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Node"
                        },
                        {
                            "$ref": "#/definitions/ParentNode"
                        }
                    ],
                    "description": "Returns the parent.",
                    "title": "parentNode"
                },
                "previousSibling": {
                    "$ref": "#/definitions/Node",
                    "description": "Returns the previous sibling.",
                    "title": "previousSibling"
                },
                "styleSheets": {
                    "additionalProperties": false,
                    "description": "Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/StyleSheet"
                        }
                    },
                    "title": "styleSheets",
                    "type": "object"
                },
                "textContent": {
                    "title": "textContent",
                    "type": "string"
                }
            },
            "title": "ShadowRoot",
            "type": "object"
        },
        "ShadowRootMode": {
            "enum": [
                "closed",
                "open"
            ],
            "title": "ShadowRootMode",
            "type": "string"
        },
        "SpeechSynthesis": {
            "properties": {
                "onvoiceschanged": {
                    "title": "onvoiceschanged",
                    "type": "object"
                },
                "paused": {
                    "title": "paused",
                    "type": "boolean"
                },
                "pending": {
                    "title": "pending",
                    "type": "boolean"
                },
                "speaking": {
                    "title": "speaking",
                    "type": "boolean"
                }
            },
            "title": "SpeechSynthesis",
            "type": "object"
        },
        "Storage": {
            "additionalProperties": {
            },
            "properties": {
                "length": {
                    "description": "Returns the number of key/value pairs currently present in the list associated with the\nobject.",
                    "title": "length",
                    "type": "number"
                }
            },
            "title": "Storage",
            "type": "object"
        },
        "StorageManager": {
            "title": "StorageManager",
            "type": "object"
        },
        "StyleMedia": {
            "properties": {
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "StyleMedia",
            "type": "object"
        },
        "StyleSheet": {
            "properties": {
                "disabled": {
                    "title": "disabled",
                    "type": "boolean"
                },
                "href": {
                    "title": "href",
                    "type": "string"
                },
                "media": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "string"
                        }
                    },
                    "title": "media",
                    "type": "object"
                },
                "ownerNode": {
                    "$ref": "#/definitions/Node",
                    "title": "ownerNode"
                },
                "parentStyleSheet": {
                    "$ref": "#/definitions/StyleSheet",
                    "title": "parentStyleSheet"
                },
                "title": {
                    "title": "title",
                    "type": "string"
                },
                "type": {
                    "title": "type",
                    "type": "string"
                }
            },
            "title": "StyleSheet",
            "type": "object"
        },
        "SubtleCrypto": {
            "title": "SubtleCrypto",
            "type": "object"
        },
        "Touch": {
            "properties": {
                "altitudeAngle": {
                    "title": "altitudeAngle",
                    "type": "number"
                },
                "azimuthAngle": {
                    "title": "azimuthAngle",
                    "type": "number"
                },
                "clientX": {
                    "title": "clientX",
                    "type": "number"
                },
                "clientY": {
                    "title": "clientY",
                    "type": "number"
                },
                "force": {
                    "title": "force",
                    "type": "number"
                },
                "identifier": {
                    "title": "identifier",
                    "type": "number"
                },
                "pageX": {
                    "title": "pageX",
                    "type": "number"
                },
                "pageY": {
                    "title": "pageY",
                    "type": "number"
                },
                "radiusX": {
                    "title": "radiusX",
                    "type": "number"
                },
                "radiusY": {
                    "title": "radiusY",
                    "type": "number"
                },
                "rotationAngle": {
                    "title": "rotationAngle",
                    "type": "number"
                },
                "screenX": {
                    "title": "screenX",
                    "type": "number"
                },
                "screenY": {
                    "title": "screenY",
                    "type": "number"
                },
                "target": {
                    "$ref": "#/definitions/EventTarget",
                    "title": "target"
                },
                "touchType": {
                    "$ref": "#/definitions/TouchType",
                    "title": "touchType"
                }
            },
            "title": "Touch",
            "type": "object"
        },
        "TouchEvent": {
            "properties": {
                "AT_TARGET": {
                    "title": "AT_TARGET",
                    "type": "number"
                },
                "BUBBLING_PHASE": {
                    "title": "BUBBLING_PHASE",
                    "type": "number"
                },
                "CAPTURING_PHASE": {
                    "title": "CAPTURING_PHASE",
                    "type": "number"
                },
                "NONE": {
                    "title": "NONE",
                    "type": "number"
                },
                "altKey": {
                    "title": "altKey",
                    "type": "boolean"
                },
                "bubbles": {
                    "description": "Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.",
                    "title": "bubbles",
                    "type": "boolean"
                },
                "cancelBubble": {
                    "title": "cancelBubble",
                    "type": "boolean"
                },
                "cancelable": {
                    "title": "cancelable",
                    "type": "boolean"
                },
                "changedTouches": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Touch"
                        }
                    },
                    "title": "changedTouches",
                    "type": "object"
                },
                "composed": {
                    "description": "Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.",
                    "title": "composed",
                    "type": "boolean"
                },
                "ctrlKey": {
                    "title": "ctrlKey",
                    "type": "boolean"
                },
                "currentTarget": {
                    "$ref": "#/definitions/EventTarget",
                    "description": "Returns the object whose event listener's callback is currently being\ninvoked.",
                    "title": "currentTarget"
                },
                "defaultPrevented": {
                    "title": "defaultPrevented",
                    "type": "boolean"
                },
                "detail": {
                    "title": "detail",
                    "type": "number"
                },
                "eventPhase": {
                    "title": "eventPhase",
                    "type": "number"
                },
                "isTrusted": {
                    "description": "Returns true if event was dispatched by the user agent, and\nfalse otherwise.",
                    "title": "isTrusted",
                    "type": "boolean"
                },
                "metaKey": {
                    "title": "metaKey",
                    "type": "boolean"
                },
                "returnValue": {
                    "title": "returnValue",
                    "type": "boolean"
                },
                "shiftKey": {
                    "title": "shiftKey",
                    "type": "boolean"
                },
                "srcElement": {
                    "$ref": "#/definitions/Element",
                    "title": "srcElement"
                },
                "target": {
                    "$ref": "#/definitions/EventTarget",
                    "description": "Returns the object to which event is dispatched (its target).",
                    "title": "target"
                },
                "targetTouches": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Touch"
                        }
                    },
                    "title": "targetTouches",
                    "type": "object"
                },
                "timeStamp": {
                    "description": "Returns the event's timestamp as the number of milliseconds measured relative to\nthe time origin.",
                    "title": "timeStamp",
                    "type": "number"
                },
                "touches": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "$ref": "#/definitions/Touch"
                        }
                    },
                    "title": "touches",
                    "type": "object"
                },
                "type": {
                    "description": "Returns the type of event, e.g.\n\"click\", \"hashchange\", or\n\"submit\".",
                    "title": "type",
                    "type": "string"
                },
                "view": {
                    "$ref": "#/definitions/Window",
                    "title": "view"
                }
            },
            "title": "TouchEvent",
            "type": "object"
        },
        "TouchType": {
            "enum": [
                "direct",
                "stylus"
            ],
            "title": "TouchType",
            "type": "string"
        },
        "TrackingMode": {
            "description": "An ENUM to keep track of different Tracking modes that we can connect to.",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "title": "TrackingMode",
            "type": "number"
        },
        "UISettings": {
            "properties": {
                "colors": {
                    "$ref": "#/definitions/ColorPalette",
                    "title": "colors"
                },
                "radius": {
                    "default": 0,
                    "title": "radius",
                    "type": "number"
                }
            },
            "title": "UISettings",
            "type": "object"
        },
        "URL": {
            "properties": {
                "hash": {
                    "title": "hash",
                    "type": "string"
                },
                "host": {
                    "title": "host",
                    "type": "string"
                },
                "hostname": {
                    "title": "hostname",
                    "type": "string"
                },
                "href": {
                    "title": "href",
                    "type": "string"
                },
                "origin": {
                    "title": "origin",
                    "type": "string"
                },
                "password": {
                    "title": "password",
                    "type": "string"
                },
                "pathname": {
                    "title": "pathname",
                    "type": "string"
                },
                "port": {
                    "title": "port",
                    "type": "string"
                },
                "protocol": {
                    "title": "protocol",
                    "type": "string"
                },
                "search": {
                    "title": "search",
                    "type": "string"
                },
                "searchParams": {
                    "$ref": "#/definitions/URLSearchParams",
                    "title": "searchParams"
                },
                "username": {
                    "title": "username",
                    "type": "string"
                }
            },
            "title": "URL",
            "type": "object"
        },
        "URLSearchParams": {
            "title": "URLSearchParams",
            "type": "object"
        },
        "V": {
            "title": "V",
            "type": "object"
        },
        "VRDisplay": {
            "properties": {
                "capabilities": {
                    "$ref": "#/definitions/VRDisplayCapabilities",
                    "title": "capabilities"
                },
                "depthFar": {
                    "title": "depthFar",
                    "type": "number"
                },
                "depthNear": {
                    "title": "depthNear",
                    "type": "number"
                },
                "displayId": {
                    "title": "displayId",
                    "type": "number"
                },
                "displayName": {
                    "title": "displayName",
                    "type": "string"
                },
                "isConnected": {
                    "title": "isConnected",
                    "type": "boolean"
                },
                "isPresenting": {
                    "title": "isPresenting",
                    "type": "boolean"
                },
                "stageParameters": {
                    "$ref": "#/definitions/VRStageParameters",
                    "title": "stageParameters"
                }
            },
            "title": "VRDisplay",
            "type": "object"
        },
        "VRDisplayCapabilities": {
            "properties": {
                "canPresent": {
                    "title": "canPresent",
                    "type": "boolean"
                },
                "hasExternalDisplay": {
                    "title": "hasExternalDisplay",
                    "type": "boolean"
                },
                "hasOrientation": {
                    "title": "hasOrientation",
                    "type": "boolean"
                },
                "hasPosition": {
                    "title": "hasPosition",
                    "type": "boolean"
                },
                "maxLayers": {
                    "title": "maxLayers",
                    "type": "number"
                }
            },
            "title": "VRDisplayCapabilities",
            "type": "object"
        },
        "VRStageParameters": {
            "properties": {
                "sittingToStandingTransform": {
                    "additionalProperties": false,
                    "description": "A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\nof bytes could not be allocated an exception is raised.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "title": "sittingToStandingTransform",
                    "type": "object"
                },
                "sizeX": {
                    "title": "sizeX",
                    "type": "number"
                },
                "sizeY": {
                    "title": "sizeY",
                    "type": "number"
                }
            },
            "title": "VRStageParameters",
            "type": "object"
        },
        "VisibilityState": {
            "enum": [
                "hidden",
                "prerender",
                "visible"
            ],
            "title": "VisibilityState",
            "type": "string"
        },
        "WebAuthentication": {
            "title": "WebAuthentication",
            "type": "object"
        },
        "WebGLBuffer": {
            "title": "WebGLBuffer",
            "type": "object"
        },
        "WebGLFramebuffer": {
            "title": "WebGLFramebuffer",
            "type": "object"
        },
        "WebGLProgram": {
            "title": "WebGLProgram",
            "type": "object"
        },
        "WebGLRenderingContext": {
            "properties": {
                "ACTIVE_ATTRIBUTES": {
                    "title": "ACTIVE_ATTRIBUTES",
                    "type": "number"
                },
                "ACTIVE_TEXTURE": {
                    "title": "ACTIVE_TEXTURE",
                    "type": "number"
                },
                "ACTIVE_UNIFORMS": {
                    "title": "ACTIVE_UNIFORMS",
                    "type": "number"
                },
                "ALIASED_LINE_WIDTH_RANGE": {
                    "title": "ALIASED_LINE_WIDTH_RANGE",
                    "type": "number"
                },
                "ALIASED_POINT_SIZE_RANGE": {
                    "title": "ALIASED_POINT_SIZE_RANGE",
                    "type": "number"
                },
                "ALPHA": {
                    "title": "ALPHA",
                    "type": "number"
                },
                "ALPHA_BITS": {
                    "title": "ALPHA_BITS",
                    "type": "number"
                },
                "ALWAYS": {
                    "title": "ALWAYS",
                    "type": "number"
                },
                "ARRAY_BUFFER": {
                    "title": "ARRAY_BUFFER",
                    "type": "number"
                },
                "ARRAY_BUFFER_BINDING": {
                    "title": "ARRAY_BUFFER_BINDING",
                    "type": "number"
                },
                "ATTACHED_SHADERS": {
                    "title": "ATTACHED_SHADERS",
                    "type": "number"
                },
                "BACK": {
                    "title": "BACK",
                    "type": "number"
                },
                "BLEND": {
                    "title": "BLEND",
                    "type": "number"
                },
                "BLEND_COLOR": {
                    "title": "BLEND_COLOR",
                    "type": "number"
                },
                "BLEND_DST_ALPHA": {
                    "title": "BLEND_DST_ALPHA",
                    "type": "number"
                },
                "BLEND_DST_RGB": {
                    "title": "BLEND_DST_RGB",
                    "type": "number"
                },
                "BLEND_EQUATION": {
                    "title": "BLEND_EQUATION",
                    "type": "number"
                },
                "BLEND_EQUATION_ALPHA": {
                    "title": "BLEND_EQUATION_ALPHA",
                    "type": "number"
                },
                "BLEND_EQUATION_RGB": {
                    "title": "BLEND_EQUATION_RGB",
                    "type": "number"
                },
                "BLEND_SRC_ALPHA": {
                    "title": "BLEND_SRC_ALPHA",
                    "type": "number"
                },
                "BLEND_SRC_RGB": {
                    "title": "BLEND_SRC_RGB",
                    "type": "number"
                },
                "BLUE_BITS": {
                    "title": "BLUE_BITS",
                    "type": "number"
                },
                "BOOL": {
                    "title": "BOOL",
                    "type": "number"
                },
                "BOOL_VEC2": {
                    "title": "BOOL_VEC2",
                    "type": "number"
                },
                "BOOL_VEC3": {
                    "title": "BOOL_VEC3",
                    "type": "number"
                },
                "BOOL_VEC4": {
                    "title": "BOOL_VEC4",
                    "type": "number"
                },
                "BROWSER_DEFAULT_WEBGL": {
                    "title": "BROWSER_DEFAULT_WEBGL",
                    "type": "number"
                },
                "BUFFER_SIZE": {
                    "title": "BUFFER_SIZE",
                    "type": "number"
                },
                "BUFFER_USAGE": {
                    "title": "BUFFER_USAGE",
                    "type": "number"
                },
                "BYTE": {
                    "title": "BYTE",
                    "type": "number"
                },
                "CCW": {
                    "title": "CCW",
                    "type": "number"
                },
                "CLAMP_TO_EDGE": {
                    "title": "CLAMP_TO_EDGE",
                    "type": "number"
                },
                "COLOR_ATTACHMENT0": {
                    "title": "COLOR_ATTACHMENT0",
                    "type": "number"
                },
                "COLOR_BUFFER_BIT": {
                    "title": "COLOR_BUFFER_BIT",
                    "type": "number"
                },
                "COLOR_CLEAR_VALUE": {
                    "title": "COLOR_CLEAR_VALUE",
                    "type": "number"
                },
                "COLOR_WRITEMASK": {
                    "title": "COLOR_WRITEMASK",
                    "type": "number"
                },
                "COMPILE_STATUS": {
                    "title": "COMPILE_STATUS",
                    "type": "number"
                },
                "COMPRESSED_TEXTURE_FORMATS": {
                    "title": "COMPRESSED_TEXTURE_FORMATS",
                    "type": "number"
                },
                "CONSTANT_ALPHA": {
                    "title": "CONSTANT_ALPHA",
                    "type": "number"
                },
                "CONSTANT_COLOR": {
                    "title": "CONSTANT_COLOR",
                    "type": "number"
                },
                "CONTEXT_LOST_WEBGL": {
                    "title": "CONTEXT_LOST_WEBGL",
                    "type": "number"
                },
                "CULL_FACE": {
                    "title": "CULL_FACE",
                    "type": "number"
                },
                "CULL_FACE_MODE": {
                    "title": "CULL_FACE_MODE",
                    "type": "number"
                },
                "CURRENT_PROGRAM": {
                    "title": "CURRENT_PROGRAM",
                    "type": "number"
                },
                "CURRENT_VERTEX_ATTRIB": {
                    "title": "CURRENT_VERTEX_ATTRIB",
                    "type": "number"
                },
                "CW": {
                    "title": "CW",
                    "type": "number"
                },
                "DECR": {
                    "title": "DECR",
                    "type": "number"
                },
                "DECR_WRAP": {
                    "title": "DECR_WRAP",
                    "type": "number"
                },
                "DELETE_STATUS": {
                    "title": "DELETE_STATUS",
                    "type": "number"
                },
                "DEPTH_ATTACHMENT": {
                    "title": "DEPTH_ATTACHMENT",
                    "type": "number"
                },
                "DEPTH_BITS": {
                    "title": "DEPTH_BITS",
                    "type": "number"
                },
                "DEPTH_BUFFER_BIT": {
                    "title": "DEPTH_BUFFER_BIT",
                    "type": "number"
                },
                "DEPTH_CLEAR_VALUE": {
                    "title": "DEPTH_CLEAR_VALUE",
                    "type": "number"
                },
                "DEPTH_COMPONENT": {
                    "title": "DEPTH_COMPONENT",
                    "type": "number"
                },
                "DEPTH_COMPONENT16": {
                    "title": "DEPTH_COMPONENT16",
                    "type": "number"
                },
                "DEPTH_FUNC": {
                    "title": "DEPTH_FUNC",
                    "type": "number"
                },
                "DEPTH_RANGE": {
                    "title": "DEPTH_RANGE",
                    "type": "number"
                },
                "DEPTH_STENCIL": {
                    "title": "DEPTH_STENCIL",
                    "type": "number"
                },
                "DEPTH_STENCIL_ATTACHMENT": {
                    "title": "DEPTH_STENCIL_ATTACHMENT",
                    "type": "number"
                },
                "DEPTH_TEST": {
                    "title": "DEPTH_TEST",
                    "type": "number"
                },
                "DEPTH_WRITEMASK": {
                    "title": "DEPTH_WRITEMASK",
                    "type": "number"
                },
                "DITHER": {
                    "title": "DITHER",
                    "type": "number"
                },
                "DONT_CARE": {
                    "title": "DONT_CARE",
                    "type": "number"
                },
                "DST_ALPHA": {
                    "title": "DST_ALPHA",
                    "type": "number"
                },
                "DST_COLOR": {
                    "title": "DST_COLOR",
                    "type": "number"
                },
                "DYNAMIC_DRAW": {
                    "title": "DYNAMIC_DRAW",
                    "type": "number"
                },
                "ELEMENT_ARRAY_BUFFER": {
                    "title": "ELEMENT_ARRAY_BUFFER",
                    "type": "number"
                },
                "ELEMENT_ARRAY_BUFFER_BINDING": {
                    "title": "ELEMENT_ARRAY_BUFFER_BINDING",
                    "type": "number"
                },
                "EQUAL": {
                    "title": "EQUAL",
                    "type": "number"
                },
                "FASTEST": {
                    "title": "FASTEST",
                    "type": "number"
                },
                "FLOAT": {
                    "title": "FLOAT",
                    "type": "number"
                },
                "FLOAT_MAT2": {
                    "title": "FLOAT_MAT2",
                    "type": "number"
                },
                "FLOAT_MAT3": {
                    "title": "FLOAT_MAT3",
                    "type": "number"
                },
                "FLOAT_MAT4": {
                    "title": "FLOAT_MAT4",
                    "type": "number"
                },
                "FLOAT_VEC2": {
                    "title": "FLOAT_VEC2",
                    "type": "number"
                },
                "FLOAT_VEC3": {
                    "title": "FLOAT_VEC3",
                    "type": "number"
                },
                "FLOAT_VEC4": {
                    "title": "FLOAT_VEC4",
                    "type": "number"
                },
                "FRAGMENT_SHADER": {
                    "title": "FRAGMENT_SHADER",
                    "type": "number"
                },
                "FRAMEBUFFER": {
                    "title": "FRAMEBUFFER",
                    "type": "number"
                },
                "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME": {
                    "title": "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
                    "type": "number"
                },
                "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE": {
                    "title": "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
                    "type": "number"
                },
                "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE": {
                    "title": "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
                    "type": "number"
                },
                "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL": {
                    "title": "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
                    "type": "number"
                },
                "FRAMEBUFFER_BINDING": {
                    "title": "FRAMEBUFFER_BINDING",
                    "type": "number"
                },
                "FRAMEBUFFER_COMPLETE": {
                    "title": "FRAMEBUFFER_COMPLETE",
                    "type": "number"
                },
                "FRAMEBUFFER_INCOMPLETE_ATTACHMENT": {
                    "title": "FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
                    "type": "number"
                },
                "FRAMEBUFFER_INCOMPLETE_DIMENSIONS": {
                    "title": "FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
                    "type": "number"
                },
                "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT": {
                    "title": "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
                    "type": "number"
                },
                "FRAMEBUFFER_UNSUPPORTED": {
                    "title": "FRAMEBUFFER_UNSUPPORTED",
                    "type": "number"
                },
                "FRONT": {
                    "title": "FRONT",
                    "type": "number"
                },
                "FRONT_AND_BACK": {
                    "title": "FRONT_AND_BACK",
                    "type": "number"
                },
                "FRONT_FACE": {
                    "title": "FRONT_FACE",
                    "type": "number"
                },
                "FUNC_ADD": {
                    "title": "FUNC_ADD",
                    "type": "number"
                },
                "FUNC_REVERSE_SUBTRACT": {
                    "title": "FUNC_REVERSE_SUBTRACT",
                    "type": "number"
                },
                "FUNC_SUBTRACT": {
                    "title": "FUNC_SUBTRACT",
                    "type": "number"
                },
                "GENERATE_MIPMAP_HINT": {
                    "title": "GENERATE_MIPMAP_HINT",
                    "type": "number"
                },
                "GEQUAL": {
                    "title": "GEQUAL",
                    "type": "number"
                },
                "GREATER": {
                    "title": "GREATER",
                    "type": "number"
                },
                "GREEN_BITS": {
                    "title": "GREEN_BITS",
                    "type": "number"
                },
                "HIGH_FLOAT": {
                    "title": "HIGH_FLOAT",
                    "type": "number"
                },
                "HIGH_INT": {
                    "title": "HIGH_INT",
                    "type": "number"
                },
                "IMPLEMENTATION_COLOR_READ_FORMAT": {
                    "title": "IMPLEMENTATION_COLOR_READ_FORMAT",
                    "type": "number"
                },
                "IMPLEMENTATION_COLOR_READ_TYPE": {
                    "title": "IMPLEMENTATION_COLOR_READ_TYPE",
                    "type": "number"
                },
                "INCR": {
                    "title": "INCR",
                    "type": "number"
                },
                "INCR_WRAP": {
                    "title": "INCR_WRAP",
                    "type": "number"
                },
                "INT": {
                    "title": "INT",
                    "type": "number"
                },
                "INT_VEC2": {
                    "title": "INT_VEC2",
                    "type": "number"
                },
                "INT_VEC3": {
                    "title": "INT_VEC3",
                    "type": "number"
                },
                "INT_VEC4": {
                    "title": "INT_VEC4",
                    "type": "number"
                },
                "INVALID_ENUM": {
                    "title": "INVALID_ENUM",
                    "type": "number"
                },
                "INVALID_FRAMEBUFFER_OPERATION": {
                    "title": "INVALID_FRAMEBUFFER_OPERATION",
                    "type": "number"
                },
                "INVALID_OPERATION": {
                    "title": "INVALID_OPERATION",
                    "type": "number"
                },
                "INVALID_VALUE": {
                    "title": "INVALID_VALUE",
                    "type": "number"
                },
                "INVERT": {
                    "title": "INVERT",
                    "type": "number"
                },
                "KEEP": {
                    "title": "KEEP",
                    "type": "number"
                },
                "LEQUAL": {
                    "title": "LEQUAL",
                    "type": "number"
                },
                "LESS": {
                    "title": "LESS",
                    "type": "number"
                },
                "LINEAR": {
                    "title": "LINEAR",
                    "type": "number"
                },
                "LINEAR_MIPMAP_LINEAR": {
                    "title": "LINEAR_MIPMAP_LINEAR",
                    "type": "number"
                },
                "LINEAR_MIPMAP_NEAREST": {
                    "title": "LINEAR_MIPMAP_NEAREST",
                    "type": "number"
                },
                "LINES": {
                    "title": "LINES",
                    "type": "number"
                },
                "LINE_LOOP": {
                    "title": "LINE_LOOP",
                    "type": "number"
                },
                "LINE_STRIP": {
                    "title": "LINE_STRIP",
                    "type": "number"
                },
                "LINE_WIDTH": {
                    "title": "LINE_WIDTH",
                    "type": "number"
                },
                "LINK_STATUS": {
                    "title": "LINK_STATUS",
                    "type": "number"
                },
                "LOW_FLOAT": {
                    "title": "LOW_FLOAT",
                    "type": "number"
                },
                "LOW_INT": {
                    "title": "LOW_INT",
                    "type": "number"
                },
                "LUMINANCE": {
                    "title": "LUMINANCE",
                    "type": "number"
                },
                "LUMINANCE_ALPHA": {
                    "title": "LUMINANCE_ALPHA",
                    "type": "number"
                },
                "MAX_COMBINED_TEXTURE_IMAGE_UNITS": {
                    "title": "MAX_COMBINED_TEXTURE_IMAGE_UNITS",
                    "type": "number"
                },
                "MAX_CUBE_MAP_TEXTURE_SIZE": {
                    "title": "MAX_CUBE_MAP_TEXTURE_SIZE",
                    "type": "number"
                },
                "MAX_FRAGMENT_UNIFORM_VECTORS": {
                    "title": "MAX_FRAGMENT_UNIFORM_VECTORS",
                    "type": "number"
                },
                "MAX_RENDERBUFFER_SIZE": {
                    "title": "MAX_RENDERBUFFER_SIZE",
                    "type": "number"
                },
                "MAX_TEXTURE_IMAGE_UNITS": {
                    "title": "MAX_TEXTURE_IMAGE_UNITS",
                    "type": "number"
                },
                "MAX_TEXTURE_SIZE": {
                    "title": "MAX_TEXTURE_SIZE",
                    "type": "number"
                },
                "MAX_VARYING_VECTORS": {
                    "title": "MAX_VARYING_VECTORS",
                    "type": "number"
                },
                "MAX_VERTEX_ATTRIBS": {
                    "title": "MAX_VERTEX_ATTRIBS",
                    "type": "number"
                },
                "MAX_VERTEX_TEXTURE_IMAGE_UNITS": {
                    "title": "MAX_VERTEX_TEXTURE_IMAGE_UNITS",
                    "type": "number"
                },
                "MAX_VERTEX_UNIFORM_VECTORS": {
                    "title": "MAX_VERTEX_UNIFORM_VECTORS",
                    "type": "number"
                },
                "MAX_VIEWPORT_DIMS": {
                    "title": "MAX_VIEWPORT_DIMS",
                    "type": "number"
                },
                "MEDIUM_FLOAT": {
                    "title": "MEDIUM_FLOAT",
                    "type": "number"
                },
                "MEDIUM_INT": {
                    "title": "MEDIUM_INT",
                    "type": "number"
                },
                "MIRRORED_REPEAT": {
                    "title": "MIRRORED_REPEAT",
                    "type": "number"
                },
                "NEAREST": {
                    "title": "NEAREST",
                    "type": "number"
                },
                "NEAREST_MIPMAP_LINEAR": {
                    "title": "NEAREST_MIPMAP_LINEAR",
                    "type": "number"
                },
                "NEAREST_MIPMAP_NEAREST": {
                    "title": "NEAREST_MIPMAP_NEAREST",
                    "type": "number"
                },
                "NEVER": {
                    "title": "NEVER",
                    "type": "number"
                },
                "NICEST": {
                    "title": "NICEST",
                    "type": "number"
                },
                "NONE": {
                    "title": "NONE",
                    "type": "number"
                },
                "NOTEQUAL": {
                    "title": "NOTEQUAL",
                    "type": "number"
                },
                "NO_ERROR": {
                    "title": "NO_ERROR",
                    "type": "number"
                },
                "ONE": {
                    "title": "ONE",
                    "type": "number"
                },
                "ONE_MINUS_CONSTANT_ALPHA": {
                    "title": "ONE_MINUS_CONSTANT_ALPHA",
                    "type": "number"
                },
                "ONE_MINUS_CONSTANT_COLOR": {
                    "title": "ONE_MINUS_CONSTANT_COLOR",
                    "type": "number"
                },
                "ONE_MINUS_DST_ALPHA": {
                    "title": "ONE_MINUS_DST_ALPHA",
                    "type": "number"
                },
                "ONE_MINUS_DST_COLOR": {
                    "title": "ONE_MINUS_DST_COLOR",
                    "type": "number"
                },
                "ONE_MINUS_SRC_ALPHA": {
                    "title": "ONE_MINUS_SRC_ALPHA",
                    "type": "number"
                },
                "ONE_MINUS_SRC_COLOR": {
                    "title": "ONE_MINUS_SRC_COLOR",
                    "type": "number"
                },
                "OUT_OF_MEMORY": {
                    "title": "OUT_OF_MEMORY",
                    "type": "number"
                },
                "PACK_ALIGNMENT": {
                    "title": "PACK_ALIGNMENT",
                    "type": "number"
                },
                "POINTS": {
                    "title": "POINTS",
                    "type": "number"
                },
                "POLYGON_OFFSET_FACTOR": {
                    "title": "POLYGON_OFFSET_FACTOR",
                    "type": "number"
                },
                "POLYGON_OFFSET_FILL": {
                    "title": "POLYGON_OFFSET_FILL",
                    "type": "number"
                },
                "POLYGON_OFFSET_UNITS": {
                    "title": "POLYGON_OFFSET_UNITS",
                    "type": "number"
                },
                "RED_BITS": {
                    "title": "RED_BITS",
                    "type": "number"
                },
                "RENDERBUFFER": {
                    "title": "RENDERBUFFER",
                    "type": "number"
                },
                "RENDERBUFFER_ALPHA_SIZE": {
                    "title": "RENDERBUFFER_ALPHA_SIZE",
                    "type": "number"
                },
                "RENDERBUFFER_BINDING": {
                    "title": "RENDERBUFFER_BINDING",
                    "type": "number"
                },
                "RENDERBUFFER_BLUE_SIZE": {
                    "title": "RENDERBUFFER_BLUE_SIZE",
                    "type": "number"
                },
                "RENDERBUFFER_DEPTH_SIZE": {
                    "title": "RENDERBUFFER_DEPTH_SIZE",
                    "type": "number"
                },
                "RENDERBUFFER_GREEN_SIZE": {
                    "title": "RENDERBUFFER_GREEN_SIZE",
                    "type": "number"
                },
                "RENDERBUFFER_HEIGHT": {
                    "title": "RENDERBUFFER_HEIGHT",
                    "type": "number"
                },
                "RENDERBUFFER_INTERNAL_FORMAT": {
                    "title": "RENDERBUFFER_INTERNAL_FORMAT",
                    "type": "number"
                },
                "RENDERBUFFER_RED_SIZE": {
                    "title": "RENDERBUFFER_RED_SIZE",
                    "type": "number"
                },
                "RENDERBUFFER_STENCIL_SIZE": {
                    "title": "RENDERBUFFER_STENCIL_SIZE",
                    "type": "number"
                },
                "RENDERBUFFER_WIDTH": {
                    "title": "RENDERBUFFER_WIDTH",
                    "type": "number"
                },
                "RENDERER": {
                    "title": "RENDERER",
                    "type": "number"
                },
                "REPEAT": {
                    "title": "REPEAT",
                    "type": "number"
                },
                "REPLACE": {
                    "title": "REPLACE",
                    "type": "number"
                },
                "RGB": {
                    "title": "RGB",
                    "type": "number"
                },
                "RGB565": {
                    "title": "RGB565",
                    "type": "number"
                },
                "RGB5_A1": {
                    "title": "RGB5_A1",
                    "type": "number"
                },
                "RGBA": {
                    "title": "RGBA",
                    "type": "number"
                },
                "RGBA4": {
                    "title": "RGBA4",
                    "type": "number"
                },
                "SAMPLER_2D": {
                    "title": "SAMPLER_2D",
                    "type": "number"
                },
                "SAMPLER_CUBE": {
                    "title": "SAMPLER_CUBE",
                    "type": "number"
                },
                "SAMPLES": {
                    "title": "SAMPLES",
                    "type": "number"
                },
                "SAMPLE_ALPHA_TO_COVERAGE": {
                    "title": "SAMPLE_ALPHA_TO_COVERAGE",
                    "type": "number"
                },
                "SAMPLE_BUFFERS": {
                    "title": "SAMPLE_BUFFERS",
                    "type": "number"
                },
                "SAMPLE_COVERAGE": {
                    "title": "SAMPLE_COVERAGE",
                    "type": "number"
                },
                "SAMPLE_COVERAGE_INVERT": {
                    "title": "SAMPLE_COVERAGE_INVERT",
                    "type": "number"
                },
                "SAMPLE_COVERAGE_VALUE": {
                    "title": "SAMPLE_COVERAGE_VALUE",
                    "type": "number"
                },
                "SCISSOR_BOX": {
                    "title": "SCISSOR_BOX",
                    "type": "number"
                },
                "SCISSOR_TEST": {
                    "title": "SCISSOR_TEST",
                    "type": "number"
                },
                "SHADER_TYPE": {
                    "title": "SHADER_TYPE",
                    "type": "number"
                },
                "SHADING_LANGUAGE_VERSION": {
                    "title": "SHADING_LANGUAGE_VERSION",
                    "type": "number"
                },
                "SHORT": {
                    "title": "SHORT",
                    "type": "number"
                },
                "SRC_ALPHA": {
                    "title": "SRC_ALPHA",
                    "type": "number"
                },
                "SRC_ALPHA_SATURATE": {
                    "title": "SRC_ALPHA_SATURATE",
                    "type": "number"
                },
                "SRC_COLOR": {
                    "title": "SRC_COLOR",
                    "type": "number"
                },
                "STATIC_DRAW": {
                    "title": "STATIC_DRAW",
                    "type": "number"
                },
                "STENCIL_ATTACHMENT": {
                    "title": "STENCIL_ATTACHMENT",
                    "type": "number"
                },
                "STENCIL_BACK_FAIL": {
                    "title": "STENCIL_BACK_FAIL",
                    "type": "number"
                },
                "STENCIL_BACK_FUNC": {
                    "title": "STENCIL_BACK_FUNC",
                    "type": "number"
                },
                "STENCIL_BACK_PASS_DEPTH_FAIL": {
                    "title": "STENCIL_BACK_PASS_DEPTH_FAIL",
                    "type": "number"
                },
                "STENCIL_BACK_PASS_DEPTH_PASS": {
                    "title": "STENCIL_BACK_PASS_DEPTH_PASS",
                    "type": "number"
                },
                "STENCIL_BACK_REF": {
                    "title": "STENCIL_BACK_REF",
                    "type": "number"
                },
                "STENCIL_BACK_VALUE_MASK": {
                    "title": "STENCIL_BACK_VALUE_MASK",
                    "type": "number"
                },
                "STENCIL_BACK_WRITEMASK": {
                    "title": "STENCIL_BACK_WRITEMASK",
                    "type": "number"
                },
                "STENCIL_BITS": {
                    "title": "STENCIL_BITS",
                    "type": "number"
                },
                "STENCIL_BUFFER_BIT": {
                    "title": "STENCIL_BUFFER_BIT",
                    "type": "number"
                },
                "STENCIL_CLEAR_VALUE": {
                    "title": "STENCIL_CLEAR_VALUE",
                    "type": "number"
                },
                "STENCIL_FAIL": {
                    "title": "STENCIL_FAIL",
                    "type": "number"
                },
                "STENCIL_FUNC": {
                    "title": "STENCIL_FUNC",
                    "type": "number"
                },
                "STENCIL_INDEX8": {
                    "title": "STENCIL_INDEX8",
                    "type": "number"
                },
                "STENCIL_PASS_DEPTH_FAIL": {
                    "title": "STENCIL_PASS_DEPTH_FAIL",
                    "type": "number"
                },
                "STENCIL_PASS_DEPTH_PASS": {
                    "title": "STENCIL_PASS_DEPTH_PASS",
                    "type": "number"
                },
                "STENCIL_REF": {
                    "title": "STENCIL_REF",
                    "type": "number"
                },
                "STENCIL_TEST": {
                    "title": "STENCIL_TEST",
                    "type": "number"
                },
                "STENCIL_VALUE_MASK": {
                    "title": "STENCIL_VALUE_MASK",
                    "type": "number"
                },
                "STENCIL_WRITEMASK": {
                    "title": "STENCIL_WRITEMASK",
                    "type": "number"
                },
                "STREAM_DRAW": {
                    "title": "STREAM_DRAW",
                    "type": "number"
                },
                "SUBPIXEL_BITS": {
                    "title": "SUBPIXEL_BITS",
                    "type": "number"
                },
                "TEXTURE": {
                    "title": "TEXTURE",
                    "type": "number"
                },
                "TEXTURE0": {
                    "title": "TEXTURE0",
                    "type": "number"
                },
                "TEXTURE1": {
                    "title": "TEXTURE1",
                    "type": "number"
                },
                "TEXTURE10": {
                    "title": "TEXTURE10",
                    "type": "number"
                },
                "TEXTURE11": {
                    "title": "TEXTURE11",
                    "type": "number"
                },
                "TEXTURE12": {
                    "title": "TEXTURE12",
                    "type": "number"
                },
                "TEXTURE13": {
                    "title": "TEXTURE13",
                    "type": "number"
                },
                "TEXTURE14": {
                    "title": "TEXTURE14",
                    "type": "number"
                },
                "TEXTURE15": {
                    "title": "TEXTURE15",
                    "type": "number"
                },
                "TEXTURE16": {
                    "title": "TEXTURE16",
                    "type": "number"
                },
                "TEXTURE17": {
                    "title": "TEXTURE17",
                    "type": "number"
                },
                "TEXTURE18": {
                    "title": "TEXTURE18",
                    "type": "number"
                },
                "TEXTURE19": {
                    "title": "TEXTURE19",
                    "type": "number"
                },
                "TEXTURE2": {
                    "title": "TEXTURE2",
                    "type": "number"
                },
                "TEXTURE20": {
                    "title": "TEXTURE20",
                    "type": "number"
                },
                "TEXTURE21": {
                    "title": "TEXTURE21",
                    "type": "number"
                },
                "TEXTURE22": {
                    "title": "TEXTURE22",
                    "type": "number"
                },
                "TEXTURE23": {
                    "title": "TEXTURE23",
                    "type": "number"
                },
                "TEXTURE24": {
                    "title": "TEXTURE24",
                    "type": "number"
                },
                "TEXTURE25": {
                    "title": "TEXTURE25",
                    "type": "number"
                },
                "TEXTURE26": {
                    "title": "TEXTURE26",
                    "type": "number"
                },
                "TEXTURE27": {
                    "title": "TEXTURE27",
                    "type": "number"
                },
                "TEXTURE28": {
                    "title": "TEXTURE28",
                    "type": "number"
                },
                "TEXTURE29": {
                    "title": "TEXTURE29",
                    "type": "number"
                },
                "TEXTURE3": {
                    "title": "TEXTURE3",
                    "type": "number"
                },
                "TEXTURE30": {
                    "title": "TEXTURE30",
                    "type": "number"
                },
                "TEXTURE31": {
                    "title": "TEXTURE31",
                    "type": "number"
                },
                "TEXTURE4": {
                    "title": "TEXTURE4",
                    "type": "number"
                },
                "TEXTURE5": {
                    "title": "TEXTURE5",
                    "type": "number"
                },
                "TEXTURE6": {
                    "title": "TEXTURE6",
                    "type": "number"
                },
                "TEXTURE7": {
                    "title": "TEXTURE7",
                    "type": "number"
                },
                "TEXTURE8": {
                    "title": "TEXTURE8",
                    "type": "number"
                },
                "TEXTURE9": {
                    "title": "TEXTURE9",
                    "type": "number"
                },
                "TEXTURE_2D": {
                    "title": "TEXTURE_2D",
                    "type": "number"
                },
                "TEXTURE_BINDING_2D": {
                    "title": "TEXTURE_BINDING_2D",
                    "type": "number"
                },
                "TEXTURE_BINDING_CUBE_MAP": {
                    "title": "TEXTURE_BINDING_CUBE_MAP",
                    "type": "number"
                },
                "TEXTURE_CUBE_MAP": {
                    "title": "TEXTURE_CUBE_MAP",
                    "type": "number"
                },
                "TEXTURE_CUBE_MAP_NEGATIVE_X": {
                    "title": "TEXTURE_CUBE_MAP_NEGATIVE_X",
                    "type": "number"
                },
                "TEXTURE_CUBE_MAP_NEGATIVE_Y": {
                    "title": "TEXTURE_CUBE_MAP_NEGATIVE_Y",
                    "type": "number"
                },
                "TEXTURE_CUBE_MAP_NEGATIVE_Z": {
                    "title": "TEXTURE_CUBE_MAP_NEGATIVE_Z",
                    "type": "number"
                },
                "TEXTURE_CUBE_MAP_POSITIVE_X": {
                    "title": "TEXTURE_CUBE_MAP_POSITIVE_X",
                    "type": "number"
                },
                "TEXTURE_CUBE_MAP_POSITIVE_Y": {
                    "title": "TEXTURE_CUBE_MAP_POSITIVE_Y",
                    "type": "number"
                },
                "TEXTURE_CUBE_MAP_POSITIVE_Z": {
                    "title": "TEXTURE_CUBE_MAP_POSITIVE_Z",
                    "type": "number"
                },
                "TEXTURE_MAG_FILTER": {
                    "title": "TEXTURE_MAG_FILTER",
                    "type": "number"
                },
                "TEXTURE_MIN_FILTER": {
                    "title": "TEXTURE_MIN_FILTER",
                    "type": "number"
                },
                "TEXTURE_WRAP_S": {
                    "title": "TEXTURE_WRAP_S",
                    "type": "number"
                },
                "TEXTURE_WRAP_T": {
                    "title": "TEXTURE_WRAP_T",
                    "type": "number"
                },
                "TRIANGLES": {
                    "title": "TRIANGLES",
                    "type": "number"
                },
                "TRIANGLE_FAN": {
                    "title": "TRIANGLE_FAN",
                    "type": "number"
                },
                "TRIANGLE_STRIP": {
                    "title": "TRIANGLE_STRIP",
                    "type": "number"
                },
                "UNPACK_ALIGNMENT": {
                    "title": "UNPACK_ALIGNMENT",
                    "type": "number"
                },
                "UNPACK_COLORSPACE_CONVERSION_WEBGL": {
                    "title": "UNPACK_COLORSPACE_CONVERSION_WEBGL",
                    "type": "number"
                },
                "UNPACK_FLIP_Y_WEBGL": {
                    "title": "UNPACK_FLIP_Y_WEBGL",
                    "type": "number"
                },
                "UNPACK_PREMULTIPLY_ALPHA_WEBGL": {
                    "title": "UNPACK_PREMULTIPLY_ALPHA_WEBGL",
                    "type": "number"
                },
                "UNSIGNED_BYTE": {
                    "title": "UNSIGNED_BYTE",
                    "type": "number"
                },
                "UNSIGNED_INT": {
                    "title": "UNSIGNED_INT",
                    "type": "number"
                },
                "UNSIGNED_SHORT": {
                    "title": "UNSIGNED_SHORT",
                    "type": "number"
                },
                "UNSIGNED_SHORT_4_4_4_4": {
                    "title": "UNSIGNED_SHORT_4_4_4_4",
                    "type": "number"
                },
                "UNSIGNED_SHORT_5_5_5_1": {
                    "title": "UNSIGNED_SHORT_5_5_5_1",
                    "type": "number"
                },
                "UNSIGNED_SHORT_5_6_5": {
                    "title": "UNSIGNED_SHORT_5_6_5",
                    "type": "number"
                },
                "VALIDATE_STATUS": {
                    "title": "VALIDATE_STATUS",
                    "type": "number"
                },
                "VENDOR": {
                    "title": "VENDOR",
                    "type": "number"
                },
                "VERSION": {
                    "title": "VERSION",
                    "type": "number"
                },
                "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING": {
                    "title": "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
                    "type": "number"
                },
                "VERTEX_ATTRIB_ARRAY_ENABLED": {
                    "title": "VERTEX_ATTRIB_ARRAY_ENABLED",
                    "type": "number"
                },
                "VERTEX_ATTRIB_ARRAY_NORMALIZED": {
                    "title": "VERTEX_ATTRIB_ARRAY_NORMALIZED",
                    "type": "number"
                },
                "VERTEX_ATTRIB_ARRAY_POINTER": {
                    "title": "VERTEX_ATTRIB_ARRAY_POINTER",
                    "type": "number"
                },
                "VERTEX_ATTRIB_ARRAY_SIZE": {
                    "title": "VERTEX_ATTRIB_ARRAY_SIZE",
                    "type": "number"
                },
                "VERTEX_ATTRIB_ARRAY_STRIDE": {
                    "title": "VERTEX_ATTRIB_ARRAY_STRIDE",
                    "type": "number"
                },
                "VERTEX_ATTRIB_ARRAY_TYPE": {
                    "title": "VERTEX_ATTRIB_ARRAY_TYPE",
                    "type": "number"
                },
                "VERTEX_SHADER": {
                    "title": "VERTEX_SHADER",
                    "type": "number"
                },
                "VIEWPORT": {
                    "title": "VIEWPORT",
                    "type": "number"
                },
                "ZERO": {
                    "title": "ZERO",
                    "type": "number"
                },
                "canvas": {
                    "$ref": "#/definitions/HTMLCanvasElement",
                    "title": "canvas"
                },
                "drawingBufferHeight": {
                    "title": "drawingBufferHeight",
                    "type": "number"
                },
                "drawingBufferWidth": {
                    "title": "drawingBufferWidth",
                    "type": "number"
                }
            },
            "title": "WebGLRenderingContext",
            "type": "object"
        },
        "WebGLTexture": {
            "title": "WebGLTexture",
            "type": "object"
        },
        "Window": {
            "properties": {
                "Blob": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/Blob",
                            "title": "prototype"
                        }
                    },
                    "title": "Blob",
                    "type": "object"
                },
                "URL": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/URL",
                            "title": "prototype"
                        }
                    },
                    "title": "URL",
                    "type": "object"
                },
                "URLSearchParams": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/URLSearchParams",
                            "title": "prototype"
                        }
                    },
                    "title": "URLSearchParams",
                    "type": "object"
                },
                "applicationCache": {
                    "$ref": "#/definitions/ApplicationCache",
                    "title": "applicationCache"
                },
                "caches": {
                    "$ref": "#/definitions/CacheStorage",
                    "title": "caches"
                },
                "clientInformation": {
                    "$ref": "#/definitions/Navigator",
                    "title": "clientInformation"
                },
                "closed": {
                    "title": "closed",
                    "type": "boolean"
                },
                "console": {
                    "$ref": "#/definitions/Console",
                    "title": "console"
                },
                "crypto": {
                    "$ref": "#/definitions/Crypto",
                    "title": "crypto"
                },
                "customElements": {
                    "$ref": "#/definitions/CustomElementRegistry",
                    "title": "customElements"
                },
                "defaultStatus": {
                    "title": "defaultStatus",
                    "type": "string"
                },
                "devicePixelRatio": {
                    "title": "devicePixelRatio",
                    "type": "number"
                },
                "doNotTrack": {
                    "title": "doNotTrack",
                    "type": "string"
                },
                "document": {
                    "$ref": "#/definitions/Document",
                    "title": "document"
                },
                "event": {
                    "$ref": "#/definitions/Event",
                    "title": "event"
                },
                "external": {
                    "$ref": "#/definitions/External",
                    "title": "external"
                },
                "frameElement": {
                    "$ref": "#/definitions/Element",
                    "title": "frameElement"
                },
                "frames": {
                    "$ref": "#/definitions/Window",
                    "title": "frames"
                },
                "history": {
                    "$ref": "#/definitions/History",
                    "title": "history"
                },
                "indexedDB": {
                    "$ref": "#/definitions/IDBFactory",
                    "title": "indexedDB"
                },
                "innerHeight": {
                    "title": "innerHeight",
                    "type": "number"
                },
                "innerWidth": {
                    "title": "innerWidth",
                    "type": "number"
                },
                "isSecureContext": {
                    "title": "isSecureContext",
                    "type": "boolean"
                },
                "length": {
                    "title": "length",
                    "type": "number"
                },
                "localStorage": {
                    "$ref": "#/definitions/Storage",
                    "title": "localStorage"
                },
                "location": {
                    "$ref": "#/definitions/Location",
                    "title": "location"
                },
                "locationbar": {
                    "$ref": "#/definitions/BarProp",
                    "title": "locationbar"
                },
                "menubar": {
                    "$ref": "#/definitions/BarProp",
                    "title": "menubar"
                },
                "msContentScript": {
                    "$ref": "#/definitions/ExtensionScriptApis",
                    "title": "msContentScript"
                },
                "name": {
                    "title": "name",
                    "type": "string"
                },
                "navigator": {
                    "$ref": "#/definitions/Navigator",
                    "title": "navigator"
                },
                "offscreenBuffering": {
                    "title": "offscreenBuffering",
                    "type": [
                        "string",
                        "boolean"
                    ]
                },
                "onabort": {
                    "description": "Fires when the user aborts the download.",
                    "title": "onabort",
                    "type": "object"
                },
                "onafterprint": {
                    "title": "onafterprint",
                    "type": "object"
                },
                "onanimationcancel": {
                    "title": "onanimationcancel",
                    "type": "object"
                },
                "onanimationend": {
                    "title": "onanimationend",
                    "type": "object"
                },
                "onanimationiteration": {
                    "title": "onanimationiteration",
                    "type": "object"
                },
                "onanimationstart": {
                    "title": "onanimationstart",
                    "type": "object"
                },
                "onauxclick": {
                    "title": "onauxclick",
                    "type": "object"
                },
                "onbeforeprint": {
                    "title": "onbeforeprint",
                    "type": "object"
                },
                "onbeforeunload": {
                    "title": "onbeforeunload",
                    "type": "object"
                },
                "onblur": {
                    "description": "Fires when the object loses the input focus.",
                    "title": "onblur",
                    "type": "object"
                },
                "oncancel": {
                    "title": "oncancel",
                    "type": "object"
                },
                "oncanplay": {
                    "description": "Occurs when playback is possible, but would require further buffering.",
                    "title": "oncanplay",
                    "type": "object"
                },
                "oncanplaythrough": {
                    "title": "oncanplaythrough",
                    "type": "object"
                },
                "onchange": {
                    "description": "Fires when the contents of the object or selection have changed.",
                    "title": "onchange",
                    "type": "object"
                },
                "onclick": {
                    "description": "Fires when the user clicks the left mouse button on the object",
                    "title": "onclick",
                    "type": "object"
                },
                "onclose": {
                    "title": "onclose",
                    "type": "object"
                },
                "oncompassneedscalibration": {
                    "title": "oncompassneedscalibration",
                    "type": "object"
                },
                "oncontextmenu": {
                    "description": "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
                    "title": "oncontextmenu",
                    "type": "object"
                },
                "oncuechange": {
                    "title": "oncuechange",
                    "type": "object"
                },
                "ondblclick": {
                    "description": "Fires when the user double-clicks the object.",
                    "title": "ondblclick",
                    "type": "object"
                },
                "ondevicelight": {
                    "title": "ondevicelight",
                    "type": "object"
                },
                "ondevicemotion": {
                    "title": "ondevicemotion",
                    "type": "object"
                },
                "ondeviceorientation": {
                    "title": "ondeviceorientation",
                    "type": "object"
                },
                "ondrag": {
                    "description": "Fires on the source object continuously during a drag operation.",
                    "title": "ondrag",
                    "type": "object"
                },
                "ondragend": {
                    "description": "Fires on the source object when the user releases the mouse at the close of a drag operation.",
                    "title": "ondragend",
                    "type": "object"
                },
                "ondragenter": {
                    "description": "Fires on the target element when the user drags the object to a valid drop target.",
                    "title": "ondragenter",
                    "type": "object"
                },
                "ondragexit": {
                    "title": "ondragexit",
                    "type": "object"
                },
                "ondragleave": {
                    "description": "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
                    "title": "ondragleave",
                    "type": "object"
                },
                "ondragover": {
                    "description": "Fires on the target element continuously while the user drags the object over a valid drop target.",
                    "title": "ondragover",
                    "type": "object"
                },
                "ondragstart": {
                    "description": "Fires on the source object when the user starts to drag a text selection or selected object.",
                    "title": "ondragstart",
                    "type": "object"
                },
                "ondrop": {
                    "title": "ondrop",
                    "type": "object"
                },
                "ondurationchange": {
                    "description": "Occurs when the duration attribute is updated.",
                    "title": "ondurationchange",
                    "type": "object"
                },
                "onemptied": {
                    "description": "Occurs when the media element is reset to its initial state.",
                    "title": "onemptied",
                    "type": "object"
                },
                "onended": {
                    "description": "Occurs when the end of playback is reached.",
                    "title": "onended",
                    "type": "object"
                },
                "onerror": {
                    "$ref": "#/definitions/ErrorEventHandler",
                    "description": "Fires when an error occurs during object loading.",
                    "title": "onerror"
                },
                "onfocus": {
                    "description": "Fires when the object receives focus.",
                    "title": "onfocus",
                    "type": "object"
                },
                "ongotpointercapture": {
                    "title": "ongotpointercapture",
                    "type": "object"
                },
                "onhashchange": {
                    "title": "onhashchange",
                    "type": "object"
                },
                "oninput": {
                    "title": "oninput",
                    "type": "object"
                },
                "oninvalid": {
                    "title": "oninvalid",
                    "type": "object"
                },
                "onkeydown": {
                    "description": "Fires when the user presses a key.",
                    "title": "onkeydown",
                    "type": "object"
                },
                "onkeypress": {
                    "description": "Fires when the user presses an alphanumeric key.",
                    "title": "onkeypress",
                    "type": "object"
                },
                "onkeyup": {
                    "description": "Fires when the user releases a key.",
                    "title": "onkeyup",
                    "type": "object"
                },
                "onlanguagechange": {
                    "title": "onlanguagechange",
                    "type": "object"
                },
                "onload": {
                    "description": "Fires immediately after the browser loads the object.",
                    "title": "onload",
                    "type": "object"
                },
                "onloadeddata": {
                    "description": "Occurs when media data is loaded at the current playback position.",
                    "title": "onloadeddata",
                    "type": "object"
                },
                "onloadedmetadata": {
                    "description": "Occurs when the duration and dimensions of the media have been determined.",
                    "title": "onloadedmetadata",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "description": "Occurs when Internet Explorer begins looking for media data.",
                    "title": "onloadstart",
                    "type": "object"
                },
                "onlostpointercapture": {
                    "title": "onlostpointercapture",
                    "type": "object"
                },
                "onmessage": {
                    "title": "onmessage",
                    "type": "object"
                },
                "onmessageerror": {
                    "title": "onmessageerror",
                    "type": "object"
                },
                "onmousedown": {
                    "description": "Fires when the user clicks the object with either mouse button.",
                    "title": "onmousedown",
                    "type": "object"
                },
                "onmouseenter": {
                    "title": "onmouseenter",
                    "type": "object"
                },
                "onmouseleave": {
                    "title": "onmouseleave",
                    "type": "object"
                },
                "onmousemove": {
                    "description": "Fires when the user moves the mouse over the object.",
                    "title": "onmousemove",
                    "type": "object"
                },
                "onmouseout": {
                    "description": "Fires when the user moves the mouse pointer outside the boundaries of the object.",
                    "title": "onmouseout",
                    "type": "object"
                },
                "onmouseover": {
                    "description": "Fires when the user moves the mouse pointer into the object.",
                    "title": "onmouseover",
                    "type": "object"
                },
                "onmouseup": {
                    "description": "Fires when the user releases a mouse button while the mouse is over the object.",
                    "title": "onmouseup",
                    "type": "object"
                },
                "onmousewheel": {
                    "title": "onmousewheel",
                    "type": "object"
                },
                "onmsgesturechange": {
                    "title": "onmsgesturechange",
                    "type": "object"
                },
                "onmsgesturedoubletap": {
                    "title": "onmsgesturedoubletap",
                    "type": "object"
                },
                "onmsgestureend": {
                    "title": "onmsgestureend",
                    "type": "object"
                },
                "onmsgesturehold": {
                    "title": "onmsgesturehold",
                    "type": "object"
                },
                "onmsgesturestart": {
                    "title": "onmsgesturestart",
                    "type": "object"
                },
                "onmsgesturetap": {
                    "title": "onmsgesturetap",
                    "type": "object"
                },
                "onmsinertiastart": {
                    "title": "onmsinertiastart",
                    "type": "object"
                },
                "onmspointercancel": {
                    "title": "onmspointercancel",
                    "type": "object"
                },
                "onmspointerdown": {
                    "title": "onmspointerdown",
                    "type": "object"
                },
                "onmspointerenter": {
                    "title": "onmspointerenter",
                    "type": "object"
                },
                "onmspointerleave": {
                    "title": "onmspointerleave",
                    "type": "object"
                },
                "onmspointermove": {
                    "title": "onmspointermove",
                    "type": "object"
                },
                "onmspointerout": {
                    "title": "onmspointerout",
                    "type": "object"
                },
                "onmspointerover": {
                    "title": "onmspointerover",
                    "type": "object"
                },
                "onmspointerup": {
                    "title": "onmspointerup",
                    "type": "object"
                },
                "onoffline": {
                    "title": "onoffline",
                    "type": "object"
                },
                "ononline": {
                    "title": "ononline",
                    "type": "object"
                },
                "onorientationchange": {
                    "title": "onorientationchange",
                    "type": "object"
                },
                "onpagehide": {
                    "title": "onpagehide",
                    "type": "object"
                },
                "onpageshow": {
                    "title": "onpageshow",
                    "type": "object"
                },
                "onpause": {
                    "description": "Occurs when playback is paused.",
                    "title": "onpause",
                    "type": "object"
                },
                "onplay": {
                    "description": "Occurs when the play method is requested.",
                    "title": "onplay",
                    "type": "object"
                },
                "onplaying": {
                    "description": "Occurs when the audio or video has started playing.",
                    "title": "onplaying",
                    "type": "object"
                },
                "onpointercancel": {
                    "title": "onpointercancel",
                    "type": "object"
                },
                "onpointerdown": {
                    "title": "onpointerdown",
                    "type": "object"
                },
                "onpointerenter": {
                    "title": "onpointerenter",
                    "type": "object"
                },
                "onpointerleave": {
                    "title": "onpointerleave",
                    "type": "object"
                },
                "onpointermove": {
                    "title": "onpointermove",
                    "type": "object"
                },
                "onpointerout": {
                    "title": "onpointerout",
                    "type": "object"
                },
                "onpointerover": {
                    "title": "onpointerover",
                    "type": "object"
                },
                "onpointerup": {
                    "title": "onpointerup",
                    "type": "object"
                },
                "onpopstate": {
                    "title": "onpopstate",
                    "type": "object"
                },
                "onprogress": {
                    "description": "Occurs to indicate progress while downloading media data.",
                    "title": "onprogress",
                    "type": "object"
                },
                "onratechange": {
                    "description": "Occurs when the playback rate is increased or decreased.",
                    "title": "onratechange",
                    "type": "object"
                },
                "onreadystatechange": {
                    "title": "onreadystatechange",
                    "type": "object"
                },
                "onrejectionhandled": {
                    "title": "onrejectionhandled",
                    "type": "object"
                },
                "onreset": {
                    "description": "Fires when the user resets a form.",
                    "title": "onreset",
                    "type": "object"
                },
                "onresize": {
                    "title": "onresize",
                    "type": "object"
                },
                "onscroll": {
                    "description": "Fires when the user repositions the scroll box in the scroll bar on the object.",
                    "title": "onscroll",
                    "type": "object"
                },
                "onsecuritypolicyviolation": {
                    "title": "onsecuritypolicyviolation",
                    "type": "object"
                },
                "onseeked": {
                    "description": "Occurs when the seek operation ends.",
                    "title": "onseeked",
                    "type": "object"
                },
                "onseeking": {
                    "description": "Occurs when the current playback position is moved.",
                    "title": "onseeking",
                    "type": "object"
                },
                "onselect": {
                    "description": "Fires when the current selection changes.",
                    "title": "onselect",
                    "type": "object"
                },
                "onstalled": {
                    "description": "Occurs when the download has stopped.",
                    "title": "onstalled",
                    "type": "object"
                },
                "onstorage": {
                    "title": "onstorage",
                    "type": "object"
                },
                "onsubmit": {
                    "title": "onsubmit",
                    "type": "object"
                },
                "onsuspend": {
                    "description": "Occurs if the load operation has been intentionally halted.",
                    "title": "onsuspend",
                    "type": "object"
                },
                "ontimeupdate": {
                    "description": "Occurs to indicate the current playback position.",
                    "title": "ontimeupdate",
                    "type": "object"
                },
                "ontoggle": {
                    "title": "ontoggle",
                    "type": "object"
                },
                "ontouchcancel": {
                    "title": "ontouchcancel",
                    "type": "object"
                },
                "ontouchend": {
                    "title": "ontouchend",
                    "type": "object"
                },
                "ontouchmove": {
                    "title": "ontouchmove",
                    "type": "object"
                },
                "ontouchstart": {
                    "title": "ontouchstart",
                    "type": "object"
                },
                "ontransitioncancel": {
                    "title": "ontransitioncancel",
                    "type": "object"
                },
                "ontransitionend": {
                    "title": "ontransitionend",
                    "type": "object"
                },
                "ontransitionrun": {
                    "title": "ontransitionrun",
                    "type": "object"
                },
                "ontransitionstart": {
                    "title": "ontransitionstart",
                    "type": "object"
                },
                "onunhandledrejection": {
                    "title": "onunhandledrejection",
                    "type": "object"
                },
                "onunload": {
                    "title": "onunload",
                    "type": "object"
                },
                "onvolumechange": {
                    "description": "Occurs when the volume is changed, or playback is muted or unmuted.",
                    "title": "onvolumechange",
                    "type": "object"
                },
                "onvrdisplayactivate": {
                    "title": "onvrdisplayactivate",
                    "type": "object"
                },
                "onvrdisplayblur": {
                    "title": "onvrdisplayblur",
                    "type": "object"
                },
                "onvrdisplayconnect": {
                    "title": "onvrdisplayconnect",
                    "type": "object"
                },
                "onvrdisplaydeactivate": {
                    "title": "onvrdisplaydeactivate",
                    "type": "object"
                },
                "onvrdisplaydisconnect": {
                    "title": "onvrdisplaydisconnect",
                    "type": "object"
                },
                "onvrdisplayfocus": {
                    "title": "onvrdisplayfocus",
                    "type": "object"
                },
                "onvrdisplaypointerrestricted": {
                    "title": "onvrdisplaypointerrestricted",
                    "type": "object"
                },
                "onvrdisplaypointerunrestricted": {
                    "title": "onvrdisplaypointerunrestricted",
                    "type": "object"
                },
                "onvrdisplaypresentchange": {
                    "title": "onvrdisplaypresentchange",
                    "type": "object"
                },
                "onwaiting": {
                    "description": "Occurs when playback stops because the next frame of a video resource is not available.",
                    "title": "onwaiting",
                    "type": "object"
                },
                "onwheel": {
                    "title": "onwheel",
                    "type": "object"
                },
                "opener": {
                    "title": "opener"
                },
                "orientation": {
                    "title": "orientation",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "origin": {
                    "title": "origin",
                    "type": "string"
                },
                "outerHeight": {
                    "title": "outerHeight",
                    "type": "number"
                },
                "outerWidth": {
                    "title": "outerWidth",
                    "type": "number"
                },
                "pageXOffset": {
                    "title": "pageXOffset",
                    "type": "number"
                },
                "pageYOffset": {
                    "title": "pageYOffset",
                    "type": "number"
                },
                "parent": {
                    "$ref": "#/definitions/Window",
                    "title": "parent"
                },
                "performance": {
                    "$ref": "#/definitions/Performance",
                    "title": "performance"
                },
                "personalbar": {
                    "$ref": "#/definitions/BarProp",
                    "title": "personalbar"
                },
                "screen": {
                    "$ref": "#/definitions/Screen",
                    "title": "screen"
                },
                "screenLeft": {
                    "title": "screenLeft",
                    "type": "number"
                },
                "screenTop": {
                    "title": "screenTop",
                    "type": "number"
                },
                "screenX": {
                    "title": "screenX",
                    "type": "number"
                },
                "screenY": {
                    "title": "screenY",
                    "type": "number"
                },
                "scrollX": {
                    "title": "scrollX",
                    "type": "number"
                },
                "scrollY": {
                    "title": "scrollY",
                    "type": "number"
                },
                "scrollbars": {
                    "$ref": "#/definitions/BarProp",
                    "title": "scrollbars"
                },
                "self": {
                    "$ref": "#/definitions/Window",
                    "title": "self"
                },
                "sessionStorage": {
                    "$ref": "#/definitions/Storage",
                    "title": "sessionStorage"
                },
                "speechSynthesis": {
                    "$ref": "#/definitions/SpeechSynthesis",
                    "title": "speechSynthesis"
                },
                "status": {
                    "title": "status",
                    "type": "string"
                },
                "statusbar": {
                    "$ref": "#/definitions/BarProp",
                    "title": "statusbar"
                },
                "styleMedia": {
                    "$ref": "#/definitions/StyleMedia",
                    "title": "styleMedia"
                },
                "toolbar": {
                    "$ref": "#/definitions/BarProp",
                    "title": "toolbar"
                },
                "top": {
                    "$ref": "#/definitions/Window",
                    "title": "top"
                },
                "window": {
                    "$ref": "#/definitions/Window",
                    "title": "window"
                }
            },
            "title": "Window",
            "type": "object"
        },
        "XMLHttpRequest": {
            "properties": {
                "DONE": {
                    "title": "DONE",
                    "type": "number"
                },
                "HEADERS_RECEIVED": {
                    "title": "HEADERS_RECEIVED",
                    "type": "number"
                },
                "LOADING": {
                    "title": "LOADING",
                    "type": "number"
                },
                "OPENED": {
                    "title": "OPENED",
                    "type": "number"
                },
                "UNSENT": {
                    "title": "UNSENT",
                    "type": "number"
                },
                "onabort": {
                    "title": "onabort",
                    "type": "object"
                },
                "onerror": {
                    "title": "onerror",
                    "type": "object"
                },
                "onload": {
                    "title": "onload",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "title": "onloadstart",
                    "type": "object"
                },
                "onprogress": {
                    "title": "onprogress",
                    "type": "object"
                },
                "onreadystatechange": {
                    "title": "onreadystatechange",
                    "type": "object"
                },
                "ontimeout": {
                    "title": "ontimeout",
                    "type": "object"
                },
                "readyState": {
                    "description": "Returns client's state.",
                    "title": "readyState",
                    "type": "number"
                },
                "response": {
                    "description": "Returns the response's body.",
                    "title": "response"
                },
                "responseText": {
                    "description": "Returns the text response.\nThrows an \"InvalidStateError\" DOMException if responseType is not the empty string or \"text\".",
                    "title": "responseText",
                    "type": "string"
                },
                "responseType": {
                    "$ref": "#/definitions/XMLHttpRequestResponseType",
                    "description": "Returns the response type.\nCan be set to change the response type. Values are:\nthe empty string (default),\n\"arraybuffer\",\n\"blob\",\n\"document\",\n\"json\", and\n\"text\".\nWhen set: setting to \"document\" is ignored if current global object is not a Window object.\nWhen set: throws an \"InvalidStateError\" DOMException if state is loading or done.\nWhen set: throws an \"InvalidAccessError\" DOMException if the synchronous flag is set and current global object is a Window object.",
                    "title": "responseType"
                },
                "responseURL": {
                    "title": "responseURL",
                    "type": "string"
                },
                "responseXML": {
                    "$ref": "#/definitions/Document",
                    "description": "Returns the document response.\nThrows an \"InvalidStateError\" DOMException if responseType is not the empty string or \"document\".",
                    "title": "responseXML"
                },
                "status": {
                    "title": "status",
                    "type": "number"
                },
                "statusText": {
                    "title": "statusText",
                    "type": "string"
                },
                "timeout": {
                    "description": "Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the\nrequest has not yet completed, and the synchronous flag is unset, a timeout event will then be dispatched, or a\n\"TimeoutError\" DOMException will be thrown otherwise (for the send() method).\nWhen set: throws an \"InvalidAccessError\" DOMException if the synchronous flag is set and current global object is a Window object.",
                    "title": "timeout",
                    "type": "number"
                },
                "upload": {
                    "$ref": "#/definitions/XMLHttpRequestUpload",
                    "description": "Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is\ntransferred to a server.",
                    "title": "upload"
                },
                "withCredentials": {
                    "description": "True when credentials are to be included in a cross-origin request. False when they are\nto be excluded in a cross-origin request and when cookies are to be ignored in its response.\nInitially false.\nWhen set: throws an \"InvalidStateError\" DOMException if state is not unsent or opened, or if the send() flag is set.",
                    "title": "withCredentials",
                    "type": "boolean"
                }
            },
            "title": "XMLHttpRequest",
            "type": "object"
        },
        "XMLHttpRequestResponseType": {
            "enum": [
                "",
                "arraybuffer",
                "blob",
                "document",
                "json",
                "text"
            ],
            "title": "XMLHttpRequestResponseType",
            "type": "string"
        },
        "XMLHttpRequestUpload": {
            "properties": {
                "onabort": {
                    "title": "onabort",
                    "type": "object"
                },
                "onerror": {
                    "title": "onerror",
                    "type": "object"
                },
                "onload": {
                    "title": "onload",
                    "type": "object"
                },
                "onloadend": {
                    "title": "onloadend",
                    "type": "object"
                },
                "onloadstart": {
                    "title": "onloadstart",
                    "type": "object"
                },
                "onprogress": {
                    "title": "onprogress",
                    "type": "object"
                },
                "ontimeout": {
                    "title": "ontimeout",
                    "type": "object"
                }
            },
            "title": "XMLHttpRequestUpload",
            "type": "object"
        },
        "default": {
            "description": "Data Model - this holds all information that may be required, some\ncontent.json AND setting.json files, and will be ready after the boot state has completed,\nthis will need to be updated for each game to reflect the structure of the data being loaded.",
            "properties": {
                "fonts": {
                    "items": {
                        "$ref": "#/definitions/Phaser.GameObjects.Text.TextStyle"
                    },
                    "title": "fonts",
                    "type": "array"
                },
                "save": {
                    "$ref": "#/definitions/default_1",
                    "description": "reference to our sae data model",
                    "title": "save",
                    "type": "{SaveDataModel}"
                },
                "scaling": {
                    "$ref": "#/definitions/ScalingModel",
                    "title": "scaling"
                },
                "userInterface": {
                    "$ref": "#/definitions/default_2",
                    "title": "userInterface"
                }
            },
            "title": "default",
            "type": "object"
        },
        "default_1": {
            "description": "Represents any of the data required for a persistent explerience,\nLeaner progress, version numbers and save reference are valuble here",
            "properties": {
                "identifier": {
                    "description": "and id for this game, used as a unique varible sor save data",
                    "title": "identifier",
                    "type": "{string}"
                },
                "progress": {
                    "description": "a generic game progress varible, they will usually be changed per experience but just a simple counter for the moment.",
                    "title": "progress",
                    "type": "{number}"
                },
                "seenTutorial": {
                    "description": "This is a more elegant way of determining information from data\nwe already have, This examines if the leaner is past the first\nlevel, in which we are assuming they have seen the tutorial\na way to set if somone has seen the tutorial, again this derives the info from our data.\nso less serilised varibles required in our sae object.",
                    "title": "seenTutorial",
                    "type": "boolean"
                },
                "shouldPersistData": {
                    "description": "should this save data be persistent, IE - restore when re-visiting the experience.",
                    "title": "shouldPersistData",
                    "type": "{boolean}"
                },
                "version": {
                    "description": "Version string number of the format X.Y.\nX = major, Y = minor, Z = bug fixes",
                    "title": "version",
                    "type": "{string}"
                }
            },
            "title": "default_1",
            "type": "object"
        },
        "default_2": {
            "properties": {
                "buttons": {
                    "$ref": "#/definitions/ButtonSettings",
                    "title": "buttons"
                },
                "settings": {
                    "$ref": "#/definitions/UISettings",
                    "title": "settings"
                }
            },
            "title": "default_2",
            "type": "object"
        },
        "default_3": {
            "description": "Can be used as a standalone library, due to the nature of scorm this is built as a singleton, and should be accessed via `HyperScorm.Instance`\nA Cleaned up and more appealing Typescript port of the SCORM API wrapper\nprobably lots stolen from pipwerks : https://github.com/pipwerks/scorm-api-wrapper",
            "properties": {
                "_scorm": {
                    "$ref": "#/definitions/Scorm",
                    "description": "an instance of our scorm object.",
                    "title": "_scorm",
                    "type": "{Scorm}"
                },
                "connected": {
                    "description": "get wether the system is connected to a scorm system.",
                    "title": "connected",
                    "type": "{boolean}"
                },
                "suspendData": {
                    "description": "get the suspend data, will be an object, but you probably will want to cast this to a typed mdoel\nset the suspend data, must be an object, must be at least an object.",
                    "title": "suspendData",
                    "type": "{object}"
                },
                "version": {
                    "$ref": "#/definitions/ScormVersion",
                    "description": "the version of scorm we are connected to, either 1.2 or 2004",
                    "title": "version",
                    "type": "{ScormVersion}"
                }
            },
            "title": "default_3",
            "type": "object"
        }
    },
    "properties": {
        "_scorm": {
            "$ref": "#/definitions/default_3",
            "description": "our instnace of the pipwreks-esque scorm wrapper",
            "title": "_scorm",
            "type": "{HyperScorm}"
        },
        "game": {
            "$ref": "#/definitions/Phaser.Game",
            "description": "A reference to the Game instance this plugin is running under.",
            "title": "game"
        },
        "pluginManager": {
            "$ref": "#/definitions/Phaser.Plugins.PluginManager",
            "description": "A handy reference to the Plugin Manager that is responsible for this plugin.\nCan be used as a route to gain access to game systems and  events.",
            "title": "pluginManager"
        },
        "raw": {
            "$ref": "#/definitions/default",
            "description": "A raw representation of the current data model loaded into the game.",
            "title": "raw",
            "type": "{GameModel}"
        },
        "save": {
            "$ref": "#/definitions/default_1",
            "description": "get the current save model value\nset the save model value and persist data if required.",
            "title": "save",
            "type": "{SaveDataModel}"
        },
        "scene": {
            "$ref": "#/definitions/Phaser.Scene",
            "description": "A reference to the Scene that has installed this plugin.\nOnly set if it's a Scene Plugin, otherwise `null`.\nThis property is only set when the plugin is instantiated and added to the Scene, not before.\nYou cannot use it during the `init` method, but you can during the `boot` method.",
            "title": "scene"
        },
        "systems": {
            "$ref": "#/definitions/Phaser.Scenes.Systems",
            "description": "A reference to the Scene Systems of the Scene that has installed this plugin.\nOnly set if it's a Scene Plugin, otherwise `null`.\nThis property is only set when the plugin is instantiated and added to the Scene, not before.\nYou cannot use it during the `init` method, but you can during the `boot` method.",
            "title": "systems"
        },
        "trackingMode": {
            "$ref": "#/definitions/TrackingMode",
            "description": "the tracking mode this current project is set up to work with.",
            "title": "trackingMode",
            "type": "{TrackingMode}"
        }
    },
    "type": "object"
}

